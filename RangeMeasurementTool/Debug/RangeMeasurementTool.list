
RangeMeasurementTool.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cbc4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003748  0800cd58  0800cd58  0001cd58  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080104a0  080104a0  000301e0  2**0
                  CONTENTS
  4 .ARM          00000008  080104a0  080104a0  000204a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080104a8  080104a8  000301e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080104a8  080104a8  000204a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080104ac  080104ac  000204ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  080104b0  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000a5e8  200001e0  08010690  000301e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  2000a7c8  08010690  0003a7c8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000301e0  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00030210  2**0
                  CONTENTS, READONLY
 13 .debug_info   000193c2  00000000  00000000  00030253  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003f39  00000000  00000000  00049615  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001638  00000000  00000000  0004d550  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000110c  00000000  00000000  0004eb88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002a859  00000000  00000000  0004fc94  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001da74  00000000  00000000  0007a4ed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000fa52d  00000000  00000000  00097f61  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00006e20  00000000  00000000  00192490  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000077  00000000  00000000  001992b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e0 	.word	0x200001e0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800cd3c 	.word	0x0800cd3c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e4 	.word	0x200001e4
 80001cc:	0800cd3c 	.word	0x0800cd3c

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bbc:	f000 b970 	b.w	8000ea0 <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9e08      	ldr	r6, [sp, #32]
 8000bde:	460d      	mov	r5, r1
 8000be0:	4604      	mov	r4, r0
 8000be2:	460f      	mov	r7, r1
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d14a      	bne.n	8000c7e <__udivmoddi4+0xa6>
 8000be8:	428a      	cmp	r2, r1
 8000bea:	4694      	mov	ip, r2
 8000bec:	d965      	bls.n	8000cba <__udivmoddi4+0xe2>
 8000bee:	fab2 f382 	clz	r3, r2
 8000bf2:	b143      	cbz	r3, 8000c06 <__udivmoddi4+0x2e>
 8000bf4:	fa02 fc03 	lsl.w	ip, r2, r3
 8000bf8:	f1c3 0220 	rsb	r2, r3, #32
 8000bfc:	409f      	lsls	r7, r3
 8000bfe:	fa20 f202 	lsr.w	r2, r0, r2
 8000c02:	4317      	orrs	r7, r2
 8000c04:	409c      	lsls	r4, r3
 8000c06:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000c0a:	fa1f f58c 	uxth.w	r5, ip
 8000c0e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000c12:	0c22      	lsrs	r2, r4, #16
 8000c14:	fb0e 7711 	mls	r7, lr, r1, r7
 8000c18:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000c1c:	fb01 f005 	mul.w	r0, r1, r5
 8000c20:	4290      	cmp	r0, r2
 8000c22:	d90a      	bls.n	8000c3a <__udivmoddi4+0x62>
 8000c24:	eb1c 0202 	adds.w	r2, ip, r2
 8000c28:	f101 37ff 	add.w	r7, r1, #4294967295
 8000c2c:	f080 811c 	bcs.w	8000e68 <__udivmoddi4+0x290>
 8000c30:	4290      	cmp	r0, r2
 8000c32:	f240 8119 	bls.w	8000e68 <__udivmoddi4+0x290>
 8000c36:	3902      	subs	r1, #2
 8000c38:	4462      	add	r2, ip
 8000c3a:	1a12      	subs	r2, r2, r0
 8000c3c:	b2a4      	uxth	r4, r4
 8000c3e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c42:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c46:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c4a:	fb00 f505 	mul.w	r5, r0, r5
 8000c4e:	42a5      	cmp	r5, r4
 8000c50:	d90a      	bls.n	8000c68 <__udivmoddi4+0x90>
 8000c52:	eb1c 0404 	adds.w	r4, ip, r4
 8000c56:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c5a:	f080 8107 	bcs.w	8000e6c <__udivmoddi4+0x294>
 8000c5e:	42a5      	cmp	r5, r4
 8000c60:	f240 8104 	bls.w	8000e6c <__udivmoddi4+0x294>
 8000c64:	4464      	add	r4, ip
 8000c66:	3802      	subs	r0, #2
 8000c68:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c6c:	1b64      	subs	r4, r4, r5
 8000c6e:	2100      	movs	r1, #0
 8000c70:	b11e      	cbz	r6, 8000c7a <__udivmoddi4+0xa2>
 8000c72:	40dc      	lsrs	r4, r3
 8000c74:	2300      	movs	r3, #0
 8000c76:	e9c6 4300 	strd	r4, r3, [r6]
 8000c7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c7e:	428b      	cmp	r3, r1
 8000c80:	d908      	bls.n	8000c94 <__udivmoddi4+0xbc>
 8000c82:	2e00      	cmp	r6, #0
 8000c84:	f000 80ed 	beq.w	8000e62 <__udivmoddi4+0x28a>
 8000c88:	2100      	movs	r1, #0
 8000c8a:	e9c6 0500 	strd	r0, r5, [r6]
 8000c8e:	4608      	mov	r0, r1
 8000c90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c94:	fab3 f183 	clz	r1, r3
 8000c98:	2900      	cmp	r1, #0
 8000c9a:	d149      	bne.n	8000d30 <__udivmoddi4+0x158>
 8000c9c:	42ab      	cmp	r3, r5
 8000c9e:	d302      	bcc.n	8000ca6 <__udivmoddi4+0xce>
 8000ca0:	4282      	cmp	r2, r0
 8000ca2:	f200 80f8 	bhi.w	8000e96 <__udivmoddi4+0x2be>
 8000ca6:	1a84      	subs	r4, r0, r2
 8000ca8:	eb65 0203 	sbc.w	r2, r5, r3
 8000cac:	2001      	movs	r0, #1
 8000cae:	4617      	mov	r7, r2
 8000cb0:	2e00      	cmp	r6, #0
 8000cb2:	d0e2      	beq.n	8000c7a <__udivmoddi4+0xa2>
 8000cb4:	e9c6 4700 	strd	r4, r7, [r6]
 8000cb8:	e7df      	b.n	8000c7a <__udivmoddi4+0xa2>
 8000cba:	b902      	cbnz	r2, 8000cbe <__udivmoddi4+0xe6>
 8000cbc:	deff      	udf	#255	; 0xff
 8000cbe:	fab2 f382 	clz	r3, r2
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	f040 8090 	bne.w	8000de8 <__udivmoddi4+0x210>
 8000cc8:	1a8a      	subs	r2, r1, r2
 8000cca:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cce:	fa1f fe8c 	uxth.w	lr, ip
 8000cd2:	2101      	movs	r1, #1
 8000cd4:	fbb2 f5f7 	udiv	r5, r2, r7
 8000cd8:	fb07 2015 	mls	r0, r7, r5, r2
 8000cdc:	0c22      	lsrs	r2, r4, #16
 8000cde:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000ce2:	fb0e f005 	mul.w	r0, lr, r5
 8000ce6:	4290      	cmp	r0, r2
 8000ce8:	d908      	bls.n	8000cfc <__udivmoddi4+0x124>
 8000cea:	eb1c 0202 	adds.w	r2, ip, r2
 8000cee:	f105 38ff 	add.w	r8, r5, #4294967295
 8000cf2:	d202      	bcs.n	8000cfa <__udivmoddi4+0x122>
 8000cf4:	4290      	cmp	r0, r2
 8000cf6:	f200 80cb 	bhi.w	8000e90 <__udivmoddi4+0x2b8>
 8000cfa:	4645      	mov	r5, r8
 8000cfc:	1a12      	subs	r2, r2, r0
 8000cfe:	b2a4      	uxth	r4, r4
 8000d00:	fbb2 f0f7 	udiv	r0, r2, r7
 8000d04:	fb07 2210 	mls	r2, r7, r0, r2
 8000d08:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d0c:	fb0e fe00 	mul.w	lr, lr, r0
 8000d10:	45a6      	cmp	lr, r4
 8000d12:	d908      	bls.n	8000d26 <__udivmoddi4+0x14e>
 8000d14:	eb1c 0404 	adds.w	r4, ip, r4
 8000d18:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d1c:	d202      	bcs.n	8000d24 <__udivmoddi4+0x14c>
 8000d1e:	45a6      	cmp	lr, r4
 8000d20:	f200 80bb 	bhi.w	8000e9a <__udivmoddi4+0x2c2>
 8000d24:	4610      	mov	r0, r2
 8000d26:	eba4 040e 	sub.w	r4, r4, lr
 8000d2a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000d2e:	e79f      	b.n	8000c70 <__udivmoddi4+0x98>
 8000d30:	f1c1 0720 	rsb	r7, r1, #32
 8000d34:	408b      	lsls	r3, r1
 8000d36:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d3a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d3e:	fa05 f401 	lsl.w	r4, r5, r1
 8000d42:	fa20 f307 	lsr.w	r3, r0, r7
 8000d46:	40fd      	lsrs	r5, r7
 8000d48:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d4c:	4323      	orrs	r3, r4
 8000d4e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000d52:	fa1f fe8c 	uxth.w	lr, ip
 8000d56:	fb09 5518 	mls	r5, r9, r8, r5
 8000d5a:	0c1c      	lsrs	r4, r3, #16
 8000d5c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000d60:	fb08 f50e 	mul.w	r5, r8, lr
 8000d64:	42a5      	cmp	r5, r4
 8000d66:	fa02 f201 	lsl.w	r2, r2, r1
 8000d6a:	fa00 f001 	lsl.w	r0, r0, r1
 8000d6e:	d90b      	bls.n	8000d88 <__udivmoddi4+0x1b0>
 8000d70:	eb1c 0404 	adds.w	r4, ip, r4
 8000d74:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d78:	f080 8088 	bcs.w	8000e8c <__udivmoddi4+0x2b4>
 8000d7c:	42a5      	cmp	r5, r4
 8000d7e:	f240 8085 	bls.w	8000e8c <__udivmoddi4+0x2b4>
 8000d82:	f1a8 0802 	sub.w	r8, r8, #2
 8000d86:	4464      	add	r4, ip
 8000d88:	1b64      	subs	r4, r4, r5
 8000d8a:	b29d      	uxth	r5, r3
 8000d8c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000d90:	fb09 4413 	mls	r4, r9, r3, r4
 8000d94:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000d98:	fb03 fe0e 	mul.w	lr, r3, lr
 8000d9c:	45a6      	cmp	lr, r4
 8000d9e:	d908      	bls.n	8000db2 <__udivmoddi4+0x1da>
 8000da0:	eb1c 0404 	adds.w	r4, ip, r4
 8000da4:	f103 35ff 	add.w	r5, r3, #4294967295
 8000da8:	d26c      	bcs.n	8000e84 <__udivmoddi4+0x2ac>
 8000daa:	45a6      	cmp	lr, r4
 8000dac:	d96a      	bls.n	8000e84 <__udivmoddi4+0x2ac>
 8000dae:	3b02      	subs	r3, #2
 8000db0:	4464      	add	r4, ip
 8000db2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000db6:	fba3 9502 	umull	r9, r5, r3, r2
 8000dba:	eba4 040e 	sub.w	r4, r4, lr
 8000dbe:	42ac      	cmp	r4, r5
 8000dc0:	46c8      	mov	r8, r9
 8000dc2:	46ae      	mov	lr, r5
 8000dc4:	d356      	bcc.n	8000e74 <__udivmoddi4+0x29c>
 8000dc6:	d053      	beq.n	8000e70 <__udivmoddi4+0x298>
 8000dc8:	b156      	cbz	r6, 8000de0 <__udivmoddi4+0x208>
 8000dca:	ebb0 0208 	subs.w	r2, r0, r8
 8000dce:	eb64 040e 	sbc.w	r4, r4, lr
 8000dd2:	fa04 f707 	lsl.w	r7, r4, r7
 8000dd6:	40ca      	lsrs	r2, r1
 8000dd8:	40cc      	lsrs	r4, r1
 8000dda:	4317      	orrs	r7, r2
 8000ddc:	e9c6 7400 	strd	r7, r4, [r6]
 8000de0:	4618      	mov	r0, r3
 8000de2:	2100      	movs	r1, #0
 8000de4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000de8:	f1c3 0120 	rsb	r1, r3, #32
 8000dec:	fa02 fc03 	lsl.w	ip, r2, r3
 8000df0:	fa20 f201 	lsr.w	r2, r0, r1
 8000df4:	fa25 f101 	lsr.w	r1, r5, r1
 8000df8:	409d      	lsls	r5, r3
 8000dfa:	432a      	orrs	r2, r5
 8000dfc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e00:	fa1f fe8c 	uxth.w	lr, ip
 8000e04:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e08:	fb07 1510 	mls	r5, r7, r0, r1
 8000e0c:	0c11      	lsrs	r1, r2, #16
 8000e0e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000e12:	fb00 f50e 	mul.w	r5, r0, lr
 8000e16:	428d      	cmp	r5, r1
 8000e18:	fa04 f403 	lsl.w	r4, r4, r3
 8000e1c:	d908      	bls.n	8000e30 <__udivmoddi4+0x258>
 8000e1e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e22:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e26:	d22f      	bcs.n	8000e88 <__udivmoddi4+0x2b0>
 8000e28:	428d      	cmp	r5, r1
 8000e2a:	d92d      	bls.n	8000e88 <__udivmoddi4+0x2b0>
 8000e2c:	3802      	subs	r0, #2
 8000e2e:	4461      	add	r1, ip
 8000e30:	1b49      	subs	r1, r1, r5
 8000e32:	b292      	uxth	r2, r2
 8000e34:	fbb1 f5f7 	udiv	r5, r1, r7
 8000e38:	fb07 1115 	mls	r1, r7, r5, r1
 8000e3c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e40:	fb05 f10e 	mul.w	r1, r5, lr
 8000e44:	4291      	cmp	r1, r2
 8000e46:	d908      	bls.n	8000e5a <__udivmoddi4+0x282>
 8000e48:	eb1c 0202 	adds.w	r2, ip, r2
 8000e4c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e50:	d216      	bcs.n	8000e80 <__udivmoddi4+0x2a8>
 8000e52:	4291      	cmp	r1, r2
 8000e54:	d914      	bls.n	8000e80 <__udivmoddi4+0x2a8>
 8000e56:	3d02      	subs	r5, #2
 8000e58:	4462      	add	r2, ip
 8000e5a:	1a52      	subs	r2, r2, r1
 8000e5c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000e60:	e738      	b.n	8000cd4 <__udivmoddi4+0xfc>
 8000e62:	4631      	mov	r1, r6
 8000e64:	4630      	mov	r0, r6
 8000e66:	e708      	b.n	8000c7a <__udivmoddi4+0xa2>
 8000e68:	4639      	mov	r1, r7
 8000e6a:	e6e6      	b.n	8000c3a <__udivmoddi4+0x62>
 8000e6c:	4610      	mov	r0, r2
 8000e6e:	e6fb      	b.n	8000c68 <__udivmoddi4+0x90>
 8000e70:	4548      	cmp	r0, r9
 8000e72:	d2a9      	bcs.n	8000dc8 <__udivmoddi4+0x1f0>
 8000e74:	ebb9 0802 	subs.w	r8, r9, r2
 8000e78:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000e7c:	3b01      	subs	r3, #1
 8000e7e:	e7a3      	b.n	8000dc8 <__udivmoddi4+0x1f0>
 8000e80:	4645      	mov	r5, r8
 8000e82:	e7ea      	b.n	8000e5a <__udivmoddi4+0x282>
 8000e84:	462b      	mov	r3, r5
 8000e86:	e794      	b.n	8000db2 <__udivmoddi4+0x1da>
 8000e88:	4640      	mov	r0, r8
 8000e8a:	e7d1      	b.n	8000e30 <__udivmoddi4+0x258>
 8000e8c:	46d0      	mov	r8, sl
 8000e8e:	e77b      	b.n	8000d88 <__udivmoddi4+0x1b0>
 8000e90:	3d02      	subs	r5, #2
 8000e92:	4462      	add	r2, ip
 8000e94:	e732      	b.n	8000cfc <__udivmoddi4+0x124>
 8000e96:	4608      	mov	r0, r1
 8000e98:	e70a      	b.n	8000cb0 <__udivmoddi4+0xd8>
 8000e9a:	4464      	add	r4, ip
 8000e9c:	3802      	subs	r0, #2
 8000e9e:	e742      	b.n	8000d26 <__udivmoddi4+0x14e>

08000ea0 <__aeabi_idiv0>:
 8000ea0:	4770      	bx	lr
 8000ea2:	bf00      	nop

08000ea4 <MX_DAC1_Init>:

DAC_HandleTypeDef hdac1;

/* DAC1 init function */
void MX_DAC1_Init(void)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	b08a      	sub	sp, #40	; 0x28
 8000ea8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000eaa:	1d3b      	adds	r3, r7, #4
 8000eac:	2224      	movs	r2, #36	; 0x24
 8000eae:	2100      	movs	r1, #0
 8000eb0:	4618      	mov	r0, r3
 8000eb2:	f008 fefb 	bl	8009cac <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 8000eb6:	4b12      	ldr	r3, [pc, #72]	; (8000f00 <MX_DAC1_Init+0x5c>)
 8000eb8:	4a12      	ldr	r2, [pc, #72]	; (8000f04 <MX_DAC1_Init+0x60>)
 8000eba:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8000ebc:	4810      	ldr	r0, [pc, #64]	; (8000f00 <MX_DAC1_Init+0x5c>)
 8000ebe:	f001 fec4 	bl	8002c4a <HAL_DAC_Init>
 8000ec2:	4603      	mov	r3, r0
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d001      	beq.n	8000ecc <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8000ec8:	f000 fd11 	bl	80018ee <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8000ecc:	2300      	movs	r3, #0
 8000ece:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8000ed0:	2300      	movs	r3, #0
 8000ed2:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_DISABLE;
 8000ed4:	2302      	movs	r3, #2
 8000ed6:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_ENABLE;
 8000ed8:	2301      	movs	r3, #1
 8000eda:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8000edc:	2300      	movs	r3, #0
 8000ede:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000ee0:	1d3b      	adds	r3, r7, #4
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	4619      	mov	r1, r3
 8000ee6:	4806      	ldr	r0, [pc, #24]	; (8000f00 <MX_DAC1_Init+0x5c>)
 8000ee8:	f001 fed1 	bl	8002c8e <HAL_DAC_ConfigChannel>
 8000eec:	4603      	mov	r3, r0
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d001      	beq.n	8000ef6 <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 8000ef2:	f000 fcfc 	bl	80018ee <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8000ef6:	bf00      	nop
 8000ef8:	3728      	adds	r7, #40	; 0x28
 8000efa:	46bd      	mov	sp, r7
 8000efc:	bd80      	pop	{r7, pc}
 8000efe:	bf00      	nop
 8000f00:	200001fc 	.word	0x200001fc
 8000f04:	40007400 	.word	0x40007400

08000f08 <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 8000f08:	b480      	push	{r7}
 8000f0a:	b085      	sub	sp, #20
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	6078      	str	r0, [r7, #4]

  if(dacHandle->Instance==DAC1)
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	4a0a      	ldr	r2, [pc, #40]	; (8000f40 <HAL_DAC_MspInit+0x38>)
 8000f16:	4293      	cmp	r3, r2
 8000f18:	d10b      	bne.n	8000f32 <HAL_DAC_MspInit+0x2a>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* DAC1 clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 8000f1a:	4b0a      	ldr	r3, [pc, #40]	; (8000f44 <HAL_DAC_MspInit+0x3c>)
 8000f1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f1e:	4a09      	ldr	r2, [pc, #36]	; (8000f44 <HAL_DAC_MspInit+0x3c>)
 8000f20:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8000f24:	6593      	str	r3, [r2, #88]	; 0x58
 8000f26:	4b07      	ldr	r3, [pc, #28]	; (8000f44 <HAL_DAC_MspInit+0x3c>)
 8000f28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f2a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000f2e:	60fb      	str	r3, [r7, #12]
 8000f30:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }
}
 8000f32:	bf00      	nop
 8000f34:	3714      	adds	r7, #20
 8000f36:	46bd      	mov	sp, r7
 8000f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3c:	4770      	bx	lr
 8000f3e:	bf00      	nop
 8000f40:	40007400 	.word	0x40007400
 8000f44:	40021000 	.word	0x40021000

08000f48 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b082      	sub	sp, #8
 8000f4c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000f4e:	4b10      	ldr	r3, [pc, #64]	; (8000f90 <MX_DMA_Init+0x48>)
 8000f50:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000f52:	4a0f      	ldr	r2, [pc, #60]	; (8000f90 <MX_DMA_Init+0x48>)
 8000f54:	f043 0301 	orr.w	r3, r3, #1
 8000f58:	6493      	str	r3, [r2, #72]	; 0x48
 8000f5a:	4b0d      	ldr	r3, [pc, #52]	; (8000f90 <MX_DMA_Init+0x48>)
 8000f5c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000f5e:	f003 0301 	and.w	r3, r3, #1
 8000f62:	607b      	str	r3, [r7, #4]
 8000f64:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8000f66:	2200      	movs	r2, #0
 8000f68:	2100      	movs	r1, #0
 8000f6a:	200f      	movs	r0, #15
 8000f6c:	f001 fe37 	bl	8002bde <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8000f70:	200f      	movs	r0, #15
 8000f72:	f001 fe50 	bl	8002c16 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 8000f76:	2200      	movs	r2, #0
 8000f78:	2100      	movs	r1, #0
 8000f7a:	2010      	movs	r0, #16
 8000f7c:	f001 fe2f 	bl	8002bde <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8000f80:	2010      	movs	r0, #16
 8000f82:	f001 fe48 	bl	8002c16 <HAL_NVIC_EnableIRQ>

}
 8000f86:	bf00      	nop
 8000f88:	3708      	adds	r7, #8
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	bd80      	pop	{r7, pc}
 8000f8e:	bf00      	nop
 8000f90:	40021000 	.word	0x40021000

08000f94 <send_cmd>:
  else
    return HAL_ERROR;
}

static HAL_StatusTypeDef send_cmd(const uint8_t* rom_code, uint8_t cmd)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b084      	sub	sp, #16
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	6078      	str	r0, [r7, #4]
 8000f9c:	460b      	mov	r3, r1
 8000f9e:	70fb      	strb	r3, [r7, #3]
  int i;

  if (wire_reset() != HAL_OK)
 8000fa0:	f001 fafa 	bl	8002598 <wire_reset>
 8000fa4:	4603      	mov	r3, r0
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d001      	beq.n	8000fae <send_cmd+0x1a>
    return HAL_ERROR;
 8000faa:	2301      	movs	r3, #1
 8000fac:	e01e      	b.n	8000fec <send_cmd+0x58>

  if (!rom_code) {
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d103      	bne.n	8000fbc <send_cmd+0x28>
    wire_write(DS18B20_SKIP_ROM);
 8000fb4:	20cc      	movs	r0, #204	; 0xcc
 8000fb6:	f001 fb78 	bl	80026aa <wire_write>
 8000fba:	e012      	b.n	8000fe2 <send_cmd+0x4e>
  } else {
    wire_write(DS18B20_MATCH_ROM);
 8000fbc:	2055      	movs	r0, #85	; 0x55
 8000fbe:	f001 fb74 	bl	80026aa <wire_write>
    for (i = 0; i < DS18B20_ROM_CODE_SIZE; i++)
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	60fb      	str	r3, [r7, #12]
 8000fc6:	e009      	b.n	8000fdc <send_cmd+0x48>
      wire_write(rom_code[i]);
 8000fc8:	68fb      	ldr	r3, [r7, #12]
 8000fca:	687a      	ldr	r2, [r7, #4]
 8000fcc:	4413      	add	r3, r2
 8000fce:	781b      	ldrb	r3, [r3, #0]
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	f001 fb6a 	bl	80026aa <wire_write>
    for (i = 0; i < DS18B20_ROM_CODE_SIZE; i++)
 8000fd6:	68fb      	ldr	r3, [r7, #12]
 8000fd8:	3301      	adds	r3, #1
 8000fda:	60fb      	str	r3, [r7, #12]
 8000fdc:	68fb      	ldr	r3, [r7, #12]
 8000fde:	2b07      	cmp	r3, #7
 8000fe0:	ddf2      	ble.n	8000fc8 <send_cmd+0x34>
  }
  wire_write(cmd);
 8000fe2:	78fb      	ldrb	r3, [r7, #3]
 8000fe4:	4618      	mov	r0, r3
 8000fe6:	f001 fb60 	bl	80026aa <wire_write>
  return HAL_OK;
 8000fea:	2300      	movs	r3, #0
}
 8000fec:	4618      	mov	r0, r3
 8000fee:	3710      	adds	r7, #16
 8000ff0:	46bd      	mov	sp, r7
 8000ff2:	bd80      	pop	{r7, pc}

08000ff4 <ds18b20_start_measure>:

HAL_StatusTypeDef ds18b20_start_measure(const uint8_t* rom_code)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b082      	sub	sp, #8
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	6078      	str	r0, [r7, #4]
  return send_cmd(rom_code, DS18B20_CONVERT_T);
 8000ffc:	2144      	movs	r1, #68	; 0x44
 8000ffe:	6878      	ldr	r0, [r7, #4]
 8001000:	f7ff ffc8 	bl	8000f94 <send_cmd>
 8001004:	4603      	mov	r3, r0
}
 8001006:	4618      	mov	r0, r3
 8001008:	3708      	adds	r7, #8
 800100a:	46bd      	mov	sp, r7
 800100c:	bd80      	pop	{r7, pc}

0800100e <ds18b20_read_scratchpad>:

static HAL_StatusTypeDef ds18b20_read_scratchpad(const uint8_t* rom_code, uint8_t* scratchpad)
{
 800100e:	b590      	push	{r4, r7, lr}
 8001010:	b085      	sub	sp, #20
 8001012:	af00      	add	r7, sp, #0
 8001014:	6078      	str	r0, [r7, #4]
 8001016:	6039      	str	r1, [r7, #0]
  int i;
  uint8_t crc;

  if (send_cmd(rom_code, DS18B20_READ_SCRATCHPAD) != HAL_OK)
 8001018:	21be      	movs	r1, #190	; 0xbe
 800101a:	6878      	ldr	r0, [r7, #4]
 800101c:	f7ff ffba 	bl	8000f94 <send_cmd>
 8001020:	4603      	mov	r3, r0
 8001022:	2b00      	cmp	r3, #0
 8001024:	d001      	beq.n	800102a <ds18b20_read_scratchpad+0x1c>
    return HAL_ERROR;
 8001026:	2301      	movs	r3, #1
 8001028:	e01e      	b.n	8001068 <ds18b20_read_scratchpad+0x5a>

  for (i = 0; i < DS18B20_SCRATCHPAD_SIZE; i++)
 800102a:	2300      	movs	r3, #0
 800102c:	60fb      	str	r3, [r7, #12]
 800102e:	e009      	b.n	8001044 <ds18b20_read_scratchpad+0x36>
    scratchpad[i] = wire_read();
 8001030:	68fb      	ldr	r3, [r7, #12]
 8001032:	683a      	ldr	r2, [r7, #0]
 8001034:	18d4      	adds	r4, r2, r3
 8001036:	f001 fb19 	bl	800266c <wire_read>
 800103a:	4603      	mov	r3, r0
 800103c:	7023      	strb	r3, [r4, #0]
  for (i = 0; i < DS18B20_SCRATCHPAD_SIZE; i++)
 800103e:	68fb      	ldr	r3, [r7, #12]
 8001040:	3301      	adds	r3, #1
 8001042:	60fb      	str	r3, [r7, #12]
 8001044:	68fb      	ldr	r3, [r7, #12]
 8001046:	2b08      	cmp	r3, #8
 8001048:	ddf2      	ble.n	8001030 <ds18b20_read_scratchpad+0x22>

  crc = wire_crc(scratchpad, DS18B20_SCRATCHPAD_SIZE - 1);
 800104a:	2108      	movs	r1, #8
 800104c:	6838      	ldr	r0, [r7, #0]
 800104e:	f001 fb74 	bl	800273a <wire_crc>
 8001052:	4603      	mov	r3, r0
 8001054:	72fb      	strb	r3, [r7, #11]
  if (scratchpad[DS18B20_SCRATCHPAD_SIZE - 1] == crc)
 8001056:	683b      	ldr	r3, [r7, #0]
 8001058:	3308      	adds	r3, #8
 800105a:	781b      	ldrb	r3, [r3, #0]
 800105c:	7afa      	ldrb	r2, [r7, #11]
 800105e:	429a      	cmp	r2, r3
 8001060:	d101      	bne.n	8001066 <ds18b20_read_scratchpad+0x58>
    return HAL_OK;
 8001062:	2300      	movs	r3, #0
 8001064:	e000      	b.n	8001068 <ds18b20_read_scratchpad+0x5a>
  else
    return HAL_ERROR;
 8001066:	2301      	movs	r3, #1
}
 8001068:	4618      	mov	r0, r3
 800106a:	3714      	adds	r7, #20
 800106c:	46bd      	mov	sp, r7
 800106e:	bd90      	pop	{r4, r7, pc}

08001070 <ds18b20_get_temp>:

float ds18b20_get_temp(const uint8_t* rom_code)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	b086      	sub	sp, #24
 8001074:	af00      	add	r7, sp, #0
 8001076:	6078      	str	r0, [r7, #4]
  uint8_t scratchpad[DS18B20_SCRATCHPAD_SIZE];
  int16_t temp;

  if (ds18b20_read_scratchpad(rom_code, scratchpad) != HAL_OK)
 8001078:	f107 030c 	add.w	r3, r7, #12
 800107c:	4619      	mov	r1, r3
 800107e:	6878      	ldr	r0, [r7, #4]
 8001080:	f7ff ffc5 	bl	800100e <ds18b20_read_scratchpad>
 8001084:	4603      	mov	r3, r0
 8001086:	2b00      	cmp	r3, #0
 8001088:	d002      	beq.n	8001090 <ds18b20_get_temp+0x20>
    return 85.0f;
 800108a:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 80010b8 <ds18b20_get_temp+0x48>
 800108e:	e00b      	b.n	80010a8 <ds18b20_get_temp+0x38>
 8001090:	89bb      	ldrh	r3, [r7, #12]

  memcpy(&temp, &scratchpad[0], sizeof(temp));
 8001092:	817b      	strh	r3, [r7, #10]

  return temp / 16.0f;
 8001094:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001098:	ee07 3a90 	vmov	s15, r3
 800109c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80010a0:	eef3 6a00 	vmov.f32	s13, #48	; 0x41800000  16.0
 80010a4:	ee87 7aa6 	vdiv.f32	s14, s15, s13
}
 80010a8:	eef0 7a47 	vmov.f32	s15, s14
 80010ac:	eeb0 0a67 	vmov.f32	s0, s15
 80010b0:	3718      	adds	r7, #24
 80010b2:	46bd      	mov	sp, r7
 80010b4:	bd80      	pop	{r7, pc}
 80010b6:	bf00      	nop
 80010b8:	42aa0000 	.word	0x42aa0000

080010bc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	b08a      	sub	sp, #40	; 0x28
 80010c0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010c2:	f107 0314 	add.w	r3, r7, #20
 80010c6:	2200      	movs	r2, #0
 80010c8:	601a      	str	r2, [r3, #0]
 80010ca:	605a      	str	r2, [r3, #4]
 80010cc:	609a      	str	r2, [r3, #8]
 80010ce:	60da      	str	r2, [r3, #12]
 80010d0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80010d2:	4b36      	ldr	r3, [pc, #216]	; (80011ac <MX_GPIO_Init+0xf0>)
 80010d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010d6:	4a35      	ldr	r2, [pc, #212]	; (80011ac <MX_GPIO_Init+0xf0>)
 80010d8:	f043 0304 	orr.w	r3, r3, #4
 80010dc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010de:	4b33      	ldr	r3, [pc, #204]	; (80011ac <MX_GPIO_Init+0xf0>)
 80010e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010e2:	f003 0304 	and.w	r3, r3, #4
 80010e6:	613b      	str	r3, [r7, #16]
 80010e8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80010ea:	4b30      	ldr	r3, [pc, #192]	; (80011ac <MX_GPIO_Init+0xf0>)
 80010ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010ee:	4a2f      	ldr	r2, [pc, #188]	; (80011ac <MX_GPIO_Init+0xf0>)
 80010f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80010f4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010f6:	4b2d      	ldr	r3, [pc, #180]	; (80011ac <MX_GPIO_Init+0xf0>)
 80010f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80010fe:	60fb      	str	r3, [r7, #12]
 8001100:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001102:	4b2a      	ldr	r3, [pc, #168]	; (80011ac <MX_GPIO_Init+0xf0>)
 8001104:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001106:	4a29      	ldr	r2, [pc, #164]	; (80011ac <MX_GPIO_Init+0xf0>)
 8001108:	f043 0301 	orr.w	r3, r3, #1
 800110c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800110e:	4b27      	ldr	r3, [pc, #156]	; (80011ac <MX_GPIO_Init+0xf0>)
 8001110:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001112:	f003 0301 	and.w	r3, r3, #1
 8001116:	60bb      	str	r3, [r7, #8]
 8001118:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800111a:	4b24      	ldr	r3, [pc, #144]	; (80011ac <MX_GPIO_Init+0xf0>)
 800111c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800111e:	4a23      	ldr	r2, [pc, #140]	; (80011ac <MX_GPIO_Init+0xf0>)
 8001120:	f043 0302 	orr.w	r3, r3, #2
 8001124:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001126:	4b21      	ldr	r3, [pc, #132]	; (80011ac <MX_GPIO_Init+0xf0>)
 8001128:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800112a:	f003 0302 	and.w	r3, r3, #2
 800112e:	607b      	str	r3, [r7, #4]
 8001130:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001132:	2200      	movs	r2, #0
 8001134:	2120      	movs	r1, #32
 8001136:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800113a:	f002 fa71 	bl	8003620 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LCD_RST_Pin|LCD_DC_Pin|LCD_CS_Pin, GPIO_PIN_RESET);
 800113e:	2200      	movs	r2, #0
 8001140:	f641 0104 	movw	r1, #6148	; 0x1804
 8001144:	481a      	ldr	r0, [pc, #104]	; (80011b0 <MX_GPIO_Init+0xf4>)
 8001146:	f002 fa6b 	bl	8003620 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 800114a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800114e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001150:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001154:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001156:	2300      	movs	r3, #0
 8001158:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800115a:	f107 0314 	add.w	r3, r7, #20
 800115e:	4619      	mov	r1, r3
 8001160:	4814      	ldr	r0, [pc, #80]	; (80011b4 <MX_GPIO_Init+0xf8>)
 8001162:	f002 f8b3 	bl	80032cc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001166:	2320      	movs	r3, #32
 8001168:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800116a:	2301      	movs	r3, #1
 800116c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800116e:	2300      	movs	r3, #0
 8001170:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001172:	2300      	movs	r3, #0
 8001174:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001176:	f107 0314 	add.w	r3, r7, #20
 800117a:	4619      	mov	r1, r3
 800117c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001180:	f002 f8a4 	bl	80032cc <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LCD_RST_Pin|LCD_DC_Pin|LCD_CS_Pin;
 8001184:	f641 0304 	movw	r3, #6148	; 0x1804
 8001188:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800118a:	2301      	movs	r3, #1
 800118c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800118e:	2300      	movs	r3, #0
 8001190:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001192:	2300      	movs	r3, #0
 8001194:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001196:	f107 0314 	add.w	r3, r7, #20
 800119a:	4619      	mov	r1, r3
 800119c:	4804      	ldr	r0, [pc, #16]	; (80011b0 <MX_GPIO_Init+0xf4>)
 800119e:	f002 f895 	bl	80032cc <HAL_GPIO_Init>

}
 80011a2:	bf00      	nop
 80011a4:	3728      	adds	r7, #40	; 0x28
 80011a6:	46bd      	mov	sp, r7
 80011a8:	bd80      	pop	{r7, pc}
 80011aa:	bf00      	nop
 80011ac:	40021000 	.word	0x40021000
 80011b0:	48000400 	.word	0x48000400
 80011b4:	48000800 	.word	0x48000800

080011b8 <lcd_cmd>:
#define CMD(x)					((x) | 0x100)

static uint16_t frame_buffer[LCD_WIDTH * LCD_HEIGHT];

static void lcd_cmd(uint8_t cmd)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b082      	sub	sp, #8
 80011bc:	af00      	add	r7, sp, #0
 80011be:	4603      	mov	r3, r0
 80011c0:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(LCD_DC_GPIO_Port, LCD_DC_Pin, GPIO_PIN_RESET);
 80011c2:	2200      	movs	r2, #0
 80011c4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80011c8:	480c      	ldr	r0, [pc, #48]	; (80011fc <lcd_cmd+0x44>)
 80011ca:	f002 fa29 	bl	8003620 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET);
 80011ce:	2200      	movs	r2, #0
 80011d0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80011d4:	4809      	ldr	r0, [pc, #36]	; (80011fc <lcd_cmd+0x44>)
 80011d6:	f002 fa23 	bl	8003620 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2, &cmd, 1, HAL_MAX_DELAY);
 80011da:	1df9      	adds	r1, r7, #7
 80011dc:	f04f 33ff 	mov.w	r3, #4294967295
 80011e0:	2201      	movs	r2, #1
 80011e2:	4807      	ldr	r0, [pc, #28]	; (8001200 <lcd_cmd+0x48>)
 80011e4:	f003 fdf7 	bl	8004dd6 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_SET);
 80011e8:	2201      	movs	r2, #1
 80011ea:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80011ee:	4803      	ldr	r0, [pc, #12]	; (80011fc <lcd_cmd+0x44>)
 80011f0:	f002 fa16 	bl	8003620 <HAL_GPIO_WritePin>
}
 80011f4:	bf00      	nop
 80011f6:	3708      	adds	r7, #8
 80011f8:	46bd      	mov	sp, r7
 80011fa:	bd80      	pop	{r7, pc}
 80011fc:	48000400 	.word	0x48000400
 8001200:	2000a220 	.word	0x2000a220

08001204 <lcd_data>:

static void lcd_data(uint8_t data){
 8001204:	b580      	push	{r7, lr}
 8001206:	b082      	sub	sp, #8
 8001208:	af00      	add	r7, sp, #0
 800120a:	4603      	mov	r3, r0
 800120c:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(LCD_DC_GPIO_Port, LCD_DC_Pin, GPIO_PIN_SET);
 800120e:	2201      	movs	r2, #1
 8001210:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001214:	480c      	ldr	r0, [pc, #48]	; (8001248 <lcd_data+0x44>)
 8001216:	f002 fa03 	bl	8003620 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET);
 800121a:	2200      	movs	r2, #0
 800121c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001220:	4809      	ldr	r0, [pc, #36]	; (8001248 <lcd_data+0x44>)
 8001222:	f002 f9fd 	bl	8003620 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2, &data, 1, HAL_MAX_DELAY);
 8001226:	1df9      	adds	r1, r7, #7
 8001228:	f04f 33ff 	mov.w	r3, #4294967295
 800122c:	2201      	movs	r2, #1
 800122e:	4807      	ldr	r0, [pc, #28]	; (800124c <lcd_data+0x48>)
 8001230:	f003 fdd1 	bl	8004dd6 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_SET);
 8001234:	2201      	movs	r2, #1
 8001236:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800123a:	4803      	ldr	r0, [pc, #12]	; (8001248 <lcd_data+0x44>)
 800123c:	f002 f9f0 	bl	8003620 <HAL_GPIO_WritePin>
}
 8001240:	bf00      	nop
 8001242:	3708      	adds	r7, #8
 8001244:	46bd      	mov	sp, r7
 8001246:	bd80      	pop	{r7, pc}
 8001248:	48000400 	.word	0x48000400
 800124c:	2000a220 	.word	0x2000a220

08001250 <lcd_send>:

static void lcd_send(uint16_t value)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	b082      	sub	sp, #8
 8001254:	af00      	add	r7, sp, #0
 8001256:	4603      	mov	r3, r0
 8001258:	80fb      	strh	r3, [r7, #6]
	if (value & 0x100) {
 800125a:	88fb      	ldrh	r3, [r7, #6]
 800125c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001260:	2b00      	cmp	r3, #0
 8001262:	d005      	beq.n	8001270 <lcd_send+0x20>
		lcd_cmd(value);
 8001264:	88fb      	ldrh	r3, [r7, #6]
 8001266:	b2db      	uxtb	r3, r3
 8001268:	4618      	mov	r0, r3
 800126a:	f7ff ffa5 	bl	80011b8 <lcd_cmd>
	} else {
		lcd_data(value);
	}
}
 800126e:	e004      	b.n	800127a <lcd_send+0x2a>
		lcd_data(value);
 8001270:	88fb      	ldrh	r3, [r7, #6]
 8001272:	b2db      	uxtb	r3, r3
 8001274:	4618      	mov	r0, r3
 8001276:	f7ff ffc5 	bl	8001204 <lcd_data>
}
 800127a:	bf00      	nop
 800127c:	3708      	adds	r7, #8
 800127e:	46bd      	mov	sp, r7
 8001280:	bd80      	pop	{r7, pc}

08001282 <lcd_data16>:
  CMD(ST7735S_COLMOD), 0x05,
  CMD(ST7735S_MADCTL), 0xa0,
};

static void lcd_data16(uint16_t value)
{
 8001282:	b580      	push	{r7, lr}
 8001284:	b082      	sub	sp, #8
 8001286:	af00      	add	r7, sp, #0
 8001288:	4603      	mov	r3, r0
 800128a:	80fb      	strh	r3, [r7, #6]
	lcd_data(value >> 8);
 800128c:	88fb      	ldrh	r3, [r7, #6]
 800128e:	0a1b      	lsrs	r3, r3, #8
 8001290:	b29b      	uxth	r3, r3
 8001292:	b2db      	uxtb	r3, r3
 8001294:	4618      	mov	r0, r3
 8001296:	f7ff ffb5 	bl	8001204 <lcd_data>
	lcd_data(value);
 800129a:	88fb      	ldrh	r3, [r7, #6]
 800129c:	b2db      	uxtb	r3, r3
 800129e:	4618      	mov	r0, r3
 80012a0:	f7ff ffb0 	bl	8001204 <lcd_data>
}
 80012a4:	bf00      	nop
 80012a6:	3708      	adds	r7, #8
 80012a8:	46bd      	mov	sp, r7
 80012aa:	bd80      	pop	{r7, pc}

080012ac <lcd_set_window>:

static void lcd_set_window(int x, int y, int width, int height)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b084      	sub	sp, #16
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	60f8      	str	r0, [r7, #12]
 80012b4:	60b9      	str	r1, [r7, #8]
 80012b6:	607a      	str	r2, [r7, #4]
 80012b8:	603b      	str	r3, [r7, #0]
	lcd_cmd(ST7735S_CASET);
 80012ba:	202a      	movs	r0, #42	; 0x2a
 80012bc:	f7ff ff7c 	bl	80011b8 <lcd_cmd>
	lcd_data16(LCD_OFFSET_X + x);
 80012c0:	68fb      	ldr	r3, [r7, #12]
 80012c2:	b29b      	uxth	r3, r3
 80012c4:	3301      	adds	r3, #1
 80012c6:	b29b      	uxth	r3, r3
 80012c8:	4618      	mov	r0, r3
 80012ca:	f7ff ffda 	bl	8001282 <lcd_data16>
	lcd_data16(LCD_OFFSET_X + x + width - 1);
 80012ce:	68fb      	ldr	r3, [r7, #12]
 80012d0:	b29a      	uxth	r2, r3
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	b29b      	uxth	r3, r3
 80012d6:	4413      	add	r3, r2
 80012d8:	b29b      	uxth	r3, r3
 80012da:	4618      	mov	r0, r3
 80012dc:	f7ff ffd1 	bl	8001282 <lcd_data16>

	lcd_cmd(ST7735S_RASET);
 80012e0:	202b      	movs	r0, #43	; 0x2b
 80012e2:	f7ff ff69 	bl	80011b8 <lcd_cmd>
	lcd_data16(LCD_OFFSET_Y + y);
 80012e6:	68bb      	ldr	r3, [r7, #8]
 80012e8:	b29b      	uxth	r3, r3
 80012ea:	3302      	adds	r3, #2
 80012ec:	b29b      	uxth	r3, r3
 80012ee:	4618      	mov	r0, r3
 80012f0:	f7ff ffc7 	bl	8001282 <lcd_data16>
	lcd_data16(LCD_OFFSET_Y + y + height - 1);
 80012f4:	68bb      	ldr	r3, [r7, #8]
 80012f6:	b29a      	uxth	r2, r3
 80012f8:	683b      	ldr	r3, [r7, #0]
 80012fa:	b29b      	uxth	r3, r3
 80012fc:	4413      	add	r3, r2
 80012fe:	b29b      	uxth	r3, r3
 8001300:	3301      	adds	r3, #1
 8001302:	b29b      	uxth	r3, r3
 8001304:	4618      	mov	r0, r3
 8001306:	f7ff ffbc 	bl	8001282 <lcd_data16>
}
 800130a:	bf00      	nop
 800130c:	3710      	adds	r7, #16
 800130e:	46bd      	mov	sp, r7
 8001310:	bd80      	pop	{r7, pc}
	...

08001314 <lcd_init>:

void lcd_init(void)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	b082      	sub	sp, #8
 8001318:	af00      	add	r7, sp, #0
	int i;
	HAL_GPIO_WritePin(LCD_RST_GPIO_Port, LCD_RST_Pin, GPIO_PIN_RESET);
 800131a:	2200      	movs	r2, #0
 800131c:	2104      	movs	r1, #4
 800131e:	4817      	ldr	r0, [pc, #92]	; (800137c <lcd_init+0x68>)
 8001320:	f002 f97e 	bl	8003620 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8001324:	2064      	movs	r0, #100	; 0x64
 8001326:	f001 fb5b 	bl	80029e0 <HAL_Delay>
	HAL_GPIO_WritePin(LCD_RST_GPIO_Port, LCD_RST_Pin, GPIO_PIN_SET);
 800132a:	2201      	movs	r2, #1
 800132c:	2104      	movs	r1, #4
 800132e:	4813      	ldr	r0, [pc, #76]	; (800137c <lcd_init+0x68>)
 8001330:	f002 f976 	bl	8003620 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8001334:	2064      	movs	r0, #100	; 0x64
 8001336:	f001 fb53 	bl	80029e0 <HAL_Delay>

	for (i = 0; i < sizeof(init_table) / sizeof(uint16_t); i++) {
 800133a:	2300      	movs	r3, #0
 800133c:	607b      	str	r3, [r7, #4]
 800133e:	e009      	b.n	8001354 <lcd_init+0x40>
		lcd_send(init_table[i]);
 8001340:	4a0f      	ldr	r2, [pc, #60]	; (8001380 <lcd_init+0x6c>)
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001348:	4618      	mov	r0, r3
 800134a:	f7ff ff81 	bl	8001250 <lcd_send>
	for (i = 0; i < sizeof(init_table) / sizeof(uint16_t); i++) {
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	3301      	adds	r3, #1
 8001352:	607b      	str	r3, [r7, #4]
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	2b4b      	cmp	r3, #75	; 0x4b
 8001358:	d9f2      	bls.n	8001340 <lcd_init+0x2c>
	}

	HAL_Delay(200);
 800135a:	20c8      	movs	r0, #200	; 0xc8
 800135c:	f001 fb40 	bl	80029e0 <HAL_Delay>

	lcd_cmd(ST7735S_SLPOUT);
 8001360:	2011      	movs	r0, #17
 8001362:	f7ff ff29 	bl	80011b8 <lcd_cmd>
	HAL_Delay(120);
 8001366:	2078      	movs	r0, #120	; 0x78
 8001368:	f001 fb3a 	bl	80029e0 <HAL_Delay>

	lcd_cmd(ST7735S_DISPON);
 800136c:	2029      	movs	r0, #41	; 0x29
 800136e:	f7ff ff23 	bl	80011b8 <lcd_cmd>
}
 8001372:	bf00      	nop
 8001374:	3708      	adds	r7, #8
 8001376:	46bd      	mov	sp, r7
 8001378:	bd80      	pop	{r7, pc}
 800137a:	bf00      	nop
 800137c:	48000400 	.word	0x48000400
 8001380:	0800ced8 	.word	0x0800ced8

08001384 <lcd_put_pixel>:
		lcd_data16(color);
}
*/

void lcd_put_pixel(int x, int y, uint16_t color)
{
 8001384:	b480      	push	{r7}
 8001386:	b085      	sub	sp, #20
 8001388:	af00      	add	r7, sp, #0
 800138a:	60f8      	str	r0, [r7, #12]
 800138c:	60b9      	str	r1, [r7, #8]
 800138e:	4613      	mov	r3, r2
 8001390:	80fb      	strh	r3, [r7, #6]
	frame_buffer[x + y * LCD_WIDTH] = color;
 8001392:	68ba      	ldr	r2, [r7, #8]
 8001394:	4613      	mov	r3, r2
 8001396:	009b      	lsls	r3, r3, #2
 8001398:	4413      	add	r3, r2
 800139a:	015b      	lsls	r3, r3, #5
 800139c:	461a      	mov	r2, r3
 800139e:	68fb      	ldr	r3, [r7, #12]
 80013a0:	4413      	add	r3, r2
 80013a2:	4905      	ldr	r1, [pc, #20]	; (80013b8 <lcd_put_pixel+0x34>)
 80013a4:	88fa      	ldrh	r2, [r7, #6]
 80013a6:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
}
 80013aa:	bf00      	nop
 80013ac:	3714      	adds	r7, #20
 80013ae:	46bd      	mov	sp, r7
 80013b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b4:	4770      	bx	lr
 80013b6:	bf00      	nop
 80013b8:	20000210 	.word	0x20000210

080013bc <lcd_copy>:

void lcd_copy(void)
{
 80013bc:	b580      	push	{r7, lr}
 80013be:	af00      	add	r7, sp, #0
	lcd_set_window(0, 0, LCD_WIDTH, LCD_HEIGHT);
 80013c0:	2380      	movs	r3, #128	; 0x80
 80013c2:	22a0      	movs	r2, #160	; 0xa0
 80013c4:	2100      	movs	r1, #0
 80013c6:	2000      	movs	r0, #0
 80013c8:	f7ff ff70 	bl	80012ac <lcd_set_window>
	lcd_cmd(ST7735S_RAMWR);
 80013cc:	202c      	movs	r0, #44	; 0x2c
 80013ce:	f7ff fef3 	bl	80011b8 <lcd_cmd>
	HAL_GPIO_WritePin(LCD_DC_GPIO_Port, LCD_DC_Pin, GPIO_PIN_SET);
 80013d2:	2201      	movs	r2, #1
 80013d4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80013d8:	4808      	ldr	r0, [pc, #32]	; (80013fc <lcd_copy+0x40>)
 80013da:	f002 f921 	bl	8003620 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET);
 80013de:	2200      	movs	r2, #0
 80013e0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80013e4:	4805      	ldr	r0, [pc, #20]	; (80013fc <lcd_copy+0x40>)
 80013e6:	f002 f91b 	bl	8003620 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit_DMA(&hspi2, (uint8_t*)frame_buffer, sizeof(frame_buffer));
 80013ea:	f44f 4220 	mov.w	r2, #40960	; 0xa000
 80013ee:	4904      	ldr	r1, [pc, #16]	; (8001400 <lcd_copy+0x44>)
 80013f0:	4804      	ldr	r0, [pc, #16]	; (8001404 <lcd_copy+0x48>)
 80013f2:	f003 fe65 	bl	80050c0 <HAL_SPI_Transmit_DMA>
}
 80013f6:	bf00      	nop
 80013f8:	bd80      	pop	{r7, pc}
 80013fa:	bf00      	nop
 80013fc:	48000400 	.word	0x48000400
 8001400:	20000210 	.word	0x20000210
 8001404:	2000a220 	.word	0x2000a220

08001408 <__io_putchar>:
volatile float distance = 0.0;
volatile float prev_distance = 0.0;

// function for sending text using UART (i.e to PC)
int __io_putchar(int ch)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	b082      	sub	sp, #8
 800140c:	af00      	add	r7, sp, #0
 800140e:	6078      	str	r0, [r7, #4]
	if (ch == '\n')
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	2b0a      	cmp	r3, #10
 8001414:	d102      	bne.n	800141c <__io_putchar+0x14>
		__io_putchar('\r');
 8001416:	200d      	movs	r0, #13
 8001418:	f7ff fff6 	bl	8001408 <__io_putchar>

	HAL_UART_Transmit(&huart2, (uint8_t*)&ch, 1, HAL_MAX_DELAY);
 800141c:	1d39      	adds	r1, r7, #4
 800141e:	f04f 33ff 	mov.w	r3, #4294967295
 8001422:	2201      	movs	r2, #1
 8001424:	4803      	ldr	r0, [pc, #12]	; (8001434 <__io_putchar+0x2c>)
 8001426:	f006 fa59 	bl	80078dc <HAL_UART_Transmit>
	return 1;
 800142a:	2301      	movs	r3, #1
}
 800142c:	4618      	mov	r0, r3
 800142e:	3708      	adds	r7, #8
 8001430:	46bd      	mov	sp, r7
 8001432:	bd80      	pop	{r7, pc}
 8001434:	2000a494 	.word	0x2000a494

08001438 <calc_sound_speed>:

// speed of sound calculation based on air temperature
static float calc_sound_speed(float temp_ds1)
{
 8001438:	b480      	push	{r7}
 800143a:	b083      	sub	sp, #12
 800143c:	af00      	add	r7, sp, #0
 800143e:	ed87 0a01 	vstr	s0, [r7, #4]
	return 331.8f + 0.6f * temp_ds1;
 8001442:	edd7 7a01 	vldr	s15, [r7, #4]
 8001446:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8001464 <calc_sound_speed+0x2c>
 800144a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800144e:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8001468 <calc_sound_speed+0x30>
 8001452:	ee77 7a87 	vadd.f32	s15, s15, s14
}
 8001456:	eeb0 0a67 	vmov.f32	s0, s15
 800145a:	370c      	adds	r7, #12
 800145c:	46bd      	mov	sp, r7
 800145e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001462:	4770      	bx	lr
 8001464:	3f19999a 	.word	0x3f19999a
 8001468:	43a5e666 	.word	0x43a5e666

0800146c <howManyDigits>:

// function to check how many digits value has (used in displaying distance on LCD)
int howManyDigits(double value)
{
 800146c:	b5b0      	push	{r4, r5, r7, lr}
 800146e:	b084      	sub	sp, #16
 8001470:	af00      	add	r7, sp, #0
 8001472:	ed87 0b00 	vstr	d0, [r7]
	// if value == 0, then 1 digit
	if (!value)
 8001476:	f04f 0200 	mov.w	r2, #0
 800147a:	f04f 0300 	mov.w	r3, #0
 800147e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001482:	f7ff fb21 	bl	8000ac8 <__aeabi_dcmpeq>
 8001486:	4603      	mov	r3, r0
 8001488:	2b00      	cmp	r3, #0
 800148a:	d001      	beq.n	8001490 <howManyDigits+0x24>
		return 1;
 800148c:	2301      	movs	r3, #1
 800148e:	e011      	b.n	80014b4 <howManyDigits+0x48>

	int digits = (int)log10(fabs(value)) + 1;
 8001490:	683c      	ldr	r4, [r7, #0]
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 8001498:	ec45 4b10 	vmov	d0, r4, r5
 800149c:	f00b f99c 	bl	800c7d8 <log10>
 80014a0:	ec53 2b10 	vmov	r2, r3, d0
 80014a4:	4610      	mov	r0, r2
 80014a6:	4619      	mov	r1, r3
 80014a8:	f7ff fb56 	bl	8000b58 <__aeabi_d2iz>
 80014ac:	4603      	mov	r3, r0
 80014ae:	3301      	adds	r3, #1
 80014b0:	60fb      	str	r3, [r7, #12]
	return digits;
 80014b2:	68fb      	ldr	r3, [r7, #12]
}
 80014b4:	4618      	mov	r0, r3
 80014b6:	3710      	adds	r7, #16
 80014b8:	46bd      	mov	sp, r7
 80014ba:	bdb0      	pop	{r4, r5, r7, pc}

080014bc <HAL_TIM_PeriodElapsedCallback>:

// interruptions from timers
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80014bc:	b590      	push	{r4, r7, lr}
 80014be:	ed2d 8b02 	vpush	{d8}
 80014c2:	b0c9      	sub	sp, #292	; 0x124
 80014c4:	af02      	add	r7, sp, #8
 80014c6:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80014ca:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80014ce:	6018      	str	r0, [r3, #0]
	if (htim == &htim7) { //Timer nr 7 is used for refreshing screen and diodes
 80014d0:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80014d4:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	4aaa      	ldr	r2, [pc, #680]	; (8001784 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 80014dc:	4293      	cmp	r3, r2
 80014de:	d104      	bne.n	80014ea <HAL_TIM_PeriodElapsedCallback+0x2e>
		lcd_copy(); // update LCD (send buffer from i.e hagl_put_text)
 80014e0:	f7ff ff6c 	bl	80013bc <lcd_copy>
		ws2812b_update(); // update WS2812B diodes (send buffer i.e ws2812b_set_color_all)
 80014e4:	f001 f976 	bl	80027d4 <ws2812b_update>
		ws2812b_set_color_all(255-roundf(distance_led/200*255), roundf(distance_led/200*255), 0);

		hagl_put_text(buffer_distance, 10, 60, YELLOW, font6x9); // prepare buffer for LCD
		prev_distance = distance;
	}
}
 80014e8:	e145      	b.n	8001776 <HAL_TIM_PeriodElapsedCallback+0x2ba>
	} else if (htim == &htim16) { // Timer nr 16 is used for temperature measurement and preparing buffer for LCD
 80014ea:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80014ee:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	4aa4      	ldr	r2, [pc, #656]	; (8001788 <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 80014f6:	4293      	cmp	r3, r2
 80014f8:	d17a      	bne.n	80015f0 <HAL_TIM_PeriodElapsedCallback+0x134>
		if (temp_measure_pending) {
 80014fa:	4ba4      	ldr	r3, [pc, #656]	; (800178c <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 80014fc:	781b      	ldrb	r3, [r3, #0]
 80014fe:	b2db      	uxtb	r3, r3
 8001500:	2b00      	cmp	r3, #0
 8001502:	d009      	beq.n	8001518 <HAL_TIM_PeriodElapsedCallback+0x5c>
			ds18b20_start_measure(ds1); // start measurements for both ds18b20
 8001504:	48a2      	ldr	r0, [pc, #648]	; (8001790 <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 8001506:	f7ff fd75 	bl	8000ff4 <ds18b20_start_measure>
			ds18b20_start_measure(ds2);
 800150a:	48a2      	ldr	r0, [pc, #648]	; (8001794 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 800150c:	f7ff fd72 	bl	8000ff4 <ds18b20_start_measure>
			temp_measure_pending = false; // measure started flag
 8001510:	4b9e      	ldr	r3, [pc, #632]	; (800178c <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 8001512:	2200      	movs	r2, #0
 8001514:	701a      	strb	r2, [r3, #0]
}
 8001516:	e12e      	b.n	8001776 <HAL_TIM_PeriodElapsedCallback+0x2ba>
			temp_ds1 = ds18b20_get_temp(ds1);
 8001518:	489d      	ldr	r0, [pc, #628]	; (8001790 <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 800151a:	f7ff fda9 	bl	8001070 <ds18b20_get_temp>
 800151e:	eef0 7a40 	vmov.f32	s15, s0
 8001522:	4b9d      	ldr	r3, [pc, #628]	; (8001798 <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 8001524:	edc3 7a00 	vstr	s15, [r3]
			temp_ds2 = ds18b20_get_temp(ds2);
 8001528:	489a      	ldr	r0, [pc, #616]	; (8001794 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 800152a:	f7ff fda1 	bl	8001070 <ds18b20_get_temp>
 800152e:	eef0 7a40 	vmov.f32	s15, s0
 8001532:	4b9a      	ldr	r3, [pc, #616]	; (800179c <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 8001534:	edc3 7a00 	vstr	s15, [r3]
			swprintf(buffer_ds1, 32, L"Case temp: %.1f*C", temp_ds1);
 8001538:	4b97      	ldr	r3, [pc, #604]	; (8001798 <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	4618      	mov	r0, r3
 800153e:	f7ff f803 	bl	8000548 <__aeabi_f2d>
 8001542:	4602      	mov	r2, r0
 8001544:	460b      	mov	r3, r1
 8001546:	f107 000c 	add.w	r0, r7, #12
 800154a:	e9cd 2300 	strd	r2, r3, [sp]
 800154e:	4a94      	ldr	r2, [pc, #592]	; (80017a0 <HAL_TIM_PeriodElapsedCallback+0x2e4>)
 8001550:	2120      	movs	r1, #32
 8001552:	f008 fb77 	bl	8009c44 <swprintf>
			swprintf(buffer_ds2, 32, L"Sensor temp: %.1f*C", temp_ds2);
 8001556:	4b91      	ldr	r3, [pc, #580]	; (800179c <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	4618      	mov	r0, r3
 800155c:	f7fe fff4 	bl	8000548 <__aeabi_f2d>
 8001560:	4602      	mov	r2, r0
 8001562:	460b      	mov	r3, r1
 8001564:	f107 008c 	add.w	r0, r7, #140	; 0x8c
 8001568:	e9cd 2300 	strd	r2, r3, [sp]
 800156c:	4a8d      	ldr	r2, [pc, #564]	; (80017a4 <HAL_TIM_PeriodElapsedCallback+0x2e8>)
 800156e:	2120      	movs	r1, #32
 8001570:	f008 fb68 	bl	8009c44 <swprintf>
			if (temp_ds1 <= -80.0f) {
 8001574:	4b88      	ldr	r3, [pc, #544]	; (8001798 <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 8001576:	edd3 7a00 	vldr	s15, [r3]
 800157a:	ed9f 7a8b 	vldr	s14, [pc, #556]	; 80017a8 <HAL_TIM_PeriodElapsedCallback+0x2ec>
 800157e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001582:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001586:	d808      	bhi.n	800159a <HAL_TIM_PeriodElapsedCallback+0xde>
				hagl_put_text(L"Sensor (1) error...", 10, 20, RED, font6x9);
 8001588:	4b88      	ldr	r3, [pc, #544]	; (80017ac <HAL_TIM_PeriodElapsedCallback+0x2f0>)
 800158a:	9300      	str	r3, [sp, #0]
 800158c:	23f8      	movs	r3, #248	; 0xf8
 800158e:	2214      	movs	r2, #20
 8001590:	210a      	movs	r1, #10
 8001592:	4887      	ldr	r0, [pc, #540]	; (80017b0 <HAL_TIM_PeriodElapsedCallback+0x2f4>)
 8001594:	f007 fcb4 	bl	8008f00 <hagl_put_text>
 8001598:	e009      	b.n	80015ae <HAL_TIM_PeriodElapsedCallback+0xf2>
				hagl_put_text(buffer_ds1, 10, 20, YELLOW, font6x9);
 800159a:	f107 000c 	add.w	r0, r7, #12
 800159e:	4b83      	ldr	r3, [pc, #524]	; (80017ac <HAL_TIM_PeriodElapsedCallback+0x2f0>)
 80015a0:	9300      	str	r3, [sp, #0]
 80015a2:	f24e 03ff 	movw	r3, #57599	; 0xe0ff
 80015a6:	2214      	movs	r2, #20
 80015a8:	210a      	movs	r1, #10
 80015aa:	f007 fca9 	bl	8008f00 <hagl_put_text>
			if (temp_ds1 <=-80.0f) {
 80015ae:	4b7a      	ldr	r3, [pc, #488]	; (8001798 <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 80015b0:	edd3 7a00 	vldr	s15, [r3]
 80015b4:	ed9f 7a7c 	vldr	s14, [pc, #496]	; 80017a8 <HAL_TIM_PeriodElapsedCallback+0x2ec>
 80015b8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80015bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015c0:	d808      	bhi.n	80015d4 <HAL_TIM_PeriodElapsedCallback+0x118>
				hagl_put_text(L"Sensor (2) error...", 10, 20, RED, font6x9);
 80015c2:	4b7a      	ldr	r3, [pc, #488]	; (80017ac <HAL_TIM_PeriodElapsedCallback+0x2f0>)
 80015c4:	9300      	str	r3, [sp, #0]
 80015c6:	23f8      	movs	r3, #248	; 0xf8
 80015c8:	2214      	movs	r2, #20
 80015ca:	210a      	movs	r1, #10
 80015cc:	4879      	ldr	r0, [pc, #484]	; (80017b4 <HAL_TIM_PeriodElapsedCallback+0x2f8>)
 80015ce:	f007 fc97 	bl	8008f00 <hagl_put_text>
 80015d2:	e009      	b.n	80015e8 <HAL_TIM_PeriodElapsedCallback+0x12c>
				hagl_put_text(buffer_ds2, 10, 40, YELLOW, font6x9);
 80015d4:	f107 008c 	add.w	r0, r7, #140	; 0x8c
 80015d8:	4b74      	ldr	r3, [pc, #464]	; (80017ac <HAL_TIM_PeriodElapsedCallback+0x2f0>)
 80015da:	9300      	str	r3, [sp, #0]
 80015dc:	f24e 03ff 	movw	r3, #57599	; 0xe0ff
 80015e0:	2228      	movs	r2, #40	; 0x28
 80015e2:	210a      	movs	r1, #10
 80015e4:	f007 fc8c 	bl	8008f00 <hagl_put_text>
			temp_measure_pending = true;
 80015e8:	4b68      	ldr	r3, [pc, #416]	; (800178c <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 80015ea:	2201      	movs	r2, #1
 80015ec:	701a      	strb	r2, [r3, #0]
}
 80015ee:	e0c2      	b.n	8001776 <HAL_TIM_PeriodElapsedCallback+0x2ba>
	} else if (htim == &htim2) { // Timer nr 2 is used for measuring distance and preparing buffers for LCD and LED
 80015f0:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80015f4:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	4a6f      	ldr	r2, [pc, #444]	; (80017b8 <HAL_TIM_PeriodElapsedCallback+0x2fc>)
 80015fc:	4293      	cmp	r3, r2
 80015fe:	f040 80ba 	bne.w	8001776 <HAL_TIM_PeriodElapsedCallback+0x2ba>
		uint32_t start = HAL_TIM_ReadCapturedValue(&htim2, TIM_CHANNEL_1);
 8001602:	2100      	movs	r1, #0
 8001604:	486c      	ldr	r0, [pc, #432]	; (80017b8 <HAL_TIM_PeriodElapsedCallback+0x2fc>)
 8001606:	f005 f979 	bl	80068fc <HAL_TIM_ReadCapturedValue>
 800160a:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110
		uint32_t stop = HAL_TIM_ReadCapturedValue(&htim2, TIM_CHANNEL_2);
 800160e:	2104      	movs	r1, #4
 8001610:	4869      	ldr	r0, [pc, #420]	; (80017b8 <HAL_TIM_PeriodElapsedCallback+0x2fc>)
 8001612:	f005 f973 	bl	80068fc <HAL_TIM_ReadCapturedValue>
 8001616:	f8c7 010c 	str.w	r0, [r7, #268]	; 0x10c
		distance = (stop - start) * calc_sound_speed(temp_ds1) / 20000.0f;
 800161a:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 800161e:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8001622:	1ad3      	subs	r3, r2, r3
 8001624:	ee07 3a90 	vmov	s15, r3
 8001628:	eeb8 8a67 	vcvt.f32.u32	s16, s15
 800162c:	4b5a      	ldr	r3, [pc, #360]	; (8001798 <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 800162e:	edd3 7a00 	vldr	s15, [r3]
 8001632:	eeb0 0a67 	vmov.f32	s0, s15
 8001636:	f7ff feff 	bl	8001438 <calc_sound_speed>
 800163a:	eef0 7a40 	vmov.f32	s15, s0
 800163e:	ee28 7a27 	vmul.f32	s14, s16, s15
 8001642:	eddf 6a5e 	vldr	s13, [pc, #376]	; 80017bc <HAL_TIM_PeriodElapsedCallback+0x300>
 8001646:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800164a:	4b5d      	ldr	r3, [pc, #372]	; (80017c0 <HAL_TIM_PeriodElapsedCallback+0x304>)
 800164c:	edc3 7a00 	vstr	s15, [r3]
		swprintf(buffer_distance, 32, L"Distance: %.1f cm", distance);
 8001650:	4b5b      	ldr	r3, [pc, #364]	; (80017c0 <HAL_TIM_PeriodElapsedCallback+0x304>)
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	4618      	mov	r0, r3
 8001656:	f7fe ff77 	bl	8000548 <__aeabi_f2d>
 800165a:	4602      	mov	r2, r0
 800165c:	460b      	mov	r3, r1
 800165e:	f107 008c 	add.w	r0, r7, #140	; 0x8c
 8001662:	e9cd 2300 	strd	r2, r3, [sp]
 8001666:	4a57      	ldr	r2, [pc, #348]	; (80017c4 <HAL_TIM_PeriodElapsedCallback+0x308>)
 8001668:	2120      	movs	r1, #32
 800166a:	f008 faeb 	bl	8009c44 <swprintf>
		if (howManyDigits(distance) != howManyDigits(prev_distance))
 800166e:	4b54      	ldr	r3, [pc, #336]	; (80017c0 <HAL_TIM_PeriodElapsedCallback+0x304>)
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	4618      	mov	r0, r3
 8001674:	f7fe ff68 	bl	8000548 <__aeabi_f2d>
 8001678:	4602      	mov	r2, r0
 800167a:	460b      	mov	r3, r1
 800167c:	ec43 2b10 	vmov	d0, r2, r3
 8001680:	f7ff fef4 	bl	800146c <howManyDigits>
 8001684:	4604      	mov	r4, r0
 8001686:	4b50      	ldr	r3, [pc, #320]	; (80017c8 <HAL_TIM_PeriodElapsedCallback+0x30c>)
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	4618      	mov	r0, r3
 800168c:	f7fe ff5c 	bl	8000548 <__aeabi_f2d>
 8001690:	4602      	mov	r2, r0
 8001692:	460b      	mov	r3, r1
 8001694:	ec43 2b10 	vmov	d0, r2, r3
 8001698:	f7ff fee8 	bl	800146c <howManyDigits>
 800169c:	4603      	mov	r3, r0
 800169e:	429c      	cmp	r4, r3
 80016a0:	d007      	beq.n	80016b2 <HAL_TIM_PeriodElapsedCallback+0x1f6>
			hagl_fill_rectangle(10, 60, 150, 70, BLACK);
 80016a2:	2300      	movs	r3, #0
 80016a4:	9300      	str	r3, [sp, #0]
 80016a6:	2346      	movs	r3, #70	; 0x46
 80016a8:	2296      	movs	r2, #150	; 0x96
 80016aa:	213c      	movs	r1, #60	; 0x3c
 80016ac:	200a      	movs	r0, #10
 80016ae:	f007 fa85 	bl	8008bbc <hagl_fill_rectangle>
		if (distance > 200) {
 80016b2:	4b43      	ldr	r3, [pc, #268]	; (80017c0 <HAL_TIM_PeriodElapsedCallback+0x304>)
 80016b4:	edd3 7a00 	vldr	s15, [r3]
 80016b8:	ed9f 7a44 	vldr	s14, [pc, #272]	; 80017cc <HAL_TIM_PeriodElapsedCallback+0x310>
 80016bc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80016c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016c4:	dd03      	ble.n	80016ce <HAL_TIM_PeriodElapsedCallback+0x212>
			distance_led = 200;
 80016c6:	4b42      	ldr	r3, [pc, #264]	; (80017d0 <HAL_TIM_PeriodElapsedCallback+0x314>)
 80016c8:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80016cc:	e010      	b.n	80016f0 <HAL_TIM_PeriodElapsedCallback+0x234>
		} else if (distance < 0) {
 80016ce:	4b3c      	ldr	r3, [pc, #240]	; (80017c0 <HAL_TIM_PeriodElapsedCallback+0x304>)
 80016d0:	edd3 7a00 	vldr	s15, [r3]
 80016d4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80016d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016dc:	d504      	bpl.n	80016e8 <HAL_TIM_PeriodElapsedCallback+0x22c>
			distance_led = 0;
 80016de:	f04f 0300 	mov.w	r3, #0
 80016e2:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80016e6:	e003      	b.n	80016f0 <HAL_TIM_PeriodElapsedCallback+0x234>
			distance_led = distance;
 80016e8:	4b35      	ldr	r3, [pc, #212]	; (80017c0 <HAL_TIM_PeriodElapsedCallback+0x304>)
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
		ws2812b_set_color_all(255-roundf(distance_led/200*255), roundf(distance_led/200*255), 0);
 80016f0:	ed97 7a45 	vldr	s14, [r7, #276]	; 0x114
 80016f4:	eddf 6a35 	vldr	s13, [pc, #212]	; 80017cc <HAL_TIM_PeriodElapsedCallback+0x310>
 80016f8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80016fc:	ed9f 7a35 	vldr	s14, [pc, #212]	; 80017d4 <HAL_TIM_PeriodElapsedCallback+0x318>
 8001700:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001704:	eeb0 0a67 	vmov.f32	s0, s15
 8001708:	f00b f8ae 	bl	800c868 <roundf>
 800170c:	eef0 7a40 	vmov.f32	s15, s0
 8001710:	ed9f 7a30 	vldr	s14, [pc, #192]	; 80017d4 <HAL_TIM_PeriodElapsedCallback+0x318>
 8001714:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001718:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800171c:	edc7 7a00 	vstr	s15, [r7]
 8001720:	783b      	ldrb	r3, [r7, #0]
 8001722:	b2dc      	uxtb	r4, r3
 8001724:	ed97 7a45 	vldr	s14, [r7, #276]	; 0x114
 8001728:	eddf 6a28 	vldr	s13, [pc, #160]	; 80017cc <HAL_TIM_PeriodElapsedCallback+0x310>
 800172c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001730:	ed9f 7a28 	vldr	s14, [pc, #160]	; 80017d4 <HAL_TIM_PeriodElapsedCallback+0x318>
 8001734:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001738:	eeb0 0a67 	vmov.f32	s0, s15
 800173c:	f00b f894 	bl	800c868 <roundf>
 8001740:	eef0 7a40 	vmov.f32	s15, s0
 8001744:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001748:	edc7 7a00 	vstr	s15, [r7]
 800174c:	783b      	ldrb	r3, [r7, #0]
 800174e:	b2db      	uxtb	r3, r3
 8001750:	2200      	movs	r2, #0
 8001752:	4619      	mov	r1, r3
 8001754:	4620      	mov	r0, r4
 8001756:	f001 f880 	bl	800285a <ws2812b_set_color_all>
		hagl_put_text(buffer_distance, 10, 60, YELLOW, font6x9); // prepare buffer for LCD
 800175a:	f107 008c 	add.w	r0, r7, #140	; 0x8c
 800175e:	4b13      	ldr	r3, [pc, #76]	; (80017ac <HAL_TIM_PeriodElapsedCallback+0x2f0>)
 8001760:	9300      	str	r3, [sp, #0]
 8001762:	f24e 03ff 	movw	r3, #57599	; 0xe0ff
 8001766:	223c      	movs	r2, #60	; 0x3c
 8001768:	210a      	movs	r1, #10
 800176a:	f007 fbc9 	bl	8008f00 <hagl_put_text>
		prev_distance = distance;
 800176e:	4b14      	ldr	r3, [pc, #80]	; (80017c0 <HAL_TIM_PeriodElapsedCallback+0x304>)
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	4a15      	ldr	r2, [pc, #84]	; (80017c8 <HAL_TIM_PeriodElapsedCallback+0x30c>)
 8001774:	6013      	str	r3, [r2, #0]
}
 8001776:	bf00      	nop
 8001778:	f507 778e 	add.w	r7, r7, #284	; 0x11c
 800177c:	46bd      	mov	sp, r7
 800177e:	ecbd 8b02 	vpop	{d8}
 8001782:	bd90      	pop	{r4, r7, pc}
 8001784:	2000a3b4 	.word	0x2000a3b4
 8001788:	2000a400 	.word	0x2000a400
 800178c:	20000000 	.word	0x20000000
 8001790:	0800ff28 	.word	0x0800ff28
 8001794:	0800ff30 	.word	0x0800ff30
 8001798:	2000a210 	.word	0x2000a210
 800179c:	2000a214 	.word	0x2000a214
 80017a0:	0800cd58 	.word	0x0800cd58
 80017a4:	0800cda0 	.word	0x0800cda0
 80017a8:	c2a00000 	.word	0xc2a00000
 80017ac:	0800cf70 	.word	0x0800cf70
 80017b0:	0800cdf0 	.word	0x0800cdf0
 80017b4:	0800ce40 	.word	0x0800ce40
 80017b8:	2000a2d0 	.word	0x2000a2d0
 80017bc:	469c4000 	.word	0x469c4000
 80017c0:	2000a218 	.word	0x2000a218
 80017c4:	0800ce90 	.word	0x0800ce90
 80017c8:	2000a21c 	.word	0x2000a21c
 80017cc:	43480000 	.word	0x43480000
 80017d0:	43480000 	.word	0x43480000
 80017d4:	437f0000 	.word	0x437f0000

080017d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80017dc:	f001 f884 	bl	80028e8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80017e0:	f000 f834 	bl	800184c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80017e4:	f7ff fc6a 	bl	80010bc <MX_GPIO_Init>
  MX_DMA_Init();
 80017e8:	f7ff fbae 	bl	8000f48 <MX_DMA_Init>
  MX_USART2_UART_Init();
 80017ec:	f000 fd98 	bl	8002320 <MX_USART2_UART_Init>
  MX_SPI2_Init();
 80017f0:	f000 f882 	bl	80018f8 <MX_SPI2_Init>
  MX_DAC1_Init();
 80017f4:	f7ff fb56 	bl	8000ea4 <MX_DAC1_Init>
  MX_TIM6_Init();
 80017f8:	f000 fbc4 	bl	8001f84 <MX_TIM6_Init>
  MX_USART3_UART_Init();
 80017fc:	f000 fdc0 	bl	8002380 <MX_USART3_UART_Init>
  MX_TIM7_Init();
 8001800:	f000 fbf6 	bl	8001ff0 <MX_TIM7_Init>
  MX_TIM16_Init();
 8001804:	f000 fc2c 	bl	8002060 <MX_TIM16_Init>
  MX_TIM3_Init();
 8001808:	f000 fb46 	bl	8001e98 <MX_TIM3_Init>
  MX_TIM2_Init();
 800180c:	f000 fa9a 	bl	8001d44 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
	HAL_TIM_Base_Start_IT(&htim2);
 8001810:	480b      	ldr	r0, [pc, #44]	; (8001840 <main+0x68>)
 8001812:	f003 ffa1 	bl	8005758 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim7);
 8001816:	480b      	ldr	r0, [pc, #44]	; (8001844 <main+0x6c>)
 8001818:	f003 ff9e 	bl	8005758 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim16);
 800181c:	480a      	ldr	r0, [pc, #40]	; (8001848 <main+0x70>)
 800181e:	f003 ff9b 	bl	8005758 <HAL_TIM_Base_Start_IT>
	HAL_TIM_IC_Start(&htim2, TIM_CHANNEL_1);
 8001822:	2100      	movs	r1, #0
 8001824:	4806      	ldr	r0, [pc, #24]	; (8001840 <main+0x68>)
 8001826:	f004 fbf1 	bl	800600c <HAL_TIM_IC_Start>
	HAL_TIM_IC_Start(&htim2, TIM_CHANNEL_2);
 800182a:	2104      	movs	r1, #4
 800182c:	4804      	ldr	r0, [pc, #16]	; (8001840 <main+0x68>)
 800182e:	f004 fbed 	bl	800600c <HAL_TIM_IC_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 8001832:	2108      	movs	r1, #8
 8001834:	4802      	ldr	r0, [pc, #8]	; (8001840 <main+0x68>)
 8001836:	f004 f861 	bl	80058fc <HAL_TIM_PWM_Start>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	lcd_init(); // LCD initialization
 800183a:	f7ff fd6b 	bl	8001314 <lcd_init>

	while (1)
 800183e:	e7fe      	b.n	800183e <main+0x66>
 8001840:	2000a2d0 	.word	0x2000a2d0
 8001844:	2000a3b4 	.word	0x2000a3b4
 8001848:	2000a400 	.word	0x2000a400

0800184c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800184c:	b580      	push	{r7, lr}
 800184e:	b096      	sub	sp, #88	; 0x58
 8001850:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001852:	f107 0314 	add.w	r3, r7, #20
 8001856:	2244      	movs	r2, #68	; 0x44
 8001858:	2100      	movs	r1, #0
 800185a:	4618      	mov	r0, r3
 800185c:	f008 fa26 	bl	8009cac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001860:	463b      	mov	r3, r7
 8001862:	2200      	movs	r2, #0
 8001864:	601a      	str	r2, [r3, #0]
 8001866:	605a      	str	r2, [r3, #4]
 8001868:	609a      	str	r2, [r3, #8]
 800186a:	60da      	str	r2, [r3, #12]
 800186c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800186e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001872:	f001 fefb 	bl	800366c <HAL_PWREx_ControlVoltageScaling>
 8001876:	4603      	mov	r3, r0
 8001878:	2b00      	cmp	r3, #0
 800187a:	d001      	beq.n	8001880 <SystemClock_Config+0x34>
  {
    Error_Handler();
 800187c:	f000 f837 	bl	80018ee <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001880:	2302      	movs	r3, #2
 8001882:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001884:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001888:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800188a:	2310      	movs	r3, #16
 800188c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800188e:	2302      	movs	r3, #2
 8001890:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001892:	2302      	movs	r3, #2
 8001894:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001896:	2301      	movs	r3, #1
 8001898:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 800189a:	230a      	movs	r3, #10
 800189c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800189e:	2307      	movs	r3, #7
 80018a0:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80018a2:	2302      	movs	r3, #2
 80018a4:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80018a6:	2302      	movs	r3, #2
 80018a8:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80018aa:	f107 0314 	add.w	r3, r7, #20
 80018ae:	4618      	mov	r0, r3
 80018b0:	f001 ff32 	bl	8003718 <HAL_RCC_OscConfig>
 80018b4:	4603      	mov	r3, r0
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d001      	beq.n	80018be <SystemClock_Config+0x72>
  {
    Error_Handler();
 80018ba:	f000 f818 	bl	80018ee <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80018be:	230f      	movs	r3, #15
 80018c0:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80018c2:	2303      	movs	r3, #3
 80018c4:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80018c6:	2300      	movs	r3, #0
 80018c8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80018ca:	2300      	movs	r3, #0
 80018cc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80018ce:	2300      	movs	r3, #0
 80018d0:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80018d2:	463b      	mov	r3, r7
 80018d4:	2104      	movs	r1, #4
 80018d6:	4618      	mov	r0, r3
 80018d8:	f002 fafa 	bl	8003ed0 <HAL_RCC_ClockConfig>
 80018dc:	4603      	mov	r3, r0
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d001      	beq.n	80018e6 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80018e2:	f000 f804 	bl	80018ee <Error_Handler>
  }
}
 80018e6:	bf00      	nop
 80018e8:	3758      	adds	r7, #88	; 0x58
 80018ea:	46bd      	mov	sp, r7
 80018ec:	bd80      	pop	{r7, pc}

080018ee <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80018ee:	b480      	push	{r7}
 80018f0:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80018f2:	b672      	cpsid	i
}
 80018f4:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 80018f6:	e7fe      	b.n	80018f6 <Error_Handler+0x8>

080018f8 <MX_SPI2_Init>:
SPI_HandleTypeDef hspi2;
DMA_HandleTypeDef hdma_spi2_tx;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 80018fc:	4b1b      	ldr	r3, [pc, #108]	; (800196c <MX_SPI2_Init+0x74>)
 80018fe:	4a1c      	ldr	r2, [pc, #112]	; (8001970 <MX_SPI2_Init+0x78>)
 8001900:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001902:	4b1a      	ldr	r3, [pc, #104]	; (800196c <MX_SPI2_Init+0x74>)
 8001904:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001908:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800190a:	4b18      	ldr	r3, [pc, #96]	; (800196c <MX_SPI2_Init+0x74>)
 800190c:	2200      	movs	r2, #0
 800190e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001910:	4b16      	ldr	r3, [pc, #88]	; (800196c <MX_SPI2_Init+0x74>)
 8001912:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001916:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001918:	4b14      	ldr	r3, [pc, #80]	; (800196c <MX_SPI2_Init+0x74>)
 800191a:	2200      	movs	r2, #0
 800191c:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800191e:	4b13      	ldr	r3, [pc, #76]	; (800196c <MX_SPI2_Init+0x74>)
 8001920:	2200      	movs	r2, #0
 8001922:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001924:	4b11      	ldr	r3, [pc, #68]	; (800196c <MX_SPI2_Init+0x74>)
 8001926:	f44f 7200 	mov.w	r2, #512	; 0x200
 800192a:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800192c:	4b0f      	ldr	r3, [pc, #60]	; (800196c <MX_SPI2_Init+0x74>)
 800192e:	2200      	movs	r2, #0
 8001930:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001932:	4b0e      	ldr	r3, [pc, #56]	; (800196c <MX_SPI2_Init+0x74>)
 8001934:	2200      	movs	r2, #0
 8001936:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001938:	4b0c      	ldr	r3, [pc, #48]	; (800196c <MX_SPI2_Init+0x74>)
 800193a:	2200      	movs	r2, #0
 800193c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800193e:	4b0b      	ldr	r3, [pc, #44]	; (800196c <MX_SPI2_Init+0x74>)
 8001940:	2200      	movs	r2, #0
 8001942:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8001944:	4b09      	ldr	r3, [pc, #36]	; (800196c <MX_SPI2_Init+0x74>)
 8001946:	2207      	movs	r2, #7
 8001948:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800194a:	4b08      	ldr	r3, [pc, #32]	; (800196c <MX_SPI2_Init+0x74>)
 800194c:	2200      	movs	r2, #0
 800194e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001950:	4b06      	ldr	r3, [pc, #24]	; (800196c <MX_SPI2_Init+0x74>)
 8001952:	2208      	movs	r2, #8
 8001954:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001956:	4805      	ldr	r0, [pc, #20]	; (800196c <MX_SPI2_Init+0x74>)
 8001958:	f003 f99a 	bl	8004c90 <HAL_SPI_Init>
 800195c:	4603      	mov	r3, r0
 800195e:	2b00      	cmp	r3, #0
 8001960:	d001      	beq.n	8001966 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8001962:	f7ff ffc4 	bl	80018ee <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001966:	bf00      	nop
 8001968:	bd80      	pop	{r7, pc}
 800196a:	bf00      	nop
 800196c:	2000a220 	.word	0x2000a220
 8001970:	40003800 	.word	0x40003800

08001974 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001974:	b580      	push	{r7, lr}
 8001976:	b08a      	sub	sp, #40	; 0x28
 8001978:	af00      	add	r7, sp, #0
 800197a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800197c:	f107 0314 	add.w	r3, r7, #20
 8001980:	2200      	movs	r2, #0
 8001982:	601a      	str	r2, [r3, #0]
 8001984:	605a      	str	r2, [r3, #4]
 8001986:	609a      	str	r2, [r3, #8]
 8001988:	60da      	str	r2, [r3, #12]
 800198a:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	4a3a      	ldr	r2, [pc, #232]	; (8001a7c <HAL_SPI_MspInit+0x108>)
 8001992:	4293      	cmp	r3, r2
 8001994:	d16d      	bne.n	8001a72 <HAL_SPI_MspInit+0xfe>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001996:	4b3a      	ldr	r3, [pc, #232]	; (8001a80 <HAL_SPI_MspInit+0x10c>)
 8001998:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800199a:	4a39      	ldr	r2, [pc, #228]	; (8001a80 <HAL_SPI_MspInit+0x10c>)
 800199c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80019a0:	6593      	str	r3, [r2, #88]	; 0x58
 80019a2:	4b37      	ldr	r3, [pc, #220]	; (8001a80 <HAL_SPI_MspInit+0x10c>)
 80019a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019a6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80019aa:	613b      	str	r3, [r7, #16]
 80019ac:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80019ae:	4b34      	ldr	r3, [pc, #208]	; (8001a80 <HAL_SPI_MspInit+0x10c>)
 80019b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019b2:	4a33      	ldr	r2, [pc, #204]	; (8001a80 <HAL_SPI_MspInit+0x10c>)
 80019b4:	f043 0304 	orr.w	r3, r3, #4
 80019b8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80019ba:	4b31      	ldr	r3, [pc, #196]	; (8001a80 <HAL_SPI_MspInit+0x10c>)
 80019bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019be:	f003 0304 	and.w	r3, r3, #4
 80019c2:	60fb      	str	r3, [r7, #12]
 80019c4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80019c6:	4b2e      	ldr	r3, [pc, #184]	; (8001a80 <HAL_SPI_MspInit+0x10c>)
 80019c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019ca:	4a2d      	ldr	r2, [pc, #180]	; (8001a80 <HAL_SPI_MspInit+0x10c>)
 80019cc:	f043 0302 	orr.w	r3, r3, #2
 80019d0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80019d2:	4b2b      	ldr	r3, [pc, #172]	; (8001a80 <HAL_SPI_MspInit+0x10c>)
 80019d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019d6:	f003 0302 	and.w	r3, r3, #2
 80019da:	60bb      	str	r3, [r7, #8]
 80019dc:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PC3     ------> SPI2_MOSI
    PB13     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80019de:	2308      	movs	r3, #8
 80019e0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019e2:	2302      	movs	r3, #2
 80019e4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019e6:	2300      	movs	r3, #0
 80019e8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019ea:	2303      	movs	r3, #3
 80019ec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80019ee:	2305      	movs	r3, #5
 80019f0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80019f2:	f107 0314 	add.w	r3, r7, #20
 80019f6:	4619      	mov	r1, r3
 80019f8:	4822      	ldr	r0, [pc, #136]	; (8001a84 <HAL_SPI_MspInit+0x110>)
 80019fa:	f001 fc67 	bl	80032cc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 80019fe:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001a02:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a04:	2302      	movs	r3, #2
 8001a06:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a08:	2300      	movs	r3, #0
 8001a0a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a0c:	2303      	movs	r3, #3
 8001a0e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001a10:	2305      	movs	r3, #5
 8001a12:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a14:	f107 0314 	add.w	r3, r7, #20
 8001a18:	4619      	mov	r1, r3
 8001a1a:	481b      	ldr	r0, [pc, #108]	; (8001a88 <HAL_SPI_MspInit+0x114>)
 8001a1c:	f001 fc56 	bl	80032cc <HAL_GPIO_Init>

    /* SPI2 DMA Init */
    /* SPI2_TX Init */
    hdma_spi2_tx.Instance = DMA1_Channel5;
 8001a20:	4b1a      	ldr	r3, [pc, #104]	; (8001a8c <HAL_SPI_MspInit+0x118>)
 8001a22:	4a1b      	ldr	r2, [pc, #108]	; (8001a90 <HAL_SPI_MspInit+0x11c>)
 8001a24:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Request = DMA_REQUEST_1;
 8001a26:	4b19      	ldr	r3, [pc, #100]	; (8001a8c <HAL_SPI_MspInit+0x118>)
 8001a28:	2201      	movs	r2, #1
 8001a2a:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001a2c:	4b17      	ldr	r3, [pc, #92]	; (8001a8c <HAL_SPI_MspInit+0x118>)
 8001a2e:	2210      	movs	r2, #16
 8001a30:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001a32:	4b16      	ldr	r3, [pc, #88]	; (8001a8c <HAL_SPI_MspInit+0x118>)
 8001a34:	2200      	movs	r2, #0
 8001a36:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001a38:	4b14      	ldr	r3, [pc, #80]	; (8001a8c <HAL_SPI_MspInit+0x118>)
 8001a3a:	2280      	movs	r2, #128	; 0x80
 8001a3c:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001a3e:	4b13      	ldr	r3, [pc, #76]	; (8001a8c <HAL_SPI_MspInit+0x118>)
 8001a40:	2200      	movs	r2, #0
 8001a42:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001a44:	4b11      	ldr	r3, [pc, #68]	; (8001a8c <HAL_SPI_MspInit+0x118>)
 8001a46:	2200      	movs	r2, #0
 8001a48:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 8001a4a:	4b10      	ldr	r3, [pc, #64]	; (8001a8c <HAL_SPI_MspInit+0x118>)
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001a50:	4b0e      	ldr	r3, [pc, #56]	; (8001a8c <HAL_SPI_MspInit+0x118>)
 8001a52:	2200      	movs	r2, #0
 8001a54:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 8001a56:	480d      	ldr	r0, [pc, #52]	; (8001a8c <HAL_SPI_MspInit+0x118>)
 8001a58:	f001 fa40 	bl	8002edc <HAL_DMA_Init>
 8001a5c:	4603      	mov	r3, r0
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d001      	beq.n	8001a66 <HAL_SPI_MspInit+0xf2>
    {
      Error_Handler();
 8001a62:	f7ff ff44 	bl	80018ee <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi2_tx);
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	4a08      	ldr	r2, [pc, #32]	; (8001a8c <HAL_SPI_MspInit+0x118>)
 8001a6a:	655a      	str	r2, [r3, #84]	; 0x54
 8001a6c:	4a07      	ldr	r2, [pc, #28]	; (8001a8c <HAL_SPI_MspInit+0x118>)
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	6293      	str	r3, [r2, #40]	; 0x28

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8001a72:	bf00      	nop
 8001a74:	3728      	adds	r7, #40	; 0x28
 8001a76:	46bd      	mov	sp, r7
 8001a78:	bd80      	pop	{r7, pc}
 8001a7a:	bf00      	nop
 8001a7c:	40003800 	.word	0x40003800
 8001a80:	40021000 	.word	0x40021000
 8001a84:	48000800 	.word	0x48000800
 8001a88:	48000400 	.word	0x48000400
 8001a8c:	2000a284 	.word	0x2000a284
 8001a90:	40020058 	.word	0x40020058

08001a94 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a94:	b480      	push	{r7}
 8001a96:	b083      	sub	sp, #12
 8001a98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a9a:	4b0f      	ldr	r3, [pc, #60]	; (8001ad8 <HAL_MspInit+0x44>)
 8001a9c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a9e:	4a0e      	ldr	r2, [pc, #56]	; (8001ad8 <HAL_MspInit+0x44>)
 8001aa0:	f043 0301 	orr.w	r3, r3, #1
 8001aa4:	6613      	str	r3, [r2, #96]	; 0x60
 8001aa6:	4b0c      	ldr	r3, [pc, #48]	; (8001ad8 <HAL_MspInit+0x44>)
 8001aa8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001aaa:	f003 0301 	and.w	r3, r3, #1
 8001aae:	607b      	str	r3, [r7, #4]
 8001ab0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ab2:	4b09      	ldr	r3, [pc, #36]	; (8001ad8 <HAL_MspInit+0x44>)
 8001ab4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ab6:	4a08      	ldr	r2, [pc, #32]	; (8001ad8 <HAL_MspInit+0x44>)
 8001ab8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001abc:	6593      	str	r3, [r2, #88]	; 0x58
 8001abe:	4b06      	ldr	r3, [pc, #24]	; (8001ad8 <HAL_MspInit+0x44>)
 8001ac0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ac2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ac6:	603b      	str	r3, [r7, #0]
 8001ac8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001aca:	bf00      	nop
 8001acc:	370c      	adds	r7, #12
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad4:	4770      	bx	lr
 8001ad6:	bf00      	nop
 8001ad8:	40021000 	.word	0x40021000

08001adc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001adc:	b480      	push	{r7}
 8001ade:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001ae0:	e7fe      	b.n	8001ae0 <NMI_Handler+0x4>

08001ae2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001ae2:	b480      	push	{r7}
 8001ae4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001ae6:	e7fe      	b.n	8001ae6 <HardFault_Handler+0x4>

08001ae8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001ae8:	b480      	push	{r7}
 8001aea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001aec:	e7fe      	b.n	8001aec <MemManage_Handler+0x4>

08001aee <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001aee:	b480      	push	{r7}
 8001af0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001af2:	e7fe      	b.n	8001af2 <BusFault_Handler+0x4>

08001af4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001af4:	b480      	push	{r7}
 8001af6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001af8:	e7fe      	b.n	8001af8 <UsageFault_Handler+0x4>

08001afa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001afa:	b480      	push	{r7}
 8001afc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001afe:	bf00      	nop
 8001b00:	46bd      	mov	sp, r7
 8001b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b06:	4770      	bx	lr

08001b08 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b08:	b480      	push	{r7}
 8001b0a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b0c:	bf00      	nop
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b14:	4770      	bx	lr

08001b16 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001b16:	b480      	push	{r7}
 8001b18:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001b1a:	bf00      	nop
 8001b1c:	46bd      	mov	sp, r7
 8001b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b22:	4770      	bx	lr

08001b24 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001b24:	b580      	push	{r7, lr}
 8001b26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001b28:	f000 ff3a 	bl	80029a0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001b2c:	bf00      	nop
 8001b2e:	bd80      	pop	{r7, pc}

08001b30 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8001b30:	b580      	push	{r7, lr}
 8001b32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 8001b34:	4802      	ldr	r0, [pc, #8]	; (8001b40 <DMA1_Channel5_IRQHandler+0x10>)
 8001b36:	f001 fae9 	bl	800310c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8001b3a:	bf00      	nop
 8001b3c:	bd80      	pop	{r7, pc}
 8001b3e:	bf00      	nop
 8001b40:	2000a284 	.word	0x2000a284

08001b44 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8001b44:	b580      	push	{r7, lr}
 8001b46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch1_trig);
 8001b48:	4802      	ldr	r0, [pc, #8]	; (8001b54 <DMA1_Channel6_IRQHandler+0x10>)
 8001b4a:	f001 fadf 	bl	800310c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8001b4e:	bf00      	nop
 8001b50:	bd80      	pop	{r7, pc}
 8001b52:	bf00      	nop
 8001b54:	2000a44c 	.word	0x2000a44c

08001b58 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 8001b5c:	4802      	ldr	r0, [pc, #8]	; (8001b68 <TIM1_UP_TIM16_IRQHandler+0x10>)
 8001b5e:	f004 fb51 	bl	8006204 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8001b62:	bf00      	nop
 8001b64:	bd80      	pop	{r7, pc}
 8001b66:	bf00      	nop
 8001b68:	2000a400 	.word	0x2000a400

08001b6c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001b70:	4802      	ldr	r0, [pc, #8]	; (8001b7c <TIM2_IRQHandler+0x10>)
 8001b72:	f004 fb47 	bl	8006204 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001b76:	bf00      	nop
 8001b78:	bd80      	pop	{r7, pc}
 8001b7a:	bf00      	nop
 8001b7c:	2000a2d0 	.word	0x2000a2d0

08001b80 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8001b80:	b580      	push	{r7, lr}
 8001b82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8001b84:	4802      	ldr	r0, [pc, #8]	; (8001b90 <TIM7_IRQHandler+0x10>)
 8001b86:	f004 fb3d 	bl	8006204 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8001b8a:	bf00      	nop
 8001b8c:	bd80      	pop	{r7, pc}
 8001b8e:	bf00      	nop
 8001b90:	2000a3b4 	.word	0x2000a3b4

08001b94 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001b94:	b480      	push	{r7}
 8001b96:	af00      	add	r7, sp, #0
  return 1;
 8001b98:	2301      	movs	r3, #1
}
 8001b9a:	4618      	mov	r0, r3
 8001b9c:	46bd      	mov	sp, r7
 8001b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba2:	4770      	bx	lr

08001ba4 <_kill>:

int _kill(int pid, int sig)
{
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	b082      	sub	sp, #8
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	6078      	str	r0, [r7, #4]
 8001bac:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001bae:	f008 f8cf 	bl	8009d50 <__errno>
 8001bb2:	4603      	mov	r3, r0
 8001bb4:	2216      	movs	r2, #22
 8001bb6:	601a      	str	r2, [r3, #0]
  return -1;
 8001bb8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001bbc:	4618      	mov	r0, r3
 8001bbe:	3708      	adds	r7, #8
 8001bc0:	46bd      	mov	sp, r7
 8001bc2:	bd80      	pop	{r7, pc}

08001bc4 <_exit>:

void _exit (int status)
{
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	b082      	sub	sp, #8
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001bcc:	f04f 31ff 	mov.w	r1, #4294967295
 8001bd0:	6878      	ldr	r0, [r7, #4]
 8001bd2:	f7ff ffe7 	bl	8001ba4 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001bd6:	e7fe      	b.n	8001bd6 <_exit+0x12>

08001bd8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	b086      	sub	sp, #24
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	60f8      	str	r0, [r7, #12]
 8001be0:	60b9      	str	r1, [r7, #8]
 8001be2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001be4:	2300      	movs	r3, #0
 8001be6:	617b      	str	r3, [r7, #20]
 8001be8:	e00a      	b.n	8001c00 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001bea:	f3af 8000 	nop.w
 8001bee:	4601      	mov	r1, r0
 8001bf0:	68bb      	ldr	r3, [r7, #8]
 8001bf2:	1c5a      	adds	r2, r3, #1
 8001bf4:	60ba      	str	r2, [r7, #8]
 8001bf6:	b2ca      	uxtb	r2, r1
 8001bf8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001bfa:	697b      	ldr	r3, [r7, #20]
 8001bfc:	3301      	adds	r3, #1
 8001bfe:	617b      	str	r3, [r7, #20]
 8001c00:	697a      	ldr	r2, [r7, #20]
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	429a      	cmp	r2, r3
 8001c06:	dbf0      	blt.n	8001bea <_read+0x12>
  }

  return len;
 8001c08:	687b      	ldr	r3, [r7, #4]
}
 8001c0a:	4618      	mov	r0, r3
 8001c0c:	3718      	adds	r7, #24
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	bd80      	pop	{r7, pc}

08001c12 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001c12:	b580      	push	{r7, lr}
 8001c14:	b086      	sub	sp, #24
 8001c16:	af00      	add	r7, sp, #0
 8001c18:	60f8      	str	r0, [r7, #12]
 8001c1a:	60b9      	str	r1, [r7, #8]
 8001c1c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c1e:	2300      	movs	r3, #0
 8001c20:	617b      	str	r3, [r7, #20]
 8001c22:	e009      	b.n	8001c38 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001c24:	68bb      	ldr	r3, [r7, #8]
 8001c26:	1c5a      	adds	r2, r3, #1
 8001c28:	60ba      	str	r2, [r7, #8]
 8001c2a:	781b      	ldrb	r3, [r3, #0]
 8001c2c:	4618      	mov	r0, r3
 8001c2e:	f7ff fbeb 	bl	8001408 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c32:	697b      	ldr	r3, [r7, #20]
 8001c34:	3301      	adds	r3, #1
 8001c36:	617b      	str	r3, [r7, #20]
 8001c38:	697a      	ldr	r2, [r7, #20]
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	429a      	cmp	r2, r3
 8001c3e:	dbf1      	blt.n	8001c24 <_write+0x12>
  }
  return len;
 8001c40:	687b      	ldr	r3, [r7, #4]
}
 8001c42:	4618      	mov	r0, r3
 8001c44:	3718      	adds	r7, #24
 8001c46:	46bd      	mov	sp, r7
 8001c48:	bd80      	pop	{r7, pc}

08001c4a <_close>:

int _close(int file)
{
 8001c4a:	b480      	push	{r7}
 8001c4c:	b083      	sub	sp, #12
 8001c4e:	af00      	add	r7, sp, #0
 8001c50:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001c52:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001c56:	4618      	mov	r0, r3
 8001c58:	370c      	adds	r7, #12
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c60:	4770      	bx	lr

08001c62 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001c62:	b480      	push	{r7}
 8001c64:	b083      	sub	sp, #12
 8001c66:	af00      	add	r7, sp, #0
 8001c68:	6078      	str	r0, [r7, #4]
 8001c6a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001c6c:	683b      	ldr	r3, [r7, #0]
 8001c6e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001c72:	605a      	str	r2, [r3, #4]
  return 0;
 8001c74:	2300      	movs	r3, #0
}
 8001c76:	4618      	mov	r0, r3
 8001c78:	370c      	adds	r7, #12
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c80:	4770      	bx	lr

08001c82 <_isatty>:

int _isatty(int file)
{
 8001c82:	b480      	push	{r7}
 8001c84:	b083      	sub	sp, #12
 8001c86:	af00      	add	r7, sp, #0
 8001c88:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001c8a:	2301      	movs	r3, #1
}
 8001c8c:	4618      	mov	r0, r3
 8001c8e:	370c      	adds	r7, #12
 8001c90:	46bd      	mov	sp, r7
 8001c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c96:	4770      	bx	lr

08001c98 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001c98:	b480      	push	{r7}
 8001c9a:	b085      	sub	sp, #20
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	60f8      	str	r0, [r7, #12]
 8001ca0:	60b9      	str	r1, [r7, #8]
 8001ca2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001ca4:	2300      	movs	r3, #0
}
 8001ca6:	4618      	mov	r0, r3
 8001ca8:	3714      	adds	r7, #20
 8001caa:	46bd      	mov	sp, r7
 8001cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb0:	4770      	bx	lr
	...

08001cb4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	b086      	sub	sp, #24
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001cbc:	4a14      	ldr	r2, [pc, #80]	; (8001d10 <_sbrk+0x5c>)
 8001cbe:	4b15      	ldr	r3, [pc, #84]	; (8001d14 <_sbrk+0x60>)
 8001cc0:	1ad3      	subs	r3, r2, r3
 8001cc2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001cc4:	697b      	ldr	r3, [r7, #20]
 8001cc6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001cc8:	4b13      	ldr	r3, [pc, #76]	; (8001d18 <_sbrk+0x64>)
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d102      	bne.n	8001cd6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001cd0:	4b11      	ldr	r3, [pc, #68]	; (8001d18 <_sbrk+0x64>)
 8001cd2:	4a12      	ldr	r2, [pc, #72]	; (8001d1c <_sbrk+0x68>)
 8001cd4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001cd6:	4b10      	ldr	r3, [pc, #64]	; (8001d18 <_sbrk+0x64>)
 8001cd8:	681a      	ldr	r2, [r3, #0]
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	4413      	add	r3, r2
 8001cde:	693a      	ldr	r2, [r7, #16]
 8001ce0:	429a      	cmp	r2, r3
 8001ce2:	d207      	bcs.n	8001cf4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001ce4:	f008 f834 	bl	8009d50 <__errno>
 8001ce8:	4603      	mov	r3, r0
 8001cea:	220c      	movs	r2, #12
 8001cec:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001cee:	f04f 33ff 	mov.w	r3, #4294967295
 8001cf2:	e009      	b.n	8001d08 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001cf4:	4b08      	ldr	r3, [pc, #32]	; (8001d18 <_sbrk+0x64>)
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001cfa:	4b07      	ldr	r3, [pc, #28]	; (8001d18 <_sbrk+0x64>)
 8001cfc:	681a      	ldr	r2, [r3, #0]
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	4413      	add	r3, r2
 8001d02:	4a05      	ldr	r2, [pc, #20]	; (8001d18 <_sbrk+0x64>)
 8001d04:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001d06:	68fb      	ldr	r3, [r7, #12]
}
 8001d08:	4618      	mov	r0, r3
 8001d0a:	3718      	adds	r7, #24
 8001d0c:	46bd      	mov	sp, r7
 8001d0e:	bd80      	pop	{r7, pc}
 8001d10:	20018000 	.word	0x20018000
 8001d14:	00000400 	.word	0x00000400
 8001d18:	2000a2cc 	.word	0x2000a2cc
 8001d1c:	2000a7c8 	.word	0x2000a7c8

08001d20 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001d20:	b480      	push	{r7}
 8001d22:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001d24:	4b06      	ldr	r3, [pc, #24]	; (8001d40 <SystemInit+0x20>)
 8001d26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d2a:	4a05      	ldr	r2, [pc, #20]	; (8001d40 <SystemInit+0x20>)
 8001d2c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001d30:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001d34:	bf00      	nop
 8001d36:	46bd      	mov	sp, r7
 8001d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3c:	4770      	bx	lr
 8001d3e:	bf00      	nop
 8001d40:	e000ed00 	.word	0xe000ed00

08001d44 <MX_TIM2_Init>:
TIM_HandleTypeDef htim16;
DMA_HandleTypeDef hdma_tim3_ch1_trig;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001d44:	b580      	push	{r7, lr}
 8001d46:	b092      	sub	sp, #72	; 0x48
 8001d48:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001d4a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001d4e:	2200      	movs	r2, #0
 8001d50:	601a      	str	r2, [r3, #0]
 8001d52:	605a      	str	r2, [r3, #4]
 8001d54:	609a      	str	r2, [r3, #8]
 8001d56:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d58:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	601a      	str	r2, [r3, #0]
 8001d60:	605a      	str	r2, [r3, #4]
 8001d62:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001d64:	f107 031c 	add.w	r3, r7, #28
 8001d68:	2200      	movs	r2, #0
 8001d6a:	601a      	str	r2, [r3, #0]
 8001d6c:	605a      	str	r2, [r3, #4]
 8001d6e:	609a      	str	r2, [r3, #8]
 8001d70:	60da      	str	r2, [r3, #12]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001d72:	463b      	mov	r3, r7
 8001d74:	2200      	movs	r2, #0
 8001d76:	601a      	str	r2, [r3, #0]
 8001d78:	605a      	str	r2, [r3, #4]
 8001d7a:	609a      	str	r2, [r3, #8]
 8001d7c:	60da      	str	r2, [r3, #12]
 8001d7e:	611a      	str	r2, [r3, #16]
 8001d80:	615a      	str	r2, [r3, #20]
 8001d82:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001d84:	4b42      	ldr	r3, [pc, #264]	; (8001e90 <MX_TIM2_Init+0x14c>)
 8001d86:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001d8a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 79;
 8001d8c:	4b40      	ldr	r3, [pc, #256]	; (8001e90 <MX_TIM2_Init+0x14c>)
 8001d8e:	224f      	movs	r2, #79	; 0x4f
 8001d90:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d92:	4b3f      	ldr	r3, [pc, #252]	; (8001e90 <MX_TIM2_Init+0x14c>)
 8001d94:	2200      	movs	r2, #0
 8001d96:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 99999;
 8001d98:	4b3d      	ldr	r3, [pc, #244]	; (8001e90 <MX_TIM2_Init+0x14c>)
 8001d9a:	4a3e      	ldr	r2, [pc, #248]	; (8001e94 <MX_TIM2_Init+0x150>)
 8001d9c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d9e:	4b3c      	ldr	r3, [pc, #240]	; (8001e90 <MX_TIM2_Init+0x14c>)
 8001da0:	2200      	movs	r2, #0
 8001da2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001da4:	4b3a      	ldr	r3, [pc, #232]	; (8001e90 <MX_TIM2_Init+0x14c>)
 8001da6:	2200      	movs	r2, #0
 8001da8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001daa:	4839      	ldr	r0, [pc, #228]	; (8001e90 <MX_TIM2_Init+0x14c>)
 8001dac:	f003 fc7c 	bl	80056a8 <HAL_TIM_Base_Init>
 8001db0:	4603      	mov	r3, r0
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d001      	beq.n	8001dba <MX_TIM2_Init+0x76>
  {
    Error_Handler();
 8001db6:	f7ff fd9a 	bl	80018ee <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001dba:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001dbe:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001dc0:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001dc4:	4619      	mov	r1, r3
 8001dc6:	4832      	ldr	r0, [pc, #200]	; (8001e90 <MX_TIM2_Init+0x14c>)
 8001dc8:	f004 fcce 	bl	8006768 <HAL_TIM_ConfigClockSource>
 8001dcc:	4603      	mov	r3, r0
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d001      	beq.n	8001dd6 <MX_TIM2_Init+0x92>
  {
    Error_Handler();
 8001dd2:	f7ff fd8c 	bl	80018ee <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8001dd6:	482e      	ldr	r0, [pc, #184]	; (8001e90 <MX_TIM2_Init+0x14c>)
 8001dd8:	f004 f8b6 	bl	8005f48 <HAL_TIM_IC_Init>
 8001ddc:	4603      	mov	r3, r0
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d001      	beq.n	8001de6 <MX_TIM2_Init+0xa2>
  {
    Error_Handler();
 8001de2:	f7ff fd84 	bl	80018ee <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001de6:	482a      	ldr	r0, [pc, #168]	; (8001e90 <MX_TIM2_Init+0x14c>)
 8001de8:	f003 fd26 	bl	8005838 <HAL_TIM_PWM_Init>
 8001dec:	4603      	mov	r3, r0
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d001      	beq.n	8001df6 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8001df2:	f7ff fd7c 	bl	80018ee <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001df6:	2300      	movs	r3, #0
 8001df8:	62fb      	str	r3, [r7, #44]	; 0x2c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001dfa:	2300      	movs	r3, #0
 8001dfc:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001dfe:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001e02:	4619      	mov	r1, r3
 8001e04:	4822      	ldr	r0, [pc, #136]	; (8001e90 <MX_TIM2_Init+0x14c>)
 8001e06:	f005 fc1f 	bl	8007648 <HAL_TIMEx_MasterConfigSynchronization>
 8001e0a:	4603      	mov	r3, r0
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d001      	beq.n	8001e14 <MX_TIM2_Init+0xd0>
  {
    Error_Handler();
 8001e10:	f7ff fd6d 	bl	80018ee <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001e14:	2300      	movs	r3, #0
 8001e16:	61fb      	str	r3, [r7, #28]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001e18:	2301      	movs	r3, #1
 8001e1a:	623b      	str	r3, [r7, #32]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001e1c:	2300      	movs	r3, #0
 8001e1e:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigIC.ICFilter = 0;
 8001e20:	2300      	movs	r3, #0
 8001e22:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001e24:	f107 031c 	add.w	r3, r7, #28
 8001e28:	2200      	movs	r2, #0
 8001e2a:	4619      	mov	r1, r3
 8001e2c:	4818      	ldr	r0, [pc, #96]	; (8001e90 <MX_TIM2_Init+0x14c>)
 8001e2e:	f004 faeb 	bl	8006408 <HAL_TIM_IC_ConfigChannel>
 8001e32:	4603      	mov	r3, r0
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d001      	beq.n	8001e3c <MX_TIM2_Init+0xf8>
  {
    Error_Handler();
 8001e38:	f7ff fd59 	bl	80018ee <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8001e3c:	2302      	movs	r3, #2
 8001e3e:	61fb      	str	r3, [r7, #28]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8001e40:	2302      	movs	r3, #2
 8001e42:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8001e44:	f107 031c 	add.w	r3, r7, #28
 8001e48:	2204      	movs	r2, #4
 8001e4a:	4619      	mov	r1, r3
 8001e4c:	4810      	ldr	r0, [pc, #64]	; (8001e90 <MX_TIM2_Init+0x14c>)
 8001e4e:	f004 fadb 	bl	8006408 <HAL_TIM_IC_ConfigChannel>
 8001e52:	4603      	mov	r3, r0
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d001      	beq.n	8001e5c <MX_TIM2_Init+0x118>
  {
    Error_Handler();
 8001e58:	f7ff fd49 	bl	80018ee <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001e5c:	2360      	movs	r3, #96	; 0x60
 8001e5e:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 10;
 8001e60:	230a      	movs	r3, #10
 8001e62:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001e64:	2300      	movs	r3, #0
 8001e66:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001e68:	2300      	movs	r3, #0
 8001e6a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001e6c:	463b      	mov	r3, r7
 8001e6e:	2208      	movs	r2, #8
 8001e70:	4619      	mov	r1, r3
 8001e72:	4807      	ldr	r0, [pc, #28]	; (8001e90 <MX_TIM2_Init+0x14c>)
 8001e74:	f004 fb64 	bl	8006540 <HAL_TIM_PWM_ConfigChannel>
 8001e78:	4603      	mov	r3, r0
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d001      	beq.n	8001e82 <MX_TIM2_Init+0x13e>
  {
    Error_Handler();
 8001e7e:	f7ff fd36 	bl	80018ee <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001e82:	4803      	ldr	r0, [pc, #12]	; (8001e90 <MX_TIM2_Init+0x14c>)
 8001e84:	f000 f9f0 	bl	8002268 <HAL_TIM_MspPostInit>

}
 8001e88:	bf00      	nop
 8001e8a:	3748      	adds	r7, #72	; 0x48
 8001e8c:	46bd      	mov	sp, r7
 8001e8e:	bd80      	pop	{r7, pc}
 8001e90:	2000a2d0 	.word	0x2000a2d0
 8001e94:	0001869f 	.word	0x0001869f

08001e98 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	b08e      	sub	sp, #56	; 0x38
 8001e9c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001e9e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001ea2:	2200      	movs	r2, #0
 8001ea4:	601a      	str	r2, [r3, #0]
 8001ea6:	605a      	str	r2, [r3, #4]
 8001ea8:	609a      	str	r2, [r3, #8]
 8001eaa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001eac:	f107 031c 	add.w	r3, r7, #28
 8001eb0:	2200      	movs	r2, #0
 8001eb2:	601a      	str	r2, [r3, #0]
 8001eb4:	605a      	str	r2, [r3, #4]
 8001eb6:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001eb8:	463b      	mov	r3, r7
 8001eba:	2200      	movs	r2, #0
 8001ebc:	601a      	str	r2, [r3, #0]
 8001ebe:	605a      	str	r2, [r3, #4]
 8001ec0:	609a      	str	r2, [r3, #8]
 8001ec2:	60da      	str	r2, [r3, #12]
 8001ec4:	611a      	str	r2, [r3, #16]
 8001ec6:	615a      	str	r2, [r3, #20]
 8001ec8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001eca:	4b2c      	ldr	r3, [pc, #176]	; (8001f7c <MX_TIM3_Init+0xe4>)
 8001ecc:	4a2c      	ldr	r2, [pc, #176]	; (8001f80 <MX_TIM3_Init+0xe8>)
 8001ece:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001ed0:	4b2a      	ldr	r3, [pc, #168]	; (8001f7c <MX_TIM3_Init+0xe4>)
 8001ed2:	2200      	movs	r2, #0
 8001ed4:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ed6:	4b29      	ldr	r3, [pc, #164]	; (8001f7c <MX_TIM3_Init+0xe4>)
 8001ed8:	2200      	movs	r2, #0
 8001eda:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 99;
 8001edc:	4b27      	ldr	r3, [pc, #156]	; (8001f7c <MX_TIM3_Init+0xe4>)
 8001ede:	2263      	movs	r2, #99	; 0x63
 8001ee0:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ee2:	4b26      	ldr	r3, [pc, #152]	; (8001f7c <MX_TIM3_Init+0xe4>)
 8001ee4:	2200      	movs	r2, #0
 8001ee6:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ee8:	4b24      	ldr	r3, [pc, #144]	; (8001f7c <MX_TIM3_Init+0xe4>)
 8001eea:	2200      	movs	r2, #0
 8001eec:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001eee:	4823      	ldr	r0, [pc, #140]	; (8001f7c <MX_TIM3_Init+0xe4>)
 8001ef0:	f003 fbda 	bl	80056a8 <HAL_TIM_Base_Init>
 8001ef4:	4603      	mov	r3, r0
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d001      	beq.n	8001efe <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8001efa:	f7ff fcf8 	bl	80018ee <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001efe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001f02:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001f04:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001f08:	4619      	mov	r1, r3
 8001f0a:	481c      	ldr	r0, [pc, #112]	; (8001f7c <MX_TIM3_Init+0xe4>)
 8001f0c:	f004 fc2c 	bl	8006768 <HAL_TIM_ConfigClockSource>
 8001f10:	4603      	mov	r3, r0
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d001      	beq.n	8001f1a <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8001f16:	f7ff fcea 	bl	80018ee <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001f1a:	4818      	ldr	r0, [pc, #96]	; (8001f7c <MX_TIM3_Init+0xe4>)
 8001f1c:	f003 fc8c 	bl	8005838 <HAL_TIM_PWM_Init>
 8001f20:	4603      	mov	r3, r0
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d001      	beq.n	8001f2a <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8001f26:	f7ff fce2 	bl	80018ee <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001f2a:	2300      	movs	r3, #0
 8001f2c:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f2e:	2300      	movs	r3, #0
 8001f30:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001f32:	f107 031c 	add.w	r3, r7, #28
 8001f36:	4619      	mov	r1, r3
 8001f38:	4810      	ldr	r0, [pc, #64]	; (8001f7c <MX_TIM3_Init+0xe4>)
 8001f3a:	f005 fb85 	bl	8007648 <HAL_TIMEx_MasterConfigSynchronization>
 8001f3e:	4603      	mov	r3, r0
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d001      	beq.n	8001f48 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8001f44:	f7ff fcd3 	bl	80018ee <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001f48:	2360      	movs	r3, #96	; 0x60
 8001f4a:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001f4c:	2300      	movs	r3, #0
 8001f4e:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001f50:	2300      	movs	r3, #0
 8001f52:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001f54:	2300      	movs	r3, #0
 8001f56:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001f58:	463b      	mov	r3, r7
 8001f5a:	2200      	movs	r2, #0
 8001f5c:	4619      	mov	r1, r3
 8001f5e:	4807      	ldr	r0, [pc, #28]	; (8001f7c <MX_TIM3_Init+0xe4>)
 8001f60:	f004 faee 	bl	8006540 <HAL_TIM_PWM_ConfigChannel>
 8001f64:	4603      	mov	r3, r0
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d001      	beq.n	8001f6e <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8001f6a:	f7ff fcc0 	bl	80018ee <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001f6e:	4803      	ldr	r0, [pc, #12]	; (8001f7c <MX_TIM3_Init+0xe4>)
 8001f70:	f000 f97a 	bl	8002268 <HAL_TIM_MspPostInit>

}
 8001f74:	bf00      	nop
 8001f76:	3738      	adds	r7, #56	; 0x38
 8001f78:	46bd      	mov	sp, r7
 8001f7a:	bd80      	pop	{r7, pc}
 8001f7c:	2000a31c 	.word	0x2000a31c
 8001f80:	40000400 	.word	0x40000400

08001f84 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8001f84:	b580      	push	{r7, lr}
 8001f86:	b084      	sub	sp, #16
 8001f88:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001f8a:	1d3b      	adds	r3, r7, #4
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	601a      	str	r2, [r3, #0]
 8001f90:	605a      	str	r2, [r3, #4]
 8001f92:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001f94:	4b14      	ldr	r3, [pc, #80]	; (8001fe8 <MX_TIM6_Init+0x64>)
 8001f96:	4a15      	ldr	r2, [pc, #84]	; (8001fec <MX_TIM6_Init+0x68>)
 8001f98:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 79;
 8001f9a:	4b13      	ldr	r3, [pc, #76]	; (8001fe8 <MX_TIM6_Init+0x64>)
 8001f9c:	224f      	movs	r2, #79	; 0x4f
 8001f9e:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001fa0:	4b11      	ldr	r3, [pc, #68]	; (8001fe8 <MX_TIM6_Init+0x64>)
 8001fa2:	2200      	movs	r2, #0
 8001fa4:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 8001fa6:	4b10      	ldr	r3, [pc, #64]	; (8001fe8 <MX_TIM6_Init+0x64>)
 8001fa8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001fac:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001fae:	4b0e      	ldr	r3, [pc, #56]	; (8001fe8 <MX_TIM6_Init+0x64>)
 8001fb0:	2200      	movs	r2, #0
 8001fb2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001fb4:	480c      	ldr	r0, [pc, #48]	; (8001fe8 <MX_TIM6_Init+0x64>)
 8001fb6:	f003 fb77 	bl	80056a8 <HAL_TIM_Base_Init>
 8001fba:	4603      	mov	r3, r0
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d001      	beq.n	8001fc4 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8001fc0:	f7ff fc95 	bl	80018ee <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001fc4:	2300      	movs	r3, #0
 8001fc6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001fc8:	2300      	movs	r3, #0
 8001fca:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001fcc:	1d3b      	adds	r3, r7, #4
 8001fce:	4619      	mov	r1, r3
 8001fd0:	4805      	ldr	r0, [pc, #20]	; (8001fe8 <MX_TIM6_Init+0x64>)
 8001fd2:	f005 fb39 	bl	8007648 <HAL_TIMEx_MasterConfigSynchronization>
 8001fd6:	4603      	mov	r3, r0
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d001      	beq.n	8001fe0 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8001fdc:	f7ff fc87 	bl	80018ee <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001fe0:	bf00      	nop
 8001fe2:	3710      	adds	r7, #16
 8001fe4:	46bd      	mov	sp, r7
 8001fe6:	bd80      	pop	{r7, pc}
 8001fe8:	2000a368 	.word	0x2000a368
 8001fec:	40001000 	.word	0x40001000

08001ff0 <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 8001ff0:	b580      	push	{r7, lr}
 8001ff2:	b084      	sub	sp, #16
 8001ff4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ff6:	1d3b      	adds	r3, r7, #4
 8001ff8:	2200      	movs	r2, #0
 8001ffa:	601a      	str	r2, [r3, #0]
 8001ffc:	605a      	str	r2, [r3, #4]
 8001ffe:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8002000:	4b15      	ldr	r3, [pc, #84]	; (8002058 <MX_TIM7_Init+0x68>)
 8002002:	4a16      	ldr	r2, [pc, #88]	; (800205c <MX_TIM7_Init+0x6c>)
 8002004:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 7999;
 8002006:	4b14      	ldr	r3, [pc, #80]	; (8002058 <MX_TIM7_Init+0x68>)
 8002008:	f641 723f 	movw	r2, #7999	; 0x1f3f
 800200c:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 800200e:	4b12      	ldr	r3, [pc, #72]	; (8002058 <MX_TIM7_Init+0x68>)
 8002010:	2200      	movs	r2, #0
 8002012:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 499;
 8002014:	4b10      	ldr	r3, [pc, #64]	; (8002058 <MX_TIM7_Init+0x68>)
 8002016:	f240 12f3 	movw	r2, #499	; 0x1f3
 800201a:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800201c:	4b0e      	ldr	r3, [pc, #56]	; (8002058 <MX_TIM7_Init+0x68>)
 800201e:	2200      	movs	r2, #0
 8002020:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8002022:	480d      	ldr	r0, [pc, #52]	; (8002058 <MX_TIM7_Init+0x68>)
 8002024:	f003 fb40 	bl	80056a8 <HAL_TIM_Base_Init>
 8002028:	4603      	mov	r3, r0
 800202a:	2b00      	cmp	r3, #0
 800202c:	d001      	beq.n	8002032 <MX_TIM7_Init+0x42>
  {
    Error_Handler();
 800202e:	f7ff fc5e 	bl	80018ee <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002032:	2300      	movs	r3, #0
 8002034:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002036:	2300      	movs	r3, #0
 8002038:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 800203a:	1d3b      	adds	r3, r7, #4
 800203c:	4619      	mov	r1, r3
 800203e:	4806      	ldr	r0, [pc, #24]	; (8002058 <MX_TIM7_Init+0x68>)
 8002040:	f005 fb02 	bl	8007648 <HAL_TIMEx_MasterConfigSynchronization>
 8002044:	4603      	mov	r3, r0
 8002046:	2b00      	cmp	r3, #0
 8002048:	d001      	beq.n	800204e <MX_TIM7_Init+0x5e>
  {
    Error_Handler();
 800204a:	f7ff fc50 	bl	80018ee <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 800204e:	bf00      	nop
 8002050:	3710      	adds	r7, #16
 8002052:	46bd      	mov	sp, r7
 8002054:	bd80      	pop	{r7, pc}
 8002056:	bf00      	nop
 8002058:	2000a3b4 	.word	0x2000a3b4
 800205c:	40001400 	.word	0x40001400

08002060 <MX_TIM16_Init>:
/* TIM16 init function */
void MX_TIM16_Init(void)
{
 8002060:	b580      	push	{r7, lr}
 8002062:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8002064:	4b10      	ldr	r3, [pc, #64]	; (80020a8 <MX_TIM16_Init+0x48>)
 8002066:	4a11      	ldr	r2, [pc, #68]	; (80020ac <MX_TIM16_Init+0x4c>)
 8002068:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 7999;
 800206a:	4b0f      	ldr	r3, [pc, #60]	; (80020a8 <MX_TIM16_Init+0x48>)
 800206c:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8002070:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002072:	4b0d      	ldr	r3, [pc, #52]	; (80020a8 <MX_TIM16_Init+0x48>)
 8002074:	2200      	movs	r2, #0
 8002076:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 749;
 8002078:	4b0b      	ldr	r3, [pc, #44]	; (80020a8 <MX_TIM16_Init+0x48>)
 800207a:	f240 22ed 	movw	r2, #749	; 0x2ed
 800207e:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002080:	4b09      	ldr	r3, [pc, #36]	; (80020a8 <MX_TIM16_Init+0x48>)
 8002082:	2200      	movs	r2, #0
 8002084:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8002086:	4b08      	ldr	r3, [pc, #32]	; (80020a8 <MX_TIM16_Init+0x48>)
 8002088:	2200      	movs	r2, #0
 800208a:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800208c:	4b06      	ldr	r3, [pc, #24]	; (80020a8 <MX_TIM16_Init+0x48>)
 800208e:	2200      	movs	r2, #0
 8002090:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8002092:	4805      	ldr	r0, [pc, #20]	; (80020a8 <MX_TIM16_Init+0x48>)
 8002094:	f003 fb08 	bl	80056a8 <HAL_TIM_Base_Init>
 8002098:	4603      	mov	r3, r0
 800209a:	2b00      	cmp	r3, #0
 800209c:	d001      	beq.n	80020a2 <MX_TIM16_Init+0x42>
  {
    Error_Handler();
 800209e:	f7ff fc26 	bl	80018ee <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 80020a2:	bf00      	nop
 80020a4:	bd80      	pop	{r7, pc}
 80020a6:	bf00      	nop
 80020a8:	2000a400 	.word	0x2000a400
 80020ac:	40014400 	.word	0x40014400

080020b0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80020b0:	b580      	push	{r7, lr}
 80020b2:	b08e      	sub	sp, #56	; 0x38
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020b8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80020bc:	2200      	movs	r2, #0
 80020be:	601a      	str	r2, [r3, #0]
 80020c0:	605a      	str	r2, [r3, #4]
 80020c2:	609a      	str	r2, [r3, #8]
 80020c4:	60da      	str	r2, [r3, #12]
 80020c6:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM2)
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80020d0:	d131      	bne.n	8002136 <HAL_TIM_Base_MspInit+0x86>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80020d2:	4b5e      	ldr	r3, [pc, #376]	; (800224c <HAL_TIM_Base_MspInit+0x19c>)
 80020d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020d6:	4a5d      	ldr	r2, [pc, #372]	; (800224c <HAL_TIM_Base_MspInit+0x19c>)
 80020d8:	f043 0301 	orr.w	r3, r3, #1
 80020dc:	6593      	str	r3, [r2, #88]	; 0x58
 80020de:	4b5b      	ldr	r3, [pc, #364]	; (800224c <HAL_TIM_Base_MspInit+0x19c>)
 80020e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020e2:	f003 0301 	and.w	r3, r3, #1
 80020e6:	623b      	str	r3, [r7, #32]
 80020e8:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80020ea:	4b58      	ldr	r3, [pc, #352]	; (800224c <HAL_TIM_Base_MspInit+0x19c>)
 80020ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020ee:	4a57      	ldr	r2, [pc, #348]	; (800224c <HAL_TIM_Base_MspInit+0x19c>)
 80020f0:	f043 0301 	orr.w	r3, r3, #1
 80020f4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80020f6:	4b55      	ldr	r3, [pc, #340]	; (800224c <HAL_TIM_Base_MspInit+0x19c>)
 80020f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020fa:	f003 0301 	and.w	r3, r3, #1
 80020fe:	61fb      	str	r3, [r7, #28]
 8002100:	69fb      	ldr	r3, [r7, #28]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002102:	2301      	movs	r3, #1
 8002104:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002106:	2302      	movs	r3, #2
 8002108:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800210a:	2300      	movs	r3, #0
 800210c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800210e:	2300      	movs	r3, #0
 8002110:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002112:	2301      	movs	r3, #1
 8002114:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002116:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800211a:	4619      	mov	r1, r3
 800211c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002120:	f001 f8d4 	bl	80032cc <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 10, 0);
 8002124:	2200      	movs	r2, #0
 8002126:	210a      	movs	r1, #10
 8002128:	201c      	movs	r0, #28
 800212a:	f000 fd58 	bl	8002bde <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800212e:	201c      	movs	r0, #28
 8002130:	f000 fd71 	bl	8002c16 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }
}
 8002134:	e086      	b.n	8002244 <HAL_TIM_Base_MspInit+0x194>
  else if(tim_baseHandle->Instance==TIM3)
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	4a45      	ldr	r2, [pc, #276]	; (8002250 <HAL_TIM_Base_MspInit+0x1a0>)
 800213c:	4293      	cmp	r3, r2
 800213e:	d13c      	bne.n	80021ba <HAL_TIM_Base_MspInit+0x10a>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002140:	4b42      	ldr	r3, [pc, #264]	; (800224c <HAL_TIM_Base_MspInit+0x19c>)
 8002142:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002144:	4a41      	ldr	r2, [pc, #260]	; (800224c <HAL_TIM_Base_MspInit+0x19c>)
 8002146:	f043 0302 	orr.w	r3, r3, #2
 800214a:	6593      	str	r3, [r2, #88]	; 0x58
 800214c:	4b3f      	ldr	r3, [pc, #252]	; (800224c <HAL_TIM_Base_MspInit+0x19c>)
 800214e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002150:	f003 0302 	and.w	r3, r3, #2
 8002154:	61bb      	str	r3, [r7, #24]
 8002156:	69bb      	ldr	r3, [r7, #24]
    hdma_tim3_ch1_trig.Instance = DMA1_Channel6;
 8002158:	4b3e      	ldr	r3, [pc, #248]	; (8002254 <HAL_TIM_Base_MspInit+0x1a4>)
 800215a:	4a3f      	ldr	r2, [pc, #252]	; (8002258 <HAL_TIM_Base_MspInit+0x1a8>)
 800215c:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch1_trig.Init.Request = DMA_REQUEST_5;
 800215e:	4b3d      	ldr	r3, [pc, #244]	; (8002254 <HAL_TIM_Base_MspInit+0x1a4>)
 8002160:	2205      	movs	r2, #5
 8002162:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch1_trig.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002164:	4b3b      	ldr	r3, [pc, #236]	; (8002254 <HAL_TIM_Base_MspInit+0x1a4>)
 8002166:	2210      	movs	r2, #16
 8002168:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch1_trig.Init.PeriphInc = DMA_PINC_DISABLE;
 800216a:	4b3a      	ldr	r3, [pc, #232]	; (8002254 <HAL_TIM_Base_MspInit+0x1a4>)
 800216c:	2200      	movs	r2, #0
 800216e:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch1_trig.Init.MemInc = DMA_MINC_ENABLE;
 8002170:	4b38      	ldr	r3, [pc, #224]	; (8002254 <HAL_TIM_Base_MspInit+0x1a4>)
 8002172:	2280      	movs	r2, #128	; 0x80
 8002174:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch1_trig.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002176:	4b37      	ldr	r3, [pc, #220]	; (8002254 <HAL_TIM_Base_MspInit+0x1a4>)
 8002178:	f44f 7280 	mov.w	r2, #256	; 0x100
 800217c:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch1_trig.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800217e:	4b35      	ldr	r3, [pc, #212]	; (8002254 <HAL_TIM_Base_MspInit+0x1a4>)
 8002180:	2200      	movs	r2, #0
 8002182:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch1_trig.Init.Mode = DMA_NORMAL;
 8002184:	4b33      	ldr	r3, [pc, #204]	; (8002254 <HAL_TIM_Base_MspInit+0x1a4>)
 8002186:	2200      	movs	r2, #0
 8002188:	61da      	str	r2, [r3, #28]
    hdma_tim3_ch1_trig.Init.Priority = DMA_PRIORITY_LOW;
 800218a:	4b32      	ldr	r3, [pc, #200]	; (8002254 <HAL_TIM_Base_MspInit+0x1a4>)
 800218c:	2200      	movs	r2, #0
 800218e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim3_ch1_trig) != HAL_OK)
 8002190:	4830      	ldr	r0, [pc, #192]	; (8002254 <HAL_TIM_Base_MspInit+0x1a4>)
 8002192:	f000 fea3 	bl	8002edc <HAL_DMA_Init>
 8002196:	4603      	mov	r3, r0
 8002198:	2b00      	cmp	r3, #0
 800219a:	d001      	beq.n	80021a0 <HAL_TIM_Base_MspInit+0xf0>
      Error_Handler();
 800219c:	f7ff fba7 	bl	80018ee <Error_Handler>
    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC1],hdma_tim3_ch1_trig);
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	4a2c      	ldr	r2, [pc, #176]	; (8002254 <HAL_TIM_Base_MspInit+0x1a4>)
 80021a4:	625a      	str	r2, [r3, #36]	; 0x24
 80021a6:	4a2b      	ldr	r2, [pc, #172]	; (8002254 <HAL_TIM_Base_MspInit+0x1a4>)
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	6293      	str	r3, [r2, #40]	; 0x28
    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_TRIGGER],hdma_tim3_ch1_trig);
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	4a29      	ldr	r2, [pc, #164]	; (8002254 <HAL_TIM_Base_MspInit+0x1a4>)
 80021b0:	639a      	str	r2, [r3, #56]	; 0x38
 80021b2:	4a28      	ldr	r2, [pc, #160]	; (8002254 <HAL_TIM_Base_MspInit+0x1a4>)
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	6293      	str	r3, [r2, #40]	; 0x28
}
 80021b8:	e044      	b.n	8002244 <HAL_TIM_Base_MspInit+0x194>
  else if(tim_baseHandle->Instance==TIM6)
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	4a27      	ldr	r2, [pc, #156]	; (800225c <HAL_TIM_Base_MspInit+0x1ac>)
 80021c0:	4293      	cmp	r3, r2
 80021c2:	d10c      	bne.n	80021de <HAL_TIM_Base_MspInit+0x12e>
    __HAL_RCC_TIM6_CLK_ENABLE();
 80021c4:	4b21      	ldr	r3, [pc, #132]	; (800224c <HAL_TIM_Base_MspInit+0x19c>)
 80021c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021c8:	4a20      	ldr	r2, [pc, #128]	; (800224c <HAL_TIM_Base_MspInit+0x19c>)
 80021ca:	f043 0310 	orr.w	r3, r3, #16
 80021ce:	6593      	str	r3, [r2, #88]	; 0x58
 80021d0:	4b1e      	ldr	r3, [pc, #120]	; (800224c <HAL_TIM_Base_MspInit+0x19c>)
 80021d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021d4:	f003 0310 	and.w	r3, r3, #16
 80021d8:	617b      	str	r3, [r7, #20]
 80021da:	697b      	ldr	r3, [r7, #20]
}
 80021dc:	e032      	b.n	8002244 <HAL_TIM_Base_MspInit+0x194>
  else if(tim_baseHandle->Instance==TIM7)
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	4a1f      	ldr	r2, [pc, #124]	; (8002260 <HAL_TIM_Base_MspInit+0x1b0>)
 80021e4:	4293      	cmp	r3, r2
 80021e6:	d114      	bne.n	8002212 <HAL_TIM_Base_MspInit+0x162>
    __HAL_RCC_TIM7_CLK_ENABLE();
 80021e8:	4b18      	ldr	r3, [pc, #96]	; (800224c <HAL_TIM_Base_MspInit+0x19c>)
 80021ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021ec:	4a17      	ldr	r2, [pc, #92]	; (800224c <HAL_TIM_Base_MspInit+0x19c>)
 80021ee:	f043 0320 	orr.w	r3, r3, #32
 80021f2:	6593      	str	r3, [r2, #88]	; 0x58
 80021f4:	4b15      	ldr	r3, [pc, #84]	; (800224c <HAL_TIM_Base_MspInit+0x19c>)
 80021f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021f8:	f003 0320 	and.w	r3, r3, #32
 80021fc:	613b      	str	r3, [r7, #16]
 80021fe:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM7_IRQn, 5, 0);
 8002200:	2200      	movs	r2, #0
 8002202:	2105      	movs	r1, #5
 8002204:	2037      	movs	r0, #55	; 0x37
 8002206:	f000 fcea 	bl	8002bde <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 800220a:	2037      	movs	r0, #55	; 0x37
 800220c:	f000 fd03 	bl	8002c16 <HAL_NVIC_EnableIRQ>
}
 8002210:	e018      	b.n	8002244 <HAL_TIM_Base_MspInit+0x194>
  else if(tim_baseHandle->Instance==TIM16)
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	4a13      	ldr	r2, [pc, #76]	; (8002264 <HAL_TIM_Base_MspInit+0x1b4>)
 8002218:	4293      	cmp	r3, r2
 800221a:	d113      	bne.n	8002244 <HAL_TIM_Base_MspInit+0x194>
    __HAL_RCC_TIM16_CLK_ENABLE();
 800221c:	4b0b      	ldr	r3, [pc, #44]	; (800224c <HAL_TIM_Base_MspInit+0x19c>)
 800221e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002220:	4a0a      	ldr	r2, [pc, #40]	; (800224c <HAL_TIM_Base_MspInit+0x19c>)
 8002222:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002226:	6613      	str	r3, [r2, #96]	; 0x60
 8002228:	4b08      	ldr	r3, [pc, #32]	; (800224c <HAL_TIM_Base_MspInit+0x19c>)
 800222a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800222c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002230:	60fb      	str	r3, [r7, #12]
 8002232:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 6, 0);
 8002234:	2200      	movs	r2, #0
 8002236:	2106      	movs	r1, #6
 8002238:	2019      	movs	r0, #25
 800223a:	f000 fcd0 	bl	8002bde <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 800223e:	2019      	movs	r0, #25
 8002240:	f000 fce9 	bl	8002c16 <HAL_NVIC_EnableIRQ>
}
 8002244:	bf00      	nop
 8002246:	3738      	adds	r7, #56	; 0x38
 8002248:	46bd      	mov	sp, r7
 800224a:	bd80      	pop	{r7, pc}
 800224c:	40021000 	.word	0x40021000
 8002250:	40000400 	.word	0x40000400
 8002254:	2000a44c 	.word	0x2000a44c
 8002258:	4002006c 	.word	0x4002006c
 800225c:	40001000 	.word	0x40001000
 8002260:	40001400 	.word	0x40001400
 8002264:	40014400 	.word	0x40014400

08002268 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002268:	b580      	push	{r7, lr}
 800226a:	b08a      	sub	sp, #40	; 0x28
 800226c:	af00      	add	r7, sp, #0
 800226e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002270:	f107 0314 	add.w	r3, r7, #20
 8002274:	2200      	movs	r2, #0
 8002276:	601a      	str	r2, [r3, #0]
 8002278:	605a      	str	r2, [r3, #4]
 800227a:	609a      	str	r2, [r3, #8]
 800227c:	60da      	str	r2, [r3, #12]
 800227e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002288:	d11d      	bne.n	80022c6 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800228a:	4b22      	ldr	r3, [pc, #136]	; (8002314 <HAL_TIM_MspPostInit+0xac>)
 800228c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800228e:	4a21      	ldr	r2, [pc, #132]	; (8002314 <HAL_TIM_MspPostInit+0xac>)
 8002290:	f043 0302 	orr.w	r3, r3, #2
 8002294:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002296:	4b1f      	ldr	r3, [pc, #124]	; (8002314 <HAL_TIM_MspPostInit+0xac>)
 8002298:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800229a:	f003 0302 	and.w	r3, r3, #2
 800229e:	613b      	str	r3, [r7, #16]
 80022a0:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PB10     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80022a2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80022a6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022a8:	2302      	movs	r3, #2
 80022aa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022ac:	2300      	movs	r3, #0
 80022ae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022b0:	2300      	movs	r3, #0
 80022b2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80022b4:	2301      	movs	r3, #1
 80022b6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80022b8:	f107 0314 	add.w	r3, r7, #20
 80022bc:	4619      	mov	r1, r3
 80022be:	4816      	ldr	r0, [pc, #88]	; (8002318 <HAL_TIM_MspPostInit+0xb0>)
 80022c0:	f001 f804 	bl	80032cc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80022c4:	e021      	b.n	800230a <HAL_TIM_MspPostInit+0xa2>
  else if(timHandle->Instance==TIM3)
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	4a14      	ldr	r2, [pc, #80]	; (800231c <HAL_TIM_MspPostInit+0xb4>)
 80022cc:	4293      	cmp	r3, r2
 80022ce:	d11c      	bne.n	800230a <HAL_TIM_MspPostInit+0xa2>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80022d0:	4b10      	ldr	r3, [pc, #64]	; (8002314 <HAL_TIM_MspPostInit+0xac>)
 80022d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022d4:	4a0f      	ldr	r2, [pc, #60]	; (8002314 <HAL_TIM_MspPostInit+0xac>)
 80022d6:	f043 0301 	orr.w	r3, r3, #1
 80022da:	64d3      	str	r3, [r2, #76]	; 0x4c
 80022dc:	4b0d      	ldr	r3, [pc, #52]	; (8002314 <HAL_TIM_MspPostInit+0xac>)
 80022de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022e0:	f003 0301 	and.w	r3, r3, #1
 80022e4:	60fb      	str	r3, [r7, #12]
 80022e6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80022e8:	2340      	movs	r3, #64	; 0x40
 80022ea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022ec:	2302      	movs	r3, #2
 80022ee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022f0:	2300      	movs	r3, #0
 80022f2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022f4:	2300      	movs	r3, #0
 80022f6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80022f8:	2302      	movs	r3, #2
 80022fa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022fc:	f107 0314 	add.w	r3, r7, #20
 8002300:	4619      	mov	r1, r3
 8002302:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002306:	f000 ffe1 	bl	80032cc <HAL_GPIO_Init>
}
 800230a:	bf00      	nop
 800230c:	3728      	adds	r7, #40	; 0x28
 800230e:	46bd      	mov	sp, r7
 8002310:	bd80      	pop	{r7, pc}
 8002312:	bf00      	nop
 8002314:	40021000 	.word	0x40021000
 8002318:	48000400 	.word	0x48000400
 800231c:	40000400 	.word	0x40000400

08002320 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart3;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002320:	b580      	push	{r7, lr}
 8002322:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002324:	4b14      	ldr	r3, [pc, #80]	; (8002378 <MX_USART2_UART_Init+0x58>)
 8002326:	4a15      	ldr	r2, [pc, #84]	; (800237c <MX_USART2_UART_Init+0x5c>)
 8002328:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800232a:	4b13      	ldr	r3, [pc, #76]	; (8002378 <MX_USART2_UART_Init+0x58>)
 800232c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002330:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002332:	4b11      	ldr	r3, [pc, #68]	; (8002378 <MX_USART2_UART_Init+0x58>)
 8002334:	2200      	movs	r2, #0
 8002336:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002338:	4b0f      	ldr	r3, [pc, #60]	; (8002378 <MX_USART2_UART_Init+0x58>)
 800233a:	2200      	movs	r2, #0
 800233c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800233e:	4b0e      	ldr	r3, [pc, #56]	; (8002378 <MX_USART2_UART_Init+0x58>)
 8002340:	2200      	movs	r2, #0
 8002342:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002344:	4b0c      	ldr	r3, [pc, #48]	; (8002378 <MX_USART2_UART_Init+0x58>)
 8002346:	220c      	movs	r2, #12
 8002348:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800234a:	4b0b      	ldr	r3, [pc, #44]	; (8002378 <MX_USART2_UART_Init+0x58>)
 800234c:	2200      	movs	r2, #0
 800234e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002350:	4b09      	ldr	r3, [pc, #36]	; (8002378 <MX_USART2_UART_Init+0x58>)
 8002352:	2200      	movs	r2, #0
 8002354:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002356:	4b08      	ldr	r3, [pc, #32]	; (8002378 <MX_USART2_UART_Init+0x58>)
 8002358:	2200      	movs	r2, #0
 800235a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800235c:	4b06      	ldr	r3, [pc, #24]	; (8002378 <MX_USART2_UART_Init+0x58>)
 800235e:	2200      	movs	r2, #0
 8002360:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002362:	4805      	ldr	r0, [pc, #20]	; (8002378 <MX_USART2_UART_Init+0x58>)
 8002364:	f005 fa16 	bl	8007794 <HAL_UART_Init>
 8002368:	4603      	mov	r3, r0
 800236a:	2b00      	cmp	r3, #0
 800236c:	d001      	beq.n	8002372 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800236e:	f7ff fabe 	bl	80018ee <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002372:	bf00      	nop
 8002374:	bd80      	pop	{r7, pc}
 8002376:	bf00      	nop
 8002378:	2000a494 	.word	0x2000a494
 800237c:	40004400 	.word	0x40004400

08002380 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8002380:	b580      	push	{r7, lr}
 8002382:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002384:	4b16      	ldr	r3, [pc, #88]	; (80023e0 <MX_USART3_UART_Init+0x60>)
 8002386:	4a17      	ldr	r2, [pc, #92]	; (80023e4 <MX_USART3_UART_Init+0x64>)
 8002388:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800238a:	4b15      	ldr	r3, [pc, #84]	; (80023e0 <MX_USART3_UART_Init+0x60>)
 800238c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002390:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002392:	4b13      	ldr	r3, [pc, #76]	; (80023e0 <MX_USART3_UART_Init+0x60>)
 8002394:	2200      	movs	r2, #0
 8002396:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002398:	4b11      	ldr	r3, [pc, #68]	; (80023e0 <MX_USART3_UART_Init+0x60>)
 800239a:	2200      	movs	r2, #0
 800239c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800239e:	4b10      	ldr	r3, [pc, #64]	; (80023e0 <MX_USART3_UART_Init+0x60>)
 80023a0:	2200      	movs	r2, #0
 80023a2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80023a4:	4b0e      	ldr	r3, [pc, #56]	; (80023e0 <MX_USART3_UART_Init+0x60>)
 80023a6:	220c      	movs	r2, #12
 80023a8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80023aa:	4b0d      	ldr	r3, [pc, #52]	; (80023e0 <MX_USART3_UART_Init+0x60>)
 80023ac:	2200      	movs	r2, #0
 80023ae:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80023b0:	4b0b      	ldr	r3, [pc, #44]	; (80023e0 <MX_USART3_UART_Init+0x60>)
 80023b2:	2200      	movs	r2, #0
 80023b4:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80023b6:	4b0a      	ldr	r3, [pc, #40]	; (80023e0 <MX_USART3_UART_Init+0x60>)
 80023b8:	2200      	movs	r2, #0
 80023ba:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_RXOVERRUNDISABLE_INIT;
 80023bc:	4b08      	ldr	r3, [pc, #32]	; (80023e0 <MX_USART3_UART_Init+0x60>)
 80023be:	2210      	movs	r2, #16
 80023c0:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.OverrunDisable = UART_ADVFEATURE_OVERRUN_DISABLE;
 80023c2:	4b07      	ldr	r3, [pc, #28]	; (80023e0 <MX_USART3_UART_Init+0x60>)
 80023c4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80023c8:	639a      	str	r2, [r3, #56]	; 0x38
  if (HAL_HalfDuplex_Init(&huart3) != HAL_OK)
 80023ca:	4805      	ldr	r0, [pc, #20]	; (80023e0 <MX_USART3_UART_Init+0x60>)
 80023cc:	f005 fa30 	bl	8007830 <HAL_HalfDuplex_Init>
 80023d0:	4603      	mov	r3, r0
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d001      	beq.n	80023da <MX_USART3_UART_Init+0x5a>
  {
    Error_Handler();
 80023d6:	f7ff fa8a 	bl	80018ee <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80023da:	bf00      	nop
 80023dc:	bd80      	pop	{r7, pc}
 80023de:	bf00      	nop
 80023e0:	2000a51c 	.word	0x2000a51c
 80023e4:	40004800 	.word	0x40004800

080023e8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80023e8:	b580      	push	{r7, lr}
 80023ea:	b0ae      	sub	sp, #184	; 0xb8
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023f0:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80023f4:	2200      	movs	r2, #0
 80023f6:	601a      	str	r2, [r3, #0]
 80023f8:	605a      	str	r2, [r3, #4]
 80023fa:	609a      	str	r2, [r3, #8]
 80023fc:	60da      	str	r2, [r3, #12]
 80023fe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002400:	f107 031c 	add.w	r3, r7, #28
 8002404:	2288      	movs	r2, #136	; 0x88
 8002406:	2100      	movs	r1, #0
 8002408:	4618      	mov	r0, r3
 800240a:	f007 fc4f 	bl	8009cac <memset>
  if(uartHandle->Instance==USART2)
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	4a42      	ldr	r2, [pc, #264]	; (800251c <HAL_UART_MspInit+0x134>)
 8002414:	4293      	cmp	r3, r2
 8002416:	d13c      	bne.n	8002492 <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002418:	2302      	movs	r3, #2
 800241a:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800241c:	2300      	movs	r3, #0
 800241e:	65bb      	str	r3, [r7, #88]	; 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002420:	f107 031c 	add.w	r3, r7, #28
 8002424:	4618      	mov	r0, r3
 8002426:	f001 ff77 	bl	8004318 <HAL_RCCEx_PeriphCLKConfig>
 800242a:	4603      	mov	r3, r0
 800242c:	2b00      	cmp	r3, #0
 800242e:	d001      	beq.n	8002434 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002430:	f7ff fa5d 	bl	80018ee <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002434:	4b3a      	ldr	r3, [pc, #232]	; (8002520 <HAL_UART_MspInit+0x138>)
 8002436:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002438:	4a39      	ldr	r2, [pc, #228]	; (8002520 <HAL_UART_MspInit+0x138>)
 800243a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800243e:	6593      	str	r3, [r2, #88]	; 0x58
 8002440:	4b37      	ldr	r3, [pc, #220]	; (8002520 <HAL_UART_MspInit+0x138>)
 8002442:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002444:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002448:	61bb      	str	r3, [r7, #24]
 800244a:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800244c:	4b34      	ldr	r3, [pc, #208]	; (8002520 <HAL_UART_MspInit+0x138>)
 800244e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002450:	4a33      	ldr	r2, [pc, #204]	; (8002520 <HAL_UART_MspInit+0x138>)
 8002452:	f043 0301 	orr.w	r3, r3, #1
 8002456:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002458:	4b31      	ldr	r3, [pc, #196]	; (8002520 <HAL_UART_MspInit+0x138>)
 800245a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800245c:	f003 0301 	and.w	r3, r3, #1
 8002460:	617b      	str	r3, [r7, #20]
 8002462:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002464:	230c      	movs	r3, #12
 8002466:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800246a:	2302      	movs	r3, #2
 800246c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002470:	2300      	movs	r3, #0
 8002472:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002476:	2303      	movs	r3, #3
 8002478:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800247c:	2307      	movs	r3, #7
 800247e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002482:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002486:	4619      	mov	r1, r3
 8002488:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800248c:	f000 ff1e 	bl	80032cc <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8002490:	e03f      	b.n	8002512 <HAL_UART_MspInit+0x12a>
  else if(uartHandle->Instance==USART3)
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	4a23      	ldr	r2, [pc, #140]	; (8002524 <HAL_UART_MspInit+0x13c>)
 8002498:	4293      	cmp	r3, r2
 800249a:	d13a      	bne.n	8002512 <HAL_UART_MspInit+0x12a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 800249c:	2304      	movs	r3, #4
 800249e:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80024a0:	2300      	movs	r3, #0
 80024a2:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80024a4:	f107 031c 	add.w	r3, r7, #28
 80024a8:	4618      	mov	r0, r3
 80024aa:	f001 ff35 	bl	8004318 <HAL_RCCEx_PeriphCLKConfig>
 80024ae:	4603      	mov	r3, r0
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d001      	beq.n	80024b8 <HAL_UART_MspInit+0xd0>
      Error_Handler();
 80024b4:	f7ff fa1b 	bl	80018ee <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 80024b8:	4b19      	ldr	r3, [pc, #100]	; (8002520 <HAL_UART_MspInit+0x138>)
 80024ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024bc:	4a18      	ldr	r2, [pc, #96]	; (8002520 <HAL_UART_MspInit+0x138>)
 80024be:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80024c2:	6593      	str	r3, [r2, #88]	; 0x58
 80024c4:	4b16      	ldr	r3, [pc, #88]	; (8002520 <HAL_UART_MspInit+0x138>)
 80024c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024c8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80024cc:	613b      	str	r3, [r7, #16]
 80024ce:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80024d0:	4b13      	ldr	r3, [pc, #76]	; (8002520 <HAL_UART_MspInit+0x138>)
 80024d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024d4:	4a12      	ldr	r2, [pc, #72]	; (8002520 <HAL_UART_MspInit+0x138>)
 80024d6:	f043 0304 	orr.w	r3, r3, #4
 80024da:	64d3      	str	r3, [r2, #76]	; 0x4c
 80024dc:	4b10      	ldr	r3, [pc, #64]	; (8002520 <HAL_UART_MspInit+0x138>)
 80024de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024e0:	f003 0304 	and.w	r3, r3, #4
 80024e4:	60fb      	str	r3, [r7, #12]
 80024e6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80024e8:	2310      	movs	r3, #16
 80024ea:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80024ee:	2312      	movs	r3, #18
 80024f0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80024f4:	2301      	movs	r3, #1
 80024f6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80024fa:	2303      	movs	r3, #3
 80024fc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002500:	2307      	movs	r3, #7
 8002502:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002506:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800250a:	4619      	mov	r1, r3
 800250c:	4806      	ldr	r0, [pc, #24]	; (8002528 <HAL_UART_MspInit+0x140>)
 800250e:	f000 fedd 	bl	80032cc <HAL_GPIO_Init>
}
 8002512:	bf00      	nop
 8002514:	37b8      	adds	r7, #184	; 0xb8
 8002516:	46bd      	mov	sp, r7
 8002518:	bd80      	pop	{r7, pc}
 800251a:	bf00      	nop
 800251c:	40004400 	.word	0x40004400
 8002520:	40021000 	.word	0x40021000
 8002524:	40004800 	.word	0x40004800
 8002528:	48000800 	.word	0x48000800

0800252c <set_baudrate>:
{
  return HAL_TIM_Base_Start(&htim6);
}

static void set_baudrate(uint32_t baudrate)
{
 800252c:	b580      	push	{r7, lr}
 800252e:	b082      	sub	sp, #8
 8002530:	af00      	add	r7, sp, #0
 8002532:	6078      	str	r0, [r7, #4]
  huart3.Instance = USART3;
 8002534:	4b16      	ldr	r3, [pc, #88]	; (8002590 <set_baudrate+0x64>)
 8002536:	4a17      	ldr	r2, [pc, #92]	; (8002594 <set_baudrate+0x68>)
 8002538:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = baudrate;
 800253a:	4a15      	ldr	r2, [pc, #84]	; (8002590 <set_baudrate+0x64>)
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	6053      	str	r3, [r2, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002540:	4b13      	ldr	r3, [pc, #76]	; (8002590 <set_baudrate+0x64>)
 8002542:	2200      	movs	r2, #0
 8002544:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002546:	4b12      	ldr	r3, [pc, #72]	; (8002590 <set_baudrate+0x64>)
 8002548:	2200      	movs	r2, #0
 800254a:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800254c:	4b10      	ldr	r3, [pc, #64]	; (8002590 <set_baudrate+0x64>)
 800254e:	2200      	movs	r2, #0
 8002550:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002552:	4b0f      	ldr	r3, [pc, #60]	; (8002590 <set_baudrate+0x64>)
 8002554:	220c      	movs	r2, #12
 8002556:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002558:	4b0d      	ldr	r3, [pc, #52]	; (8002590 <set_baudrate+0x64>)
 800255a:	2200      	movs	r2, #0
 800255c:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800255e:	4b0c      	ldr	r3, [pc, #48]	; (8002590 <set_baudrate+0x64>)
 8002560:	2200      	movs	r2, #0
 8002562:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002564:	4b0a      	ldr	r3, [pc, #40]	; (8002590 <set_baudrate+0x64>)
 8002566:	2200      	movs	r2, #0
 8002568:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800256a:	4b09      	ldr	r3, [pc, #36]	; (8002590 <set_baudrate+0x64>)
 800256c:	2200      	movs	r2, #0
 800256e:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.OverrunDisable = UART_ADVFEATURE_OVERRUN_DISABLE;
 8002570:	4b07      	ldr	r3, [pc, #28]	; (8002590 <set_baudrate+0x64>)
 8002572:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002576:	639a      	str	r2, [r3, #56]	; 0x38

  if (HAL_HalfDuplex_Init(&huart3) != HAL_OK)
 8002578:	4805      	ldr	r0, [pc, #20]	; (8002590 <set_baudrate+0x64>)
 800257a:	f005 f959 	bl	8007830 <HAL_HalfDuplex_Init>
 800257e:	4603      	mov	r3, r0
 8002580:	2b00      	cmp	r3, #0
 8002582:	d001      	beq.n	8002588 <set_baudrate+0x5c>
  {
    Error_Handler();
 8002584:	f7ff f9b3 	bl	80018ee <Error_Handler>
  }
}
 8002588:	bf00      	nop
 800258a:	3708      	adds	r7, #8
 800258c:	46bd      	mov	sp, r7
 800258e:	bd80      	pop	{r7, pc}
 8002590:	2000a51c 	.word	0x2000a51c
 8002594:	40004800 	.word	0x40004800

08002598 <wire_reset>:

HAL_StatusTypeDef wire_reset(void)
{
 8002598:	b580      	push	{r7, lr}
 800259a:	b082      	sub	sp, #8
 800259c:	af00      	add	r7, sp, #0
  uint8_t data_out = 0xF0;
 800259e:	23f0      	movs	r3, #240	; 0xf0
 80025a0:	71fb      	strb	r3, [r7, #7]
  uint8_t data_in = 0;
 80025a2:	2300      	movs	r3, #0
 80025a4:	71bb      	strb	r3, [r7, #6]

  set_baudrate(9600);
 80025a6:	f44f 5016 	mov.w	r0, #9600	; 0x2580
 80025aa:	f7ff ffbf 	bl	800252c <set_baudrate>
  HAL_UART_Transmit(&huart3, &data_out, 1, HAL_MAX_DELAY);
 80025ae:	1df9      	adds	r1, r7, #7
 80025b0:	f04f 33ff 	mov.w	r3, #4294967295
 80025b4:	2201      	movs	r2, #1
 80025b6:	480c      	ldr	r0, [pc, #48]	; (80025e8 <wire_reset+0x50>)
 80025b8:	f005 f990 	bl	80078dc <HAL_UART_Transmit>
  HAL_UART_Receive(&huart3, &data_in, 1, HAL_MAX_DELAY);
 80025bc:	1db9      	adds	r1, r7, #6
 80025be:	f04f 33ff 	mov.w	r3, #4294967295
 80025c2:	2201      	movs	r2, #1
 80025c4:	4808      	ldr	r0, [pc, #32]	; (80025e8 <wire_reset+0x50>)
 80025c6:	f005 fa13 	bl	80079f0 <HAL_UART_Receive>
  set_baudrate(115200);
 80025ca:	f44f 30e1 	mov.w	r0, #115200	; 0x1c200
 80025ce:	f7ff ffad 	bl	800252c <set_baudrate>

  if (data_in != 0xF0)
 80025d2:	79bb      	ldrb	r3, [r7, #6]
 80025d4:	2bf0      	cmp	r3, #240	; 0xf0
 80025d6:	d001      	beq.n	80025dc <wire_reset+0x44>
    return HAL_OK;
 80025d8:	2300      	movs	r3, #0
 80025da:	e000      	b.n	80025de <wire_reset+0x46>
  else
    return HAL_ERROR;
 80025dc:	2301      	movs	r3, #1
}
 80025de:	4618      	mov	r0, r3
 80025e0:	3708      	adds	r7, #8
 80025e2:	46bd      	mov	sp, r7
 80025e4:	bd80      	pop	{r7, pc}
 80025e6:	bf00      	nop
 80025e8:	2000a51c 	.word	0x2000a51c

080025ec <write_bit>:

static void write_bit(int value)
{
 80025ec:	b580      	push	{r7, lr}
 80025ee:	b084      	sub	sp, #16
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	6078      	str	r0, [r7, #4]
  if (value) {
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d00a      	beq.n	8002610 <write_bit+0x24>
      uint8_t data_out = 0xff;
 80025fa:	23ff      	movs	r3, #255	; 0xff
 80025fc:	73fb      	strb	r3, [r7, #15]
    HAL_UART_Transmit(&huart3, &data_out, 1, HAL_MAX_DELAY);
 80025fe:	f107 010f 	add.w	r1, r7, #15
 8002602:	f04f 33ff 	mov.w	r3, #4294967295
 8002606:	2201      	movs	r2, #1
 8002608:	4808      	ldr	r0, [pc, #32]	; (800262c <write_bit+0x40>)
 800260a:	f005 f967 	bl	80078dc <HAL_UART_Transmit>
  } else {
      uint8_t data_out = 0x0;
    HAL_UART_Transmit(&huart3, &data_out, 1, HAL_MAX_DELAY);
  }
}
 800260e:	e009      	b.n	8002624 <write_bit+0x38>
      uint8_t data_out = 0x0;
 8002610:	2300      	movs	r3, #0
 8002612:	73bb      	strb	r3, [r7, #14]
    HAL_UART_Transmit(&huart3, &data_out, 1, HAL_MAX_DELAY);
 8002614:	f107 010e 	add.w	r1, r7, #14
 8002618:	f04f 33ff 	mov.w	r3, #4294967295
 800261c:	2201      	movs	r2, #1
 800261e:	4803      	ldr	r0, [pc, #12]	; (800262c <write_bit+0x40>)
 8002620:	f005 f95c 	bl	80078dc <HAL_UART_Transmit>
}
 8002624:	bf00      	nop
 8002626:	3710      	adds	r7, #16
 8002628:	46bd      	mov	sp, r7
 800262a:	bd80      	pop	{r7, pc}
 800262c:	2000a51c 	.word	0x2000a51c

08002630 <read_bit>:

static int read_bit(void)
{
 8002630:	b580      	push	{r7, lr}
 8002632:	b082      	sub	sp, #8
 8002634:	af00      	add	r7, sp, #0
  uint8_t data_out = 0xFF;
 8002636:	23ff      	movs	r3, #255	; 0xff
 8002638:	71fb      	strb	r3, [r7, #7]
  uint8_t data_in = 0;
 800263a:	2300      	movs	r3, #0
 800263c:	71bb      	strb	r3, [r7, #6]
  HAL_UART_Transmit(&huart3, &data_out, 1, HAL_MAX_DELAY);
 800263e:	1df9      	adds	r1, r7, #7
 8002640:	f04f 33ff 	mov.w	r3, #4294967295
 8002644:	2201      	movs	r2, #1
 8002646:	4808      	ldr	r0, [pc, #32]	; (8002668 <read_bit+0x38>)
 8002648:	f005 f948 	bl	80078dc <HAL_UART_Transmit>
  HAL_UART_Receive(&huart3, &data_in, 1, HAL_MAX_DELAY);
 800264c:	1db9      	adds	r1, r7, #6
 800264e:	f04f 33ff 	mov.w	r3, #4294967295
 8002652:	2201      	movs	r2, #1
 8002654:	4804      	ldr	r0, [pc, #16]	; (8002668 <read_bit+0x38>)
 8002656:	f005 f9cb 	bl	80079f0 <HAL_UART_Receive>

  return data_in & 0x01;
 800265a:	79bb      	ldrb	r3, [r7, #6]
 800265c:	f003 0301 	and.w	r3, r3, #1
}
 8002660:	4618      	mov	r0, r3
 8002662:	3708      	adds	r7, #8
 8002664:	46bd      	mov	sp, r7
 8002666:	bd80      	pop	{r7, pc}
 8002668:	2000a51c 	.word	0x2000a51c

0800266c <wire_read>:

uint8_t wire_read(void)
{
 800266c:	b580      	push	{r7, lr}
 800266e:	b082      	sub	sp, #8
 8002670:	af00      	add	r7, sp, #0
  uint8_t value = 0;
 8002672:	2300      	movs	r3, #0
 8002674:	71fb      	strb	r3, [r7, #7]
  int i;
  for (i = 0; i < 8; i++) {
 8002676:	2300      	movs	r3, #0
 8002678:	603b      	str	r3, [r7, #0]
 800267a:	e00e      	b.n	800269a <wire_read+0x2e>
    value >>= 1;
 800267c:	79fb      	ldrb	r3, [r7, #7]
 800267e:	085b      	lsrs	r3, r3, #1
 8002680:	71fb      	strb	r3, [r7, #7]
    if (read_bit())
 8002682:	f7ff ffd5 	bl	8002630 <read_bit>
 8002686:	4603      	mov	r3, r0
 8002688:	2b00      	cmp	r3, #0
 800268a:	d003      	beq.n	8002694 <wire_read+0x28>
      value |= 0x80;
 800268c:	79fb      	ldrb	r3, [r7, #7]
 800268e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002692:	71fb      	strb	r3, [r7, #7]
  for (i = 0; i < 8; i++) {
 8002694:	683b      	ldr	r3, [r7, #0]
 8002696:	3301      	adds	r3, #1
 8002698:	603b      	str	r3, [r7, #0]
 800269a:	683b      	ldr	r3, [r7, #0]
 800269c:	2b07      	cmp	r3, #7
 800269e:	dded      	ble.n	800267c <wire_read+0x10>
  }
  return value;
 80026a0:	79fb      	ldrb	r3, [r7, #7]
}
 80026a2:	4618      	mov	r0, r3
 80026a4:	3708      	adds	r7, #8
 80026a6:	46bd      	mov	sp, r7
 80026a8:	bd80      	pop	{r7, pc}

080026aa <wire_write>:

void wire_write(uint8_t byte)
{
 80026aa:	b580      	push	{r7, lr}
 80026ac:	b084      	sub	sp, #16
 80026ae:	af00      	add	r7, sp, #0
 80026b0:	4603      	mov	r3, r0
 80026b2:	71fb      	strb	r3, [r7, #7]
  int i;
  for (i = 0; i < 8; i++) {
 80026b4:	2300      	movs	r3, #0
 80026b6:	60fb      	str	r3, [r7, #12]
 80026b8:	e00b      	b.n	80026d2 <wire_write+0x28>
    write_bit(byte & 0x01);
 80026ba:	79fb      	ldrb	r3, [r7, #7]
 80026bc:	f003 0301 	and.w	r3, r3, #1
 80026c0:	4618      	mov	r0, r3
 80026c2:	f7ff ff93 	bl	80025ec <write_bit>
    byte >>= 1;
 80026c6:	79fb      	ldrb	r3, [r7, #7]
 80026c8:	085b      	lsrs	r3, r3, #1
 80026ca:	71fb      	strb	r3, [r7, #7]
  for (i = 0; i < 8; i++) {
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	3301      	adds	r3, #1
 80026d0:	60fb      	str	r3, [r7, #12]
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	2b07      	cmp	r3, #7
 80026d6:	ddf0      	ble.n	80026ba <wire_write+0x10>
  }
}
 80026d8:	bf00      	nop
 80026da:	bf00      	nop
 80026dc:	3710      	adds	r7, #16
 80026de:	46bd      	mov	sp, r7
 80026e0:	bd80      	pop	{r7, pc}

080026e2 <byte_crc>:

static uint8_t byte_crc(uint8_t crc, uint8_t byte)
{
 80026e2:	b480      	push	{r7}
 80026e4:	b085      	sub	sp, #20
 80026e6:	af00      	add	r7, sp, #0
 80026e8:	4603      	mov	r3, r0
 80026ea:	460a      	mov	r2, r1
 80026ec:	71fb      	strb	r3, [r7, #7]
 80026ee:	4613      	mov	r3, r2
 80026f0:	71bb      	strb	r3, [r7, #6]
  int i;
  for (i = 0; i < 8; i++) {
 80026f2:	2300      	movs	r3, #0
 80026f4:	60fb      	str	r3, [r7, #12]
 80026f6:	e016      	b.n	8002726 <byte_crc+0x44>
    uint8_t b = crc ^ byte;
 80026f8:	79fa      	ldrb	r2, [r7, #7]
 80026fa:	79bb      	ldrb	r3, [r7, #6]
 80026fc:	4053      	eors	r3, r2
 80026fe:	72fb      	strb	r3, [r7, #11]
    crc >>= 1;
 8002700:	79fb      	ldrb	r3, [r7, #7]
 8002702:	085b      	lsrs	r3, r3, #1
 8002704:	71fb      	strb	r3, [r7, #7]
    if (b & 0x01)
 8002706:	7afb      	ldrb	r3, [r7, #11]
 8002708:	f003 0301 	and.w	r3, r3, #1
 800270c:	2b00      	cmp	r3, #0
 800270e:	d004      	beq.n	800271a <byte_crc+0x38>
      crc ^= 0x8c;
 8002710:	79fb      	ldrb	r3, [r7, #7]
 8002712:	f083 0373 	eor.w	r3, r3, #115	; 0x73
 8002716:	43db      	mvns	r3, r3
 8002718:	71fb      	strb	r3, [r7, #7]
    byte >>= 1;
 800271a:	79bb      	ldrb	r3, [r7, #6]
 800271c:	085b      	lsrs	r3, r3, #1
 800271e:	71bb      	strb	r3, [r7, #6]
  for (i = 0; i < 8; i++) {
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	3301      	adds	r3, #1
 8002724:	60fb      	str	r3, [r7, #12]
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	2b07      	cmp	r3, #7
 800272a:	dde5      	ble.n	80026f8 <byte_crc+0x16>
  }
  return crc;
 800272c:	79fb      	ldrb	r3, [r7, #7]
}
 800272e:	4618      	mov	r0, r3
 8002730:	3714      	adds	r7, #20
 8002732:	46bd      	mov	sp, r7
 8002734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002738:	4770      	bx	lr

0800273a <wire_crc>:

uint8_t wire_crc(const uint8_t* data, int len)
{
 800273a:	b580      	push	{r7, lr}
 800273c:	b084      	sub	sp, #16
 800273e:	af00      	add	r7, sp, #0
 8002740:	6078      	str	r0, [r7, #4]
 8002742:	6039      	str	r1, [r7, #0]
  int i;
    uint8_t crc = 0;
 8002744:	2300      	movs	r3, #0
 8002746:	72fb      	strb	r3, [r7, #11]

    for (i = 0; i < len; i++)
 8002748:	2300      	movs	r3, #0
 800274a:	60fb      	str	r3, [r7, #12]
 800274c:	e00d      	b.n	800276a <wire_crc+0x30>
      crc = byte_crc(crc, data[i]);
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	687a      	ldr	r2, [r7, #4]
 8002752:	4413      	add	r3, r2
 8002754:	781a      	ldrb	r2, [r3, #0]
 8002756:	7afb      	ldrb	r3, [r7, #11]
 8002758:	4611      	mov	r1, r2
 800275a:	4618      	mov	r0, r3
 800275c:	f7ff ffc1 	bl	80026e2 <byte_crc>
 8002760:	4603      	mov	r3, r0
 8002762:	72fb      	strb	r3, [r7, #11]
    for (i = 0; i < len; i++)
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	3301      	adds	r3, #1
 8002768:	60fb      	str	r3, [r7, #12]
 800276a:	68fa      	ldr	r2, [r7, #12]
 800276c:	683b      	ldr	r3, [r7, #0]
 800276e:	429a      	cmp	r2, r3
 8002770:	dbed      	blt.n	800274e <wire_crc+0x14>

    return crc;
 8002772:	7afb      	ldrb	r3, [r7, #11]
}
 8002774:	4618      	mov	r0, r3
 8002776:	3710      	adds	r7, #16
 8002778:	46bd      	mov	sp, r7
 800277a:	bd80      	pop	{r7, pc}

0800277c <set_byte>:
#define LED_N			7

static uint8_t led_buffer[RESET_LEN + 24 * LED_N + 1];

static void set_byte(uint32_t pos, uint8_t value)
{
 800277c:	b480      	push	{r7}
 800277e:	b085      	sub	sp, #20
 8002780:	af00      	add	r7, sp, #0
 8002782:	6078      	str	r0, [r7, #4]
 8002784:	460b      	mov	r3, r1
 8002786:	70fb      	strb	r3, [r7, #3]
  int i;
  for (i = 0; i < 8; i++) {
 8002788:	2300      	movs	r3, #0
 800278a:	60fb      	str	r3, [r7, #12]
 800278c:	e016      	b.n	80027bc <set_byte+0x40>
    if (value & 0x80) {
 800278e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002792:	2b00      	cmp	r3, #0
 8002794:	da06      	bge.n	80027a4 <set_byte+0x28>
      led_buffer[pos + i] = BIT_1_TIME;
 8002796:	68fa      	ldr	r2, [r7, #12]
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	4413      	add	r3, r2
 800279c:	4a0c      	ldr	r2, [pc, #48]	; (80027d0 <set_byte+0x54>)
 800279e:	2140      	movs	r1, #64	; 0x40
 80027a0:	54d1      	strb	r1, [r2, r3]
 80027a2:	e005      	b.n	80027b0 <set_byte+0x34>
    } else {
      led_buffer[pos + i] = BIT_0_TIME;
 80027a4:	68fa      	ldr	r2, [r7, #12]
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	4413      	add	r3, r2
 80027aa:	4a09      	ldr	r2, [pc, #36]	; (80027d0 <set_byte+0x54>)
 80027ac:	2120      	movs	r1, #32
 80027ae:	54d1      	strb	r1, [r2, r3]
    }

    value <<= 1;
 80027b0:	78fb      	ldrb	r3, [r7, #3]
 80027b2:	005b      	lsls	r3, r3, #1
 80027b4:	70fb      	strb	r3, [r7, #3]
  for (i = 0; i < 8; i++) {
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	3301      	adds	r3, #1
 80027ba:	60fb      	str	r3, [r7, #12]
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	2b07      	cmp	r3, #7
 80027c0:	dde5      	ble.n	800278e <set_byte+0x12>
  }
}
 80027c2:	bf00      	nop
 80027c4:	bf00      	nop
 80027c6:	3714      	adds	r7, #20
 80027c8:	46bd      	mov	sp, r7
 80027ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ce:	4770      	bx	lr
 80027d0:	2000a5a4 	.word	0x2000a5a4

080027d4 <ws2812b_update>:
  HAL_TIM_Base_Start(&htim3);
  ws2812b_update();
}

void ws2812b_update(void)
{
 80027d4:	b580      	push	{r7, lr}
 80027d6:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start_DMA(&htim3, TIM_CHANNEL_1, (uint32_t*)led_buffer, sizeof(led_buffer));
 80027d8:	23d1      	movs	r3, #209	; 0xd1
 80027da:	4a03      	ldr	r2, [pc, #12]	; (80027e8 <ws2812b_update+0x14>)
 80027dc:	2100      	movs	r1, #0
 80027de:	4803      	ldr	r0, [pc, #12]	; (80027ec <ws2812b_update+0x18>)
 80027e0:	f003 f992 	bl	8005b08 <HAL_TIM_PWM_Start_DMA>
}
 80027e4:	bf00      	nop
 80027e6:	bd80      	pop	{r7, pc}
 80027e8:	2000a5a4 	.word	0x2000a5a4
 80027ec:	2000a31c 	.word	0x2000a31c

080027f0 <ws2812b_set_color>:
	while (HAL_TIM_GetChannelState(&htim3, TIM_CHANNEL_1) == HAL_TIM_CHANNEL_STATE_BUSY)
		{}
}

void ws2812b_set_color(uint32_t led, uint8_t red, uint8_t green, uint8_t blue)
{
 80027f0:	b580      	push	{r7, lr}
 80027f2:	b082      	sub	sp, #8
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	6078      	str	r0, [r7, #4]
 80027f8:	4608      	mov	r0, r1
 80027fa:	4611      	mov	r1, r2
 80027fc:	461a      	mov	r2, r3
 80027fe:	4603      	mov	r3, r0
 8002800:	70fb      	strb	r3, [r7, #3]
 8002802:	460b      	mov	r3, r1
 8002804:	70bb      	strb	r3, [r7, #2]
 8002806:	4613      	mov	r3, r2
 8002808:	707b      	strb	r3, [r7, #1]

	if (led < LED_N)
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	2b06      	cmp	r3, #6
 800280e:	d820      	bhi.n	8002852 <ws2812b_set_color+0x62>
	{
		set_byte(RESET_LEN + 24 * led, green);
 8002810:	687a      	ldr	r2, [r7, #4]
 8002812:	4613      	mov	r3, r2
 8002814:	005b      	lsls	r3, r3, #1
 8002816:	4413      	add	r3, r2
 8002818:	00db      	lsls	r3, r3, #3
 800281a:	3328      	adds	r3, #40	; 0x28
 800281c:	78ba      	ldrb	r2, [r7, #2]
 800281e:	4611      	mov	r1, r2
 8002820:	4618      	mov	r0, r3
 8002822:	f7ff ffab 	bl	800277c <set_byte>
		set_byte(RESET_LEN + 24 * led + 8, red);
 8002826:	687a      	ldr	r2, [r7, #4]
 8002828:	4613      	mov	r3, r2
 800282a:	005b      	lsls	r3, r3, #1
 800282c:	4413      	add	r3, r2
 800282e:	00db      	lsls	r3, r3, #3
 8002830:	3330      	adds	r3, #48	; 0x30
 8002832:	78fa      	ldrb	r2, [r7, #3]
 8002834:	4611      	mov	r1, r2
 8002836:	4618      	mov	r0, r3
 8002838:	f7ff ffa0 	bl	800277c <set_byte>
		set_byte(RESET_LEN + 24 * led + 16, blue);
 800283c:	687a      	ldr	r2, [r7, #4]
 800283e:	4613      	mov	r3, r2
 8002840:	005b      	lsls	r3, r3, #1
 8002842:	4413      	add	r3, r2
 8002844:	00db      	lsls	r3, r3, #3
 8002846:	3338      	adds	r3, #56	; 0x38
 8002848:	787a      	ldrb	r2, [r7, #1]
 800284a:	4611      	mov	r1, r2
 800284c:	4618      	mov	r0, r3
 800284e:	f7ff ff95 	bl	800277c <set_byte>
	}
}
 8002852:	bf00      	nop
 8002854:	3708      	adds	r7, #8
 8002856:	46bd      	mov	sp, r7
 8002858:	bd80      	pop	{r7, pc}

0800285a <ws2812b_set_color_all>:

void ws2812b_set_color_all(uint8_t red, uint8_t green, uint8_t blue)
{
 800285a:	b580      	push	{r7, lr}
 800285c:	b084      	sub	sp, #16
 800285e:	af00      	add	r7, sp, #0
 8002860:	4603      	mov	r3, r0
 8002862:	71fb      	strb	r3, [r7, #7]
 8002864:	460b      	mov	r3, r1
 8002866:	71bb      	strb	r3, [r7, #6]
 8002868:	4613      	mov	r3, r2
 800286a:	717b      	strb	r3, [r7, #5]
	for (int led = 0; led <= 6; led++) {
 800286c:	2300      	movs	r3, #0
 800286e:	60fb      	str	r3, [r7, #12]
 8002870:	e008      	b.n	8002884 <ws2812b_set_color_all+0x2a>
		ws2812b_set_color(led, red, green, blue);
 8002872:	68f8      	ldr	r0, [r7, #12]
 8002874:	797b      	ldrb	r3, [r7, #5]
 8002876:	79ba      	ldrb	r2, [r7, #6]
 8002878:	79f9      	ldrb	r1, [r7, #7]
 800287a:	f7ff ffb9 	bl	80027f0 <ws2812b_set_color>
	for (int led = 0; led <= 6; led++) {
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	3301      	adds	r3, #1
 8002882:	60fb      	str	r3, [r7, #12]
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	2b06      	cmp	r3, #6
 8002888:	ddf3      	ble.n	8002872 <ws2812b_set_color_all+0x18>
	}
}
 800288a:	bf00      	nop
 800288c:	bf00      	nop
 800288e:	3710      	adds	r7, #16
 8002890:	46bd      	mov	sp, r7
 8002892:	bd80      	pop	{r7, pc}

08002894 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8002894:	f8df d034 	ldr.w	sp, [pc, #52]	; 80028cc <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002898:	f7ff fa42 	bl	8001d20 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800289c:	480c      	ldr	r0, [pc, #48]	; (80028d0 <LoopForever+0x6>)
  ldr r1, =_edata
 800289e:	490d      	ldr	r1, [pc, #52]	; (80028d4 <LoopForever+0xa>)
  ldr r2, =_sidata
 80028a0:	4a0d      	ldr	r2, [pc, #52]	; (80028d8 <LoopForever+0xe>)
  movs r3, #0
 80028a2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80028a4:	e002      	b.n	80028ac <LoopCopyDataInit>

080028a6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80028a6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80028a8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80028aa:	3304      	adds	r3, #4

080028ac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80028ac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80028ae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80028b0:	d3f9      	bcc.n	80028a6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80028b2:	4a0a      	ldr	r2, [pc, #40]	; (80028dc <LoopForever+0x12>)
  ldr r4, =_ebss
 80028b4:	4c0a      	ldr	r4, [pc, #40]	; (80028e0 <LoopForever+0x16>)
  movs r3, #0
 80028b6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80028b8:	e001      	b.n	80028be <LoopFillZerobss>

080028ba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80028ba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80028bc:	3204      	adds	r2, #4

080028be <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80028be:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80028c0:	d3fb      	bcc.n	80028ba <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80028c2:	f007 fa4b 	bl	8009d5c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80028c6:	f7fe ff87 	bl	80017d8 <main>

080028ca <LoopForever>:

LoopForever:
    b LoopForever
 80028ca:	e7fe      	b.n	80028ca <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80028cc:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80028d0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80028d4:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 80028d8:	080104b0 	.word	0x080104b0
  ldr r2, =_sbss
 80028dc:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 80028e0:	2000a7c8 	.word	0x2000a7c8

080028e4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80028e4:	e7fe      	b.n	80028e4 <ADC1_2_IRQHandler>
	...

080028e8 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80028e8:	b580      	push	{r7, lr}
 80028ea:	b082      	sub	sp, #8
 80028ec:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80028ee:	2300      	movs	r3, #0
 80028f0:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80028f2:	4b0c      	ldr	r3, [pc, #48]	; (8002924 <HAL_Init+0x3c>)
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	4a0b      	ldr	r2, [pc, #44]	; (8002924 <HAL_Init+0x3c>)
 80028f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80028fc:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80028fe:	2003      	movs	r0, #3
 8002900:	f000 f962 	bl	8002bc8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002904:	2000      	movs	r0, #0
 8002906:	f000 f80f 	bl	8002928 <HAL_InitTick>
 800290a:	4603      	mov	r3, r0
 800290c:	2b00      	cmp	r3, #0
 800290e:	d002      	beq.n	8002916 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8002910:	2301      	movs	r3, #1
 8002912:	71fb      	strb	r3, [r7, #7]
 8002914:	e001      	b.n	800291a <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002916:	f7ff f8bd 	bl	8001a94 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800291a:	79fb      	ldrb	r3, [r7, #7]
}
 800291c:	4618      	mov	r0, r3
 800291e:	3708      	adds	r7, #8
 8002920:	46bd      	mov	sp, r7
 8002922:	bd80      	pop	{r7, pc}
 8002924:	40022000 	.word	0x40022000

08002928 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002928:	b580      	push	{r7, lr}
 800292a:	b084      	sub	sp, #16
 800292c:	af00      	add	r7, sp, #0
 800292e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002930:	2300      	movs	r3, #0
 8002932:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8002934:	4b17      	ldr	r3, [pc, #92]	; (8002994 <HAL_InitTick+0x6c>)
 8002936:	781b      	ldrb	r3, [r3, #0]
 8002938:	2b00      	cmp	r3, #0
 800293a:	d023      	beq.n	8002984 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 800293c:	4b16      	ldr	r3, [pc, #88]	; (8002998 <HAL_InitTick+0x70>)
 800293e:	681a      	ldr	r2, [r3, #0]
 8002940:	4b14      	ldr	r3, [pc, #80]	; (8002994 <HAL_InitTick+0x6c>)
 8002942:	781b      	ldrb	r3, [r3, #0]
 8002944:	4619      	mov	r1, r3
 8002946:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800294a:	fbb3 f3f1 	udiv	r3, r3, r1
 800294e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002952:	4618      	mov	r0, r3
 8002954:	f000 f96d 	bl	8002c32 <HAL_SYSTICK_Config>
 8002958:	4603      	mov	r3, r0
 800295a:	2b00      	cmp	r3, #0
 800295c:	d10f      	bne.n	800297e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	2b0f      	cmp	r3, #15
 8002962:	d809      	bhi.n	8002978 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002964:	2200      	movs	r2, #0
 8002966:	6879      	ldr	r1, [r7, #4]
 8002968:	f04f 30ff 	mov.w	r0, #4294967295
 800296c:	f000 f937 	bl	8002bde <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002970:	4a0a      	ldr	r2, [pc, #40]	; (800299c <HAL_InitTick+0x74>)
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	6013      	str	r3, [r2, #0]
 8002976:	e007      	b.n	8002988 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8002978:	2301      	movs	r3, #1
 800297a:	73fb      	strb	r3, [r7, #15]
 800297c:	e004      	b.n	8002988 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800297e:	2301      	movs	r3, #1
 8002980:	73fb      	strb	r3, [r7, #15]
 8002982:	e001      	b.n	8002988 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002984:	2301      	movs	r3, #1
 8002986:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002988:	7bfb      	ldrb	r3, [r7, #15]
}
 800298a:	4618      	mov	r0, r3
 800298c:	3710      	adds	r7, #16
 800298e:	46bd      	mov	sp, r7
 8002990:	bd80      	pop	{r7, pc}
 8002992:	bf00      	nop
 8002994:	2000000c 	.word	0x2000000c
 8002998:	20000004 	.word	0x20000004
 800299c:	20000008 	.word	0x20000008

080029a0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80029a0:	b480      	push	{r7}
 80029a2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80029a4:	4b06      	ldr	r3, [pc, #24]	; (80029c0 <HAL_IncTick+0x20>)
 80029a6:	781b      	ldrb	r3, [r3, #0]
 80029a8:	461a      	mov	r2, r3
 80029aa:	4b06      	ldr	r3, [pc, #24]	; (80029c4 <HAL_IncTick+0x24>)
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	4413      	add	r3, r2
 80029b0:	4a04      	ldr	r2, [pc, #16]	; (80029c4 <HAL_IncTick+0x24>)
 80029b2:	6013      	str	r3, [r2, #0]
}
 80029b4:	bf00      	nop
 80029b6:	46bd      	mov	sp, r7
 80029b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029bc:	4770      	bx	lr
 80029be:	bf00      	nop
 80029c0:	2000000c 	.word	0x2000000c
 80029c4:	2000a678 	.word	0x2000a678

080029c8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80029c8:	b480      	push	{r7}
 80029ca:	af00      	add	r7, sp, #0
  return uwTick;
 80029cc:	4b03      	ldr	r3, [pc, #12]	; (80029dc <HAL_GetTick+0x14>)
 80029ce:	681b      	ldr	r3, [r3, #0]
}
 80029d0:	4618      	mov	r0, r3
 80029d2:	46bd      	mov	sp, r7
 80029d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d8:	4770      	bx	lr
 80029da:	bf00      	nop
 80029dc:	2000a678 	.word	0x2000a678

080029e0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80029e0:	b580      	push	{r7, lr}
 80029e2:	b084      	sub	sp, #16
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80029e8:	f7ff ffee 	bl	80029c8 <HAL_GetTick>
 80029ec:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029f8:	d005      	beq.n	8002a06 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80029fa:	4b0a      	ldr	r3, [pc, #40]	; (8002a24 <HAL_Delay+0x44>)
 80029fc:	781b      	ldrb	r3, [r3, #0]
 80029fe:	461a      	mov	r2, r3
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	4413      	add	r3, r2
 8002a04:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002a06:	bf00      	nop
 8002a08:	f7ff ffde 	bl	80029c8 <HAL_GetTick>
 8002a0c:	4602      	mov	r2, r0
 8002a0e:	68bb      	ldr	r3, [r7, #8]
 8002a10:	1ad3      	subs	r3, r2, r3
 8002a12:	68fa      	ldr	r2, [r7, #12]
 8002a14:	429a      	cmp	r2, r3
 8002a16:	d8f7      	bhi.n	8002a08 <HAL_Delay+0x28>
  {
  }
}
 8002a18:	bf00      	nop
 8002a1a:	bf00      	nop
 8002a1c:	3710      	adds	r7, #16
 8002a1e:	46bd      	mov	sp, r7
 8002a20:	bd80      	pop	{r7, pc}
 8002a22:	bf00      	nop
 8002a24:	2000000c 	.word	0x2000000c

08002a28 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a28:	b480      	push	{r7}
 8002a2a:	b085      	sub	sp, #20
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	f003 0307 	and.w	r3, r3, #7
 8002a36:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002a38:	4b0c      	ldr	r3, [pc, #48]	; (8002a6c <__NVIC_SetPriorityGrouping+0x44>)
 8002a3a:	68db      	ldr	r3, [r3, #12]
 8002a3c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002a3e:	68ba      	ldr	r2, [r7, #8]
 8002a40:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002a44:	4013      	ands	r3, r2
 8002a46:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002a4c:	68bb      	ldr	r3, [r7, #8]
 8002a4e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002a50:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002a54:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002a58:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002a5a:	4a04      	ldr	r2, [pc, #16]	; (8002a6c <__NVIC_SetPriorityGrouping+0x44>)
 8002a5c:	68bb      	ldr	r3, [r7, #8]
 8002a5e:	60d3      	str	r3, [r2, #12]
}
 8002a60:	bf00      	nop
 8002a62:	3714      	adds	r7, #20
 8002a64:	46bd      	mov	sp, r7
 8002a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a6a:	4770      	bx	lr
 8002a6c:	e000ed00 	.word	0xe000ed00

08002a70 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002a70:	b480      	push	{r7}
 8002a72:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002a74:	4b04      	ldr	r3, [pc, #16]	; (8002a88 <__NVIC_GetPriorityGrouping+0x18>)
 8002a76:	68db      	ldr	r3, [r3, #12]
 8002a78:	0a1b      	lsrs	r3, r3, #8
 8002a7a:	f003 0307 	and.w	r3, r3, #7
}
 8002a7e:	4618      	mov	r0, r3
 8002a80:	46bd      	mov	sp, r7
 8002a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a86:	4770      	bx	lr
 8002a88:	e000ed00 	.word	0xe000ed00

08002a8c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a8c:	b480      	push	{r7}
 8002a8e:	b083      	sub	sp, #12
 8002a90:	af00      	add	r7, sp, #0
 8002a92:	4603      	mov	r3, r0
 8002a94:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	db0b      	blt.n	8002ab6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002a9e:	79fb      	ldrb	r3, [r7, #7]
 8002aa0:	f003 021f 	and.w	r2, r3, #31
 8002aa4:	4907      	ldr	r1, [pc, #28]	; (8002ac4 <__NVIC_EnableIRQ+0x38>)
 8002aa6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002aaa:	095b      	lsrs	r3, r3, #5
 8002aac:	2001      	movs	r0, #1
 8002aae:	fa00 f202 	lsl.w	r2, r0, r2
 8002ab2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002ab6:	bf00      	nop
 8002ab8:	370c      	adds	r7, #12
 8002aba:	46bd      	mov	sp, r7
 8002abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac0:	4770      	bx	lr
 8002ac2:	bf00      	nop
 8002ac4:	e000e100 	.word	0xe000e100

08002ac8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002ac8:	b480      	push	{r7}
 8002aca:	b083      	sub	sp, #12
 8002acc:	af00      	add	r7, sp, #0
 8002ace:	4603      	mov	r3, r0
 8002ad0:	6039      	str	r1, [r7, #0]
 8002ad2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002ad4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	db0a      	blt.n	8002af2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002adc:	683b      	ldr	r3, [r7, #0]
 8002ade:	b2da      	uxtb	r2, r3
 8002ae0:	490c      	ldr	r1, [pc, #48]	; (8002b14 <__NVIC_SetPriority+0x4c>)
 8002ae2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ae6:	0112      	lsls	r2, r2, #4
 8002ae8:	b2d2      	uxtb	r2, r2
 8002aea:	440b      	add	r3, r1
 8002aec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002af0:	e00a      	b.n	8002b08 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002af2:	683b      	ldr	r3, [r7, #0]
 8002af4:	b2da      	uxtb	r2, r3
 8002af6:	4908      	ldr	r1, [pc, #32]	; (8002b18 <__NVIC_SetPriority+0x50>)
 8002af8:	79fb      	ldrb	r3, [r7, #7]
 8002afa:	f003 030f 	and.w	r3, r3, #15
 8002afe:	3b04      	subs	r3, #4
 8002b00:	0112      	lsls	r2, r2, #4
 8002b02:	b2d2      	uxtb	r2, r2
 8002b04:	440b      	add	r3, r1
 8002b06:	761a      	strb	r2, [r3, #24]
}
 8002b08:	bf00      	nop
 8002b0a:	370c      	adds	r7, #12
 8002b0c:	46bd      	mov	sp, r7
 8002b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b12:	4770      	bx	lr
 8002b14:	e000e100 	.word	0xe000e100
 8002b18:	e000ed00 	.word	0xe000ed00

08002b1c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002b1c:	b480      	push	{r7}
 8002b1e:	b089      	sub	sp, #36	; 0x24
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	60f8      	str	r0, [r7, #12]
 8002b24:	60b9      	str	r1, [r7, #8]
 8002b26:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	f003 0307 	and.w	r3, r3, #7
 8002b2e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002b30:	69fb      	ldr	r3, [r7, #28]
 8002b32:	f1c3 0307 	rsb	r3, r3, #7
 8002b36:	2b04      	cmp	r3, #4
 8002b38:	bf28      	it	cs
 8002b3a:	2304      	movcs	r3, #4
 8002b3c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002b3e:	69fb      	ldr	r3, [r7, #28]
 8002b40:	3304      	adds	r3, #4
 8002b42:	2b06      	cmp	r3, #6
 8002b44:	d902      	bls.n	8002b4c <NVIC_EncodePriority+0x30>
 8002b46:	69fb      	ldr	r3, [r7, #28]
 8002b48:	3b03      	subs	r3, #3
 8002b4a:	e000      	b.n	8002b4e <NVIC_EncodePriority+0x32>
 8002b4c:	2300      	movs	r3, #0
 8002b4e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b50:	f04f 32ff 	mov.w	r2, #4294967295
 8002b54:	69bb      	ldr	r3, [r7, #24]
 8002b56:	fa02 f303 	lsl.w	r3, r2, r3
 8002b5a:	43da      	mvns	r2, r3
 8002b5c:	68bb      	ldr	r3, [r7, #8]
 8002b5e:	401a      	ands	r2, r3
 8002b60:	697b      	ldr	r3, [r7, #20]
 8002b62:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002b64:	f04f 31ff 	mov.w	r1, #4294967295
 8002b68:	697b      	ldr	r3, [r7, #20]
 8002b6a:	fa01 f303 	lsl.w	r3, r1, r3
 8002b6e:	43d9      	mvns	r1, r3
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b74:	4313      	orrs	r3, r2
         );
}
 8002b76:	4618      	mov	r0, r3
 8002b78:	3724      	adds	r7, #36	; 0x24
 8002b7a:	46bd      	mov	sp, r7
 8002b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b80:	4770      	bx	lr
	...

08002b84 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002b84:	b580      	push	{r7, lr}
 8002b86:	b082      	sub	sp, #8
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	3b01      	subs	r3, #1
 8002b90:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002b94:	d301      	bcc.n	8002b9a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002b96:	2301      	movs	r3, #1
 8002b98:	e00f      	b.n	8002bba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002b9a:	4a0a      	ldr	r2, [pc, #40]	; (8002bc4 <SysTick_Config+0x40>)
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	3b01      	subs	r3, #1
 8002ba0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002ba2:	210f      	movs	r1, #15
 8002ba4:	f04f 30ff 	mov.w	r0, #4294967295
 8002ba8:	f7ff ff8e 	bl	8002ac8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002bac:	4b05      	ldr	r3, [pc, #20]	; (8002bc4 <SysTick_Config+0x40>)
 8002bae:	2200      	movs	r2, #0
 8002bb0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002bb2:	4b04      	ldr	r3, [pc, #16]	; (8002bc4 <SysTick_Config+0x40>)
 8002bb4:	2207      	movs	r2, #7
 8002bb6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002bb8:	2300      	movs	r3, #0
}
 8002bba:	4618      	mov	r0, r3
 8002bbc:	3708      	adds	r7, #8
 8002bbe:	46bd      	mov	sp, r7
 8002bc0:	bd80      	pop	{r7, pc}
 8002bc2:	bf00      	nop
 8002bc4:	e000e010 	.word	0xe000e010

08002bc8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002bc8:	b580      	push	{r7, lr}
 8002bca:	b082      	sub	sp, #8
 8002bcc:	af00      	add	r7, sp, #0
 8002bce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002bd0:	6878      	ldr	r0, [r7, #4]
 8002bd2:	f7ff ff29 	bl	8002a28 <__NVIC_SetPriorityGrouping>
}
 8002bd6:	bf00      	nop
 8002bd8:	3708      	adds	r7, #8
 8002bda:	46bd      	mov	sp, r7
 8002bdc:	bd80      	pop	{r7, pc}

08002bde <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002bde:	b580      	push	{r7, lr}
 8002be0:	b086      	sub	sp, #24
 8002be2:	af00      	add	r7, sp, #0
 8002be4:	4603      	mov	r3, r0
 8002be6:	60b9      	str	r1, [r7, #8]
 8002be8:	607a      	str	r2, [r7, #4]
 8002bea:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002bec:	2300      	movs	r3, #0
 8002bee:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002bf0:	f7ff ff3e 	bl	8002a70 <__NVIC_GetPriorityGrouping>
 8002bf4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002bf6:	687a      	ldr	r2, [r7, #4]
 8002bf8:	68b9      	ldr	r1, [r7, #8]
 8002bfa:	6978      	ldr	r0, [r7, #20]
 8002bfc:	f7ff ff8e 	bl	8002b1c <NVIC_EncodePriority>
 8002c00:	4602      	mov	r2, r0
 8002c02:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002c06:	4611      	mov	r1, r2
 8002c08:	4618      	mov	r0, r3
 8002c0a:	f7ff ff5d 	bl	8002ac8 <__NVIC_SetPriority>
}
 8002c0e:	bf00      	nop
 8002c10:	3718      	adds	r7, #24
 8002c12:	46bd      	mov	sp, r7
 8002c14:	bd80      	pop	{r7, pc}

08002c16 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c16:	b580      	push	{r7, lr}
 8002c18:	b082      	sub	sp, #8
 8002c1a:	af00      	add	r7, sp, #0
 8002c1c:	4603      	mov	r3, r0
 8002c1e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002c20:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c24:	4618      	mov	r0, r3
 8002c26:	f7ff ff31 	bl	8002a8c <__NVIC_EnableIRQ>
}
 8002c2a:	bf00      	nop
 8002c2c:	3708      	adds	r7, #8
 8002c2e:	46bd      	mov	sp, r7
 8002c30:	bd80      	pop	{r7, pc}

08002c32 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002c32:	b580      	push	{r7, lr}
 8002c34:	b082      	sub	sp, #8
 8002c36:	af00      	add	r7, sp, #0
 8002c38:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002c3a:	6878      	ldr	r0, [r7, #4]
 8002c3c:	f7ff ffa2 	bl	8002b84 <SysTick_Config>
 8002c40:	4603      	mov	r3, r0
}
 8002c42:	4618      	mov	r0, r3
 8002c44:	3708      	adds	r7, #8
 8002c46:	46bd      	mov	sp, r7
 8002c48:	bd80      	pop	{r7, pc}

08002c4a <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8002c4a:	b580      	push	{r7, lr}
 8002c4c:	b082      	sub	sp, #8
 8002c4e:	af00      	add	r7, sp, #0
 8002c50:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d101      	bne.n	8002c5c <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 8002c58:	2301      	movs	r3, #1
 8002c5a:	e014      	b.n	8002c86 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	791b      	ldrb	r3, [r3, #4]
 8002c60:	b2db      	uxtb	r3, r3
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d105      	bne.n	8002c72 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	2200      	movs	r2, #0
 8002c6a:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8002c6c:	6878      	ldr	r0, [r7, #4]
 8002c6e:	f7fe f94b 	bl	8000f08 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	2202      	movs	r2, #2
 8002c76:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	2200      	movs	r2, #0
 8002c7c:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	2201      	movs	r2, #1
 8002c82:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8002c84:	2300      	movs	r3, #0
}
 8002c86:	4618      	mov	r0, r3
 8002c88:	3708      	adds	r7, #8
 8002c8a:	46bd      	mov	sp, r7
 8002c8c:	bd80      	pop	{r7, pc}

08002c8e <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (Whenever present)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8002c8e:	b580      	push	{r7, lr}
 8002c90:	b088      	sub	sp, #32
 8002c92:	af00      	add	r7, sp, #0
 8002c94:	60f8      	str	r0, [r7, #12]
 8002c96:	60b9      	str	r1, [r7, #8]
 8002c98:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1;
  uint32_t tmpreg2;
  uint32_t tickstart = 0U;
 8002c9a:	2300      	movs	r3, #0
 8002c9c:	61fb      	str	r3, [r7, #28]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	795b      	ldrb	r3, [r3, #5]
 8002ca2:	2b01      	cmp	r3, #1
 8002ca4:	d101      	bne.n	8002caa <HAL_DAC_ConfigChannel+0x1c>
 8002ca6:	2302      	movs	r3, #2
 8002ca8:	e114      	b.n	8002ed4 <HAL_DAC_ConfigChannel+0x246>
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	2201      	movs	r2, #1
 8002cae:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	2202      	movs	r2, #2
 8002cb4:	711a      	strb	r2, [r3, #4]

  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8002cb6:	68bb      	ldr	r3, [r7, #8]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	2b04      	cmp	r3, #4
 8002cbc:	f040 8081 	bne.w	8002dc2 <HAL_DAC_ConfigChannel+0x134>
  /* Sample on old configuration */
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8002cc0:	f7ff fe82 	bl	80029c8 <HAL_GetTick>
 8002cc4:	61f8      	str	r0, [r7, #28]

    if (Channel == DAC_CHANNEL_1)
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d140      	bne.n	8002d4e <HAL_DAC_ConfigChannel+0xc0>
    {

      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8002ccc:	e018      	b.n	8002d00 <HAL_DAC_ConfigChannel+0x72>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8002cce:	f7ff fe7b 	bl	80029c8 <HAL_GetTick>
 8002cd2:	4602      	mov	r2, r0
 8002cd4:	69fb      	ldr	r3, [r7, #28]
 8002cd6:	1ad3      	subs	r3, r2, r3
 8002cd8:	2b01      	cmp	r3, #1
 8002cda:	d911      	bls.n	8002d00 <HAL_DAC_ConfigChannel+0x72>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ce2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d00a      	beq.n	8002d00 <HAL_DAC_ConfigChannel+0x72>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	691b      	ldr	r3, [r3, #16]
 8002cee:	f043 0208 	orr.w	r2, r3, #8
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	2203      	movs	r2, #3
 8002cfa:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8002cfc:	2303      	movs	r3, #3
 8002cfe:	e0e9      	b.n	8002ed4 <HAL_DAC_ConfigChannel+0x246>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d06:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d1df      	bne.n	8002cce <HAL_DAC_ConfigChannel+0x40>
          }
        }
      }
      HAL_Delay(1);
 8002d0e:	2001      	movs	r0, #1
 8002d10:	f7ff fe66 	bl	80029e0 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	68ba      	ldr	r2, [r7, #8]
 8002d1a:	6992      	ldr	r2, [r2, #24]
 8002d1c:	641a      	str	r2, [r3, #64]	; 0x40
 8002d1e:	e023      	b.n	8002d68 <HAL_DAC_ConfigChannel+0xda>
      /* SHSR2 can be written when BWST2 is cleared */

      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8002d20:	f7ff fe52 	bl	80029c8 <HAL_GetTick>
 8002d24:	4602      	mov	r2, r0
 8002d26:	69fb      	ldr	r3, [r7, #28]
 8002d28:	1ad3      	subs	r3, r2, r3
 8002d2a:	2b01      	cmp	r3, #1
 8002d2c:	d90f      	bls.n	8002d4e <HAL_DAC_ConfigChannel+0xc0>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	da0a      	bge.n	8002d4e <HAL_DAC_ConfigChannel+0xc0>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	691b      	ldr	r3, [r3, #16]
 8002d3c:	f043 0208 	orr.w	r2, r3, #8
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	2203      	movs	r2, #3
 8002d48:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8002d4a:	2303      	movs	r3, #3
 8002d4c:	e0c2      	b.n	8002ed4 <HAL_DAC_ConfigChannel+0x246>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	dbe3      	blt.n	8002d20 <HAL_DAC_ConfigChannel+0x92>
          }
        }
      }
      HAL_Delay(1U);
 8002d58:	2001      	movs	r0, #1
 8002d5a:	f7ff fe41 	bl	80029e0 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	68ba      	ldr	r2, [r7, #8]
 8002d64:	6992      	ldr	r2, [r2, #24]
 8002d66:	645a      	str	r2, [r3, #68]	; 0x44
    }
#endif /* STM32L451xx STM32L452xx STM32L462xx */

    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	f003 0310 	and.w	r3, r3, #16
 8002d74:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8002d78:	fa01 f303 	lsl.w	r3, r1, r3
 8002d7c:	43db      	mvns	r3, r3
 8002d7e:	ea02 0103 	and.w	r1, r2, r3
 8002d82:	68bb      	ldr	r3, [r7, #8]
 8002d84:	69da      	ldr	r2, [r3, #28]
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	f003 0310 	and.w	r3, r3, #16
 8002d8c:	409a      	lsls	r2, r3
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	430a      	orrs	r2, r1
 8002d94:	649a      	str	r2, [r3, #72]	; 0x48
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	f003 0310 	and.w	r3, r3, #16
 8002da2:	21ff      	movs	r1, #255	; 0xff
 8002da4:	fa01 f303 	lsl.w	r3, r1, r3
 8002da8:	43db      	mvns	r3, r3
 8002daa:	ea02 0103 	and.w	r1, r2, r3
 8002dae:	68bb      	ldr	r3, [r7, #8]
 8002db0:	6a1a      	ldr	r2, [r3, #32]
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	f003 0310 	and.w	r3, r3, #16
 8002db8:	409a      	lsls	r2, r3
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	430a      	orrs	r2, r1
 8002dc0:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8002dc2:	68bb      	ldr	r3, [r7, #8]
 8002dc4:	691b      	ldr	r3, [r3, #16]
 8002dc6:	2b01      	cmp	r3, #1
 8002dc8:	d11d      	bne.n	8002e06 <HAL_DAC_ConfigChannel+0x178>
  /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002dd0:	61bb      	str	r3, [r7, #24]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	f003 0310 	and.w	r3, r3, #16
 8002dd8:	221f      	movs	r2, #31
 8002dda:	fa02 f303 	lsl.w	r3, r2, r3
 8002dde:	43db      	mvns	r3, r3
 8002de0:	69ba      	ldr	r2, [r7, #24]
 8002de2:	4013      	ands	r3, r2
 8002de4:	61bb      	str	r3, [r7, #24]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8002de6:	68bb      	ldr	r3, [r7, #8]
 8002de8:	695b      	ldr	r3, [r3, #20]
 8002dea:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	f003 0310 	and.w	r3, r3, #16
 8002df2:	697a      	ldr	r2, [r7, #20]
 8002df4:	fa02 f303 	lsl.w	r3, r2, r3
 8002df8:	69ba      	ldr	r2, [r7, #24]
 8002dfa:	4313      	orrs	r3, r2
 8002dfc:	61bb      	str	r3, [r7, #24]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	69ba      	ldr	r2, [r7, #24]
 8002e04:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e0c:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	f003 0310 	and.w	r3, r3, #16
 8002e14:	2207      	movs	r2, #7
 8002e16:	fa02 f303 	lsl.w	r3, r2, r3
 8002e1a:	43db      	mvns	r3, r3
 8002e1c:	69ba      	ldr	r2, [r7, #24]
 8002e1e:	4013      	ands	r3, r2
 8002e20:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | sConfig->DAC_ConnectOnChipPeripheral);
 8002e22:	68bb      	ldr	r3, [r7, #8]
 8002e24:	681a      	ldr	r2, [r3, #0]
 8002e26:	68bb      	ldr	r3, [r7, #8]
 8002e28:	689b      	ldr	r3, [r3, #8]
 8002e2a:	431a      	orrs	r2, r3
 8002e2c:	68bb      	ldr	r3, [r7, #8]
 8002e2e:	68db      	ldr	r3, [r3, #12]
 8002e30:	4313      	orrs	r3, r2
 8002e32:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	f003 0310 	and.w	r3, r3, #16
 8002e3a:	697a      	ldr	r2, [r7, #20]
 8002e3c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e40:	69ba      	ldr	r2, [r7, #24]
 8002e42:	4313      	orrs	r3, r2
 8002e44:	61bb      	str	r3, [r7, #24]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	69ba      	ldr	r2, [r7, #24]
 8002e4c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	6819      	ldr	r1, [r3, #0]
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	f003 0310 	and.w	r3, r3, #16
 8002e5a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002e5e:	fa02 f303 	lsl.w	r3, r2, r3
 8002e62:	43da      	mvns	r2, r3
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	400a      	ands	r2, r1
 8002e6a:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	61bb      	str	r3, [r7, #24]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	f003 0310 	and.w	r3, r3, #16
 8002e7a:	f640 72fc 	movw	r2, #4092	; 0xffc
 8002e7e:	fa02 f303 	lsl.w	r3, r2, r3
 8002e82:	43db      	mvns	r3, r3
 8002e84:	69ba      	ldr	r2, [r7, #24]
 8002e86:	4013      	ands	r3, r2
 8002e88:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8002e8a:	68bb      	ldr	r3, [r7, #8]
 8002e8c:	685b      	ldr	r3, [r3, #4]
 8002e8e:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	f003 0310 	and.w	r3, r3, #16
 8002e96:	697a      	ldr	r2, [r7, #20]
 8002e98:	fa02 f303 	lsl.w	r3, r2, r3
 8002e9c:	69ba      	ldr	r2, [r7, #24]
 8002e9e:	4313      	orrs	r3, r2
 8002ea0:	61bb      	str	r3, [r7, #24]
  }

#endif /* STM32L4P5xx STM32L4Q5xx STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx */

  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	69ba      	ldr	r2, [r7, #24]
 8002ea8:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	6819      	ldr	r1, [r3, #0]
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	f003 0310 	and.w	r3, r3, #16
 8002eb6:	22c0      	movs	r2, #192	; 0xc0
 8002eb8:	fa02 f303 	lsl.w	r3, r2, r3
 8002ebc:	43da      	mvns	r2, r3
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	400a      	ands	r2, r1
 8002ec4:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	2201      	movs	r2, #1
 8002eca:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	2200      	movs	r2, #0
 8002ed0:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8002ed2:	2300      	movs	r3, #0
}
 8002ed4:	4618      	mov	r0, r3
 8002ed6:	3720      	adds	r7, #32
 8002ed8:	46bd      	mov	sp, r7
 8002eda:	bd80      	pop	{r7, pc}

08002edc <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002edc:	b480      	push	{r7}
 8002ede:	b085      	sub	sp, #20
 8002ee0:	af00      	add	r7, sp, #0
 8002ee2:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d101      	bne.n	8002eee <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8002eea:	2301      	movs	r3, #1
 8002eec:	e098      	b.n	8003020 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	461a      	mov	r2, r3
 8002ef4:	4b4d      	ldr	r3, [pc, #308]	; (800302c <HAL_DMA_Init+0x150>)
 8002ef6:	429a      	cmp	r2, r3
 8002ef8:	d80f      	bhi.n	8002f1a <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	461a      	mov	r2, r3
 8002f00:	4b4b      	ldr	r3, [pc, #300]	; (8003030 <HAL_DMA_Init+0x154>)
 8002f02:	4413      	add	r3, r2
 8002f04:	4a4b      	ldr	r2, [pc, #300]	; (8003034 <HAL_DMA_Init+0x158>)
 8002f06:	fba2 2303 	umull	r2, r3, r2, r3
 8002f0a:	091b      	lsrs	r3, r3, #4
 8002f0c:	009a      	lsls	r2, r3, #2
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	4a48      	ldr	r2, [pc, #288]	; (8003038 <HAL_DMA_Init+0x15c>)
 8002f16:	641a      	str	r2, [r3, #64]	; 0x40
 8002f18:	e00e      	b.n	8002f38 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	461a      	mov	r2, r3
 8002f20:	4b46      	ldr	r3, [pc, #280]	; (800303c <HAL_DMA_Init+0x160>)
 8002f22:	4413      	add	r3, r2
 8002f24:	4a43      	ldr	r2, [pc, #268]	; (8003034 <HAL_DMA_Init+0x158>)
 8002f26:	fba2 2303 	umull	r2, r3, r2, r3
 8002f2a:	091b      	lsrs	r3, r3, #4
 8002f2c:	009a      	lsls	r2, r3, #2
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	4a42      	ldr	r2, [pc, #264]	; (8003040 <HAL_DMA_Init+0x164>)
 8002f36:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	2202      	movs	r2, #2
 8002f3c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8002f4e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f52:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8002f5c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	691b      	ldr	r3, [r3, #16]
 8002f62:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002f68:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	699b      	ldr	r3, [r3, #24]
 8002f6e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002f74:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	6a1b      	ldr	r3, [r3, #32]
 8002f7a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002f7c:	68fa      	ldr	r2, [r7, #12]
 8002f7e:	4313      	orrs	r3, r2
 8002f80:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	68fa      	ldr	r2, [r7, #12]
 8002f88:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	689b      	ldr	r3, [r3, #8]
 8002f8e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002f92:	d039      	beq.n	8003008 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f98:	4a27      	ldr	r2, [pc, #156]	; (8003038 <HAL_DMA_Init+0x15c>)
 8002f9a:	4293      	cmp	r3, r2
 8002f9c:	d11a      	bne.n	8002fd4 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8002f9e:	4b29      	ldr	r3, [pc, #164]	; (8003044 <HAL_DMA_Init+0x168>)
 8002fa0:	681a      	ldr	r2, [r3, #0]
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fa6:	f003 031c 	and.w	r3, r3, #28
 8002faa:	210f      	movs	r1, #15
 8002fac:	fa01 f303 	lsl.w	r3, r1, r3
 8002fb0:	43db      	mvns	r3, r3
 8002fb2:	4924      	ldr	r1, [pc, #144]	; (8003044 <HAL_DMA_Init+0x168>)
 8002fb4:	4013      	ands	r3, r2
 8002fb6:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8002fb8:	4b22      	ldr	r3, [pc, #136]	; (8003044 <HAL_DMA_Init+0x168>)
 8002fba:	681a      	ldr	r2, [r3, #0]
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	6859      	ldr	r1, [r3, #4]
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fc4:	f003 031c 	and.w	r3, r3, #28
 8002fc8:	fa01 f303 	lsl.w	r3, r1, r3
 8002fcc:	491d      	ldr	r1, [pc, #116]	; (8003044 <HAL_DMA_Init+0x168>)
 8002fce:	4313      	orrs	r3, r2
 8002fd0:	600b      	str	r3, [r1, #0]
 8002fd2:	e019      	b.n	8003008 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8002fd4:	4b1c      	ldr	r3, [pc, #112]	; (8003048 <HAL_DMA_Init+0x16c>)
 8002fd6:	681a      	ldr	r2, [r3, #0]
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fdc:	f003 031c 	and.w	r3, r3, #28
 8002fe0:	210f      	movs	r1, #15
 8002fe2:	fa01 f303 	lsl.w	r3, r1, r3
 8002fe6:	43db      	mvns	r3, r3
 8002fe8:	4917      	ldr	r1, [pc, #92]	; (8003048 <HAL_DMA_Init+0x16c>)
 8002fea:	4013      	ands	r3, r2
 8002fec:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8002fee:	4b16      	ldr	r3, [pc, #88]	; (8003048 <HAL_DMA_Init+0x16c>)
 8002ff0:	681a      	ldr	r2, [r3, #0]
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	6859      	ldr	r1, [r3, #4]
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ffa:	f003 031c 	and.w	r3, r3, #28
 8002ffe:	fa01 f303 	lsl.w	r3, r1, r3
 8003002:	4911      	ldr	r1, [pc, #68]	; (8003048 <HAL_DMA_Init+0x16c>)
 8003004:	4313      	orrs	r3, r2
 8003006:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	2200      	movs	r2, #0
 800300c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	2201      	movs	r2, #1
 8003012:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	2200      	movs	r2, #0
 800301a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800301e:	2300      	movs	r3, #0
}
 8003020:	4618      	mov	r0, r3
 8003022:	3714      	adds	r7, #20
 8003024:	46bd      	mov	sp, r7
 8003026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800302a:	4770      	bx	lr
 800302c:	40020407 	.word	0x40020407
 8003030:	bffdfff8 	.word	0xbffdfff8
 8003034:	cccccccd 	.word	0xcccccccd
 8003038:	40020000 	.word	0x40020000
 800303c:	bffdfbf8 	.word	0xbffdfbf8
 8003040:	40020400 	.word	0x40020400
 8003044:	400200a8 	.word	0x400200a8
 8003048:	400204a8 	.word	0x400204a8

0800304c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800304c:	b580      	push	{r7, lr}
 800304e:	b086      	sub	sp, #24
 8003050:	af00      	add	r7, sp, #0
 8003052:	60f8      	str	r0, [r7, #12]
 8003054:	60b9      	str	r1, [r7, #8]
 8003056:	607a      	str	r2, [r7, #4]
 8003058:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800305a:	2300      	movs	r3, #0
 800305c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003064:	2b01      	cmp	r3, #1
 8003066:	d101      	bne.n	800306c <HAL_DMA_Start_IT+0x20>
 8003068:	2302      	movs	r3, #2
 800306a:	e04b      	b.n	8003104 <HAL_DMA_Start_IT+0xb8>
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	2201      	movs	r2, #1
 8003070:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800307a:	b2db      	uxtb	r3, r3
 800307c:	2b01      	cmp	r3, #1
 800307e:	d13a      	bne.n	80030f6 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	2202      	movs	r2, #2
 8003084:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	2200      	movs	r2, #0
 800308c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	681a      	ldr	r2, [r3, #0]
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	f022 0201 	bic.w	r2, r2, #1
 800309c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800309e:	683b      	ldr	r3, [r7, #0]
 80030a0:	687a      	ldr	r2, [r7, #4]
 80030a2:	68b9      	ldr	r1, [r7, #8]
 80030a4:	68f8      	ldr	r0, [r7, #12]
 80030a6:	f000 f8e0 	bl	800326a <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d008      	beq.n	80030c4 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	681a      	ldr	r2, [r3, #0]
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	f042 020e 	orr.w	r2, r2, #14
 80030c0:	601a      	str	r2, [r3, #0]
 80030c2:	e00f      	b.n	80030e4 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	681a      	ldr	r2, [r3, #0]
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	f022 0204 	bic.w	r2, r2, #4
 80030d2:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	681a      	ldr	r2, [r3, #0]
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	f042 020a 	orr.w	r2, r2, #10
 80030e2:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	681a      	ldr	r2, [r3, #0]
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	f042 0201 	orr.w	r2, r2, #1
 80030f2:	601a      	str	r2, [r3, #0]
 80030f4:	e005      	b.n	8003102 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	2200      	movs	r2, #0
 80030fa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80030fe:	2302      	movs	r3, #2
 8003100:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8003102:	7dfb      	ldrb	r3, [r7, #23]
}
 8003104:	4618      	mov	r0, r3
 8003106:	3718      	adds	r7, #24
 8003108:	46bd      	mov	sp, r7
 800310a:	bd80      	pop	{r7, pc}

0800310c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800310c:	b580      	push	{r7, lr}
 800310e:	b084      	sub	sp, #16
 8003110:	af00      	add	r7, sp, #0
 8003112:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003128:	f003 031c 	and.w	r3, r3, #28
 800312c:	2204      	movs	r2, #4
 800312e:	409a      	lsls	r2, r3
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	4013      	ands	r3, r2
 8003134:	2b00      	cmp	r3, #0
 8003136:	d026      	beq.n	8003186 <HAL_DMA_IRQHandler+0x7a>
 8003138:	68bb      	ldr	r3, [r7, #8]
 800313a:	f003 0304 	and.w	r3, r3, #4
 800313e:	2b00      	cmp	r3, #0
 8003140:	d021      	beq.n	8003186 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	f003 0320 	and.w	r3, r3, #32
 800314c:	2b00      	cmp	r3, #0
 800314e:	d107      	bne.n	8003160 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	681a      	ldr	r2, [r3, #0]
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	f022 0204 	bic.w	r2, r2, #4
 800315e:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003164:	f003 021c 	and.w	r2, r3, #28
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800316c:	2104      	movs	r1, #4
 800316e:	fa01 f202 	lsl.w	r2, r1, r2
 8003172:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003178:	2b00      	cmp	r3, #0
 800317a:	d071      	beq.n	8003260 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003180:	6878      	ldr	r0, [r7, #4]
 8003182:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8003184:	e06c      	b.n	8003260 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800318a:	f003 031c 	and.w	r3, r3, #28
 800318e:	2202      	movs	r2, #2
 8003190:	409a      	lsls	r2, r3
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	4013      	ands	r3, r2
 8003196:	2b00      	cmp	r3, #0
 8003198:	d02e      	beq.n	80031f8 <HAL_DMA_IRQHandler+0xec>
 800319a:	68bb      	ldr	r3, [r7, #8]
 800319c:	f003 0302 	and.w	r3, r3, #2
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d029      	beq.n	80031f8 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	f003 0320 	and.w	r3, r3, #32
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d10b      	bne.n	80031ca <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	681a      	ldr	r2, [r3, #0]
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	f022 020a 	bic.w	r2, r2, #10
 80031c0:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	2201      	movs	r2, #1
 80031c6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031ce:	f003 021c 	and.w	r2, r3, #28
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031d6:	2102      	movs	r1, #2
 80031d8:	fa01 f202 	lsl.w	r2, r1, r2
 80031dc:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	2200      	movs	r2, #0
 80031e2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d038      	beq.n	8003260 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031f2:	6878      	ldr	r0, [r7, #4]
 80031f4:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80031f6:	e033      	b.n	8003260 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031fc:	f003 031c 	and.w	r3, r3, #28
 8003200:	2208      	movs	r2, #8
 8003202:	409a      	lsls	r2, r3
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	4013      	ands	r3, r2
 8003208:	2b00      	cmp	r3, #0
 800320a:	d02a      	beq.n	8003262 <HAL_DMA_IRQHandler+0x156>
 800320c:	68bb      	ldr	r3, [r7, #8]
 800320e:	f003 0308 	and.w	r3, r3, #8
 8003212:	2b00      	cmp	r3, #0
 8003214:	d025      	beq.n	8003262 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	681a      	ldr	r2, [r3, #0]
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	f022 020e 	bic.w	r2, r2, #14
 8003224:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800322a:	f003 021c 	and.w	r2, r3, #28
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003232:	2101      	movs	r1, #1
 8003234:	fa01 f202 	lsl.w	r2, r1, r2
 8003238:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	2201      	movs	r2, #1
 800323e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	2201      	movs	r2, #1
 8003244:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	2200      	movs	r2, #0
 800324c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003254:	2b00      	cmp	r3, #0
 8003256:	d004      	beq.n	8003262 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800325c:	6878      	ldr	r0, [r7, #4]
 800325e:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8003260:	bf00      	nop
 8003262:	bf00      	nop
}
 8003264:	3710      	adds	r7, #16
 8003266:	46bd      	mov	sp, r7
 8003268:	bd80      	pop	{r7, pc}

0800326a <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800326a:	b480      	push	{r7}
 800326c:	b085      	sub	sp, #20
 800326e:	af00      	add	r7, sp, #0
 8003270:	60f8      	str	r0, [r7, #12]
 8003272:	60b9      	str	r1, [r7, #8]
 8003274:	607a      	str	r2, [r7, #4]
 8003276:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800327c:	f003 021c 	and.w	r2, r3, #28
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003284:	2101      	movs	r1, #1
 8003286:	fa01 f202 	lsl.w	r2, r1, r2
 800328a:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	683a      	ldr	r2, [r7, #0]
 8003292:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	689b      	ldr	r3, [r3, #8]
 8003298:	2b10      	cmp	r3, #16
 800329a:	d108      	bne.n	80032ae <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	687a      	ldr	r2, [r7, #4]
 80032a2:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	68ba      	ldr	r2, [r7, #8]
 80032aa:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80032ac:	e007      	b.n	80032be <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	68ba      	ldr	r2, [r7, #8]
 80032b4:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	687a      	ldr	r2, [r7, #4]
 80032bc:	60da      	str	r2, [r3, #12]
}
 80032be:	bf00      	nop
 80032c0:	3714      	adds	r7, #20
 80032c2:	46bd      	mov	sp, r7
 80032c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c8:	4770      	bx	lr
	...

080032cc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80032cc:	b480      	push	{r7}
 80032ce:	b087      	sub	sp, #28
 80032d0:	af00      	add	r7, sp, #0
 80032d2:	6078      	str	r0, [r7, #4]
 80032d4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80032d6:	2300      	movs	r3, #0
 80032d8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80032da:	e17f      	b.n	80035dc <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80032dc:	683b      	ldr	r3, [r7, #0]
 80032de:	681a      	ldr	r2, [r3, #0]
 80032e0:	2101      	movs	r1, #1
 80032e2:	697b      	ldr	r3, [r7, #20]
 80032e4:	fa01 f303 	lsl.w	r3, r1, r3
 80032e8:	4013      	ands	r3, r2
 80032ea:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	f000 8171 	beq.w	80035d6 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80032f4:	683b      	ldr	r3, [r7, #0]
 80032f6:	685b      	ldr	r3, [r3, #4]
 80032f8:	f003 0303 	and.w	r3, r3, #3
 80032fc:	2b01      	cmp	r3, #1
 80032fe:	d005      	beq.n	800330c <HAL_GPIO_Init+0x40>
 8003300:	683b      	ldr	r3, [r7, #0]
 8003302:	685b      	ldr	r3, [r3, #4]
 8003304:	f003 0303 	and.w	r3, r3, #3
 8003308:	2b02      	cmp	r3, #2
 800330a:	d130      	bne.n	800336e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	689b      	ldr	r3, [r3, #8]
 8003310:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003312:	697b      	ldr	r3, [r7, #20]
 8003314:	005b      	lsls	r3, r3, #1
 8003316:	2203      	movs	r2, #3
 8003318:	fa02 f303 	lsl.w	r3, r2, r3
 800331c:	43db      	mvns	r3, r3
 800331e:	693a      	ldr	r2, [r7, #16]
 8003320:	4013      	ands	r3, r2
 8003322:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003324:	683b      	ldr	r3, [r7, #0]
 8003326:	68da      	ldr	r2, [r3, #12]
 8003328:	697b      	ldr	r3, [r7, #20]
 800332a:	005b      	lsls	r3, r3, #1
 800332c:	fa02 f303 	lsl.w	r3, r2, r3
 8003330:	693a      	ldr	r2, [r7, #16]
 8003332:	4313      	orrs	r3, r2
 8003334:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	693a      	ldr	r2, [r7, #16]
 800333a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	685b      	ldr	r3, [r3, #4]
 8003340:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003342:	2201      	movs	r2, #1
 8003344:	697b      	ldr	r3, [r7, #20]
 8003346:	fa02 f303 	lsl.w	r3, r2, r3
 800334a:	43db      	mvns	r3, r3
 800334c:	693a      	ldr	r2, [r7, #16]
 800334e:	4013      	ands	r3, r2
 8003350:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003352:	683b      	ldr	r3, [r7, #0]
 8003354:	685b      	ldr	r3, [r3, #4]
 8003356:	091b      	lsrs	r3, r3, #4
 8003358:	f003 0201 	and.w	r2, r3, #1
 800335c:	697b      	ldr	r3, [r7, #20]
 800335e:	fa02 f303 	lsl.w	r3, r2, r3
 8003362:	693a      	ldr	r2, [r7, #16]
 8003364:	4313      	orrs	r3, r2
 8003366:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	693a      	ldr	r2, [r7, #16]
 800336c:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800336e:	683b      	ldr	r3, [r7, #0]
 8003370:	685b      	ldr	r3, [r3, #4]
 8003372:	f003 0303 	and.w	r3, r3, #3
 8003376:	2b03      	cmp	r3, #3
 8003378:	d118      	bne.n	80033ac <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800337e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8003380:	2201      	movs	r2, #1
 8003382:	697b      	ldr	r3, [r7, #20]
 8003384:	fa02 f303 	lsl.w	r3, r2, r3
 8003388:	43db      	mvns	r3, r3
 800338a:	693a      	ldr	r2, [r7, #16]
 800338c:	4013      	ands	r3, r2
 800338e:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8003390:	683b      	ldr	r3, [r7, #0]
 8003392:	685b      	ldr	r3, [r3, #4]
 8003394:	08db      	lsrs	r3, r3, #3
 8003396:	f003 0201 	and.w	r2, r3, #1
 800339a:	697b      	ldr	r3, [r7, #20]
 800339c:	fa02 f303 	lsl.w	r3, r2, r3
 80033a0:	693a      	ldr	r2, [r7, #16]
 80033a2:	4313      	orrs	r3, r2
 80033a4:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	693a      	ldr	r2, [r7, #16]
 80033aa:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80033ac:	683b      	ldr	r3, [r7, #0]
 80033ae:	685b      	ldr	r3, [r3, #4]
 80033b0:	f003 0303 	and.w	r3, r3, #3
 80033b4:	2b03      	cmp	r3, #3
 80033b6:	d017      	beq.n	80033e8 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	68db      	ldr	r3, [r3, #12]
 80033bc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80033be:	697b      	ldr	r3, [r7, #20]
 80033c0:	005b      	lsls	r3, r3, #1
 80033c2:	2203      	movs	r2, #3
 80033c4:	fa02 f303 	lsl.w	r3, r2, r3
 80033c8:	43db      	mvns	r3, r3
 80033ca:	693a      	ldr	r2, [r7, #16]
 80033cc:	4013      	ands	r3, r2
 80033ce:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80033d0:	683b      	ldr	r3, [r7, #0]
 80033d2:	689a      	ldr	r2, [r3, #8]
 80033d4:	697b      	ldr	r3, [r7, #20]
 80033d6:	005b      	lsls	r3, r3, #1
 80033d8:	fa02 f303 	lsl.w	r3, r2, r3
 80033dc:	693a      	ldr	r2, [r7, #16]
 80033de:	4313      	orrs	r3, r2
 80033e0:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	693a      	ldr	r2, [r7, #16]
 80033e6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80033e8:	683b      	ldr	r3, [r7, #0]
 80033ea:	685b      	ldr	r3, [r3, #4]
 80033ec:	f003 0303 	and.w	r3, r3, #3
 80033f0:	2b02      	cmp	r3, #2
 80033f2:	d123      	bne.n	800343c <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80033f4:	697b      	ldr	r3, [r7, #20]
 80033f6:	08da      	lsrs	r2, r3, #3
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	3208      	adds	r2, #8
 80033fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003400:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003402:	697b      	ldr	r3, [r7, #20]
 8003404:	f003 0307 	and.w	r3, r3, #7
 8003408:	009b      	lsls	r3, r3, #2
 800340a:	220f      	movs	r2, #15
 800340c:	fa02 f303 	lsl.w	r3, r2, r3
 8003410:	43db      	mvns	r3, r3
 8003412:	693a      	ldr	r2, [r7, #16]
 8003414:	4013      	ands	r3, r2
 8003416:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003418:	683b      	ldr	r3, [r7, #0]
 800341a:	691a      	ldr	r2, [r3, #16]
 800341c:	697b      	ldr	r3, [r7, #20]
 800341e:	f003 0307 	and.w	r3, r3, #7
 8003422:	009b      	lsls	r3, r3, #2
 8003424:	fa02 f303 	lsl.w	r3, r2, r3
 8003428:	693a      	ldr	r2, [r7, #16]
 800342a:	4313      	orrs	r3, r2
 800342c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800342e:	697b      	ldr	r3, [r7, #20]
 8003430:	08da      	lsrs	r2, r3, #3
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	3208      	adds	r2, #8
 8003436:	6939      	ldr	r1, [r7, #16]
 8003438:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003442:	697b      	ldr	r3, [r7, #20]
 8003444:	005b      	lsls	r3, r3, #1
 8003446:	2203      	movs	r2, #3
 8003448:	fa02 f303 	lsl.w	r3, r2, r3
 800344c:	43db      	mvns	r3, r3
 800344e:	693a      	ldr	r2, [r7, #16]
 8003450:	4013      	ands	r3, r2
 8003452:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003454:	683b      	ldr	r3, [r7, #0]
 8003456:	685b      	ldr	r3, [r3, #4]
 8003458:	f003 0203 	and.w	r2, r3, #3
 800345c:	697b      	ldr	r3, [r7, #20]
 800345e:	005b      	lsls	r3, r3, #1
 8003460:	fa02 f303 	lsl.w	r3, r2, r3
 8003464:	693a      	ldr	r2, [r7, #16]
 8003466:	4313      	orrs	r3, r2
 8003468:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	693a      	ldr	r2, [r7, #16]
 800346e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003470:	683b      	ldr	r3, [r7, #0]
 8003472:	685b      	ldr	r3, [r3, #4]
 8003474:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003478:	2b00      	cmp	r3, #0
 800347a:	f000 80ac 	beq.w	80035d6 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800347e:	4b5f      	ldr	r3, [pc, #380]	; (80035fc <HAL_GPIO_Init+0x330>)
 8003480:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003482:	4a5e      	ldr	r2, [pc, #376]	; (80035fc <HAL_GPIO_Init+0x330>)
 8003484:	f043 0301 	orr.w	r3, r3, #1
 8003488:	6613      	str	r3, [r2, #96]	; 0x60
 800348a:	4b5c      	ldr	r3, [pc, #368]	; (80035fc <HAL_GPIO_Init+0x330>)
 800348c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800348e:	f003 0301 	and.w	r3, r3, #1
 8003492:	60bb      	str	r3, [r7, #8]
 8003494:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003496:	4a5a      	ldr	r2, [pc, #360]	; (8003600 <HAL_GPIO_Init+0x334>)
 8003498:	697b      	ldr	r3, [r7, #20]
 800349a:	089b      	lsrs	r3, r3, #2
 800349c:	3302      	adds	r3, #2
 800349e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80034a2:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80034a4:	697b      	ldr	r3, [r7, #20]
 80034a6:	f003 0303 	and.w	r3, r3, #3
 80034aa:	009b      	lsls	r3, r3, #2
 80034ac:	220f      	movs	r2, #15
 80034ae:	fa02 f303 	lsl.w	r3, r2, r3
 80034b2:	43db      	mvns	r3, r3
 80034b4:	693a      	ldr	r2, [r7, #16]
 80034b6:	4013      	ands	r3, r2
 80034b8:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80034c0:	d025      	beq.n	800350e <HAL_GPIO_Init+0x242>
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	4a4f      	ldr	r2, [pc, #316]	; (8003604 <HAL_GPIO_Init+0x338>)
 80034c6:	4293      	cmp	r3, r2
 80034c8:	d01f      	beq.n	800350a <HAL_GPIO_Init+0x23e>
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	4a4e      	ldr	r2, [pc, #312]	; (8003608 <HAL_GPIO_Init+0x33c>)
 80034ce:	4293      	cmp	r3, r2
 80034d0:	d019      	beq.n	8003506 <HAL_GPIO_Init+0x23a>
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	4a4d      	ldr	r2, [pc, #308]	; (800360c <HAL_GPIO_Init+0x340>)
 80034d6:	4293      	cmp	r3, r2
 80034d8:	d013      	beq.n	8003502 <HAL_GPIO_Init+0x236>
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	4a4c      	ldr	r2, [pc, #304]	; (8003610 <HAL_GPIO_Init+0x344>)
 80034de:	4293      	cmp	r3, r2
 80034e0:	d00d      	beq.n	80034fe <HAL_GPIO_Init+0x232>
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	4a4b      	ldr	r2, [pc, #300]	; (8003614 <HAL_GPIO_Init+0x348>)
 80034e6:	4293      	cmp	r3, r2
 80034e8:	d007      	beq.n	80034fa <HAL_GPIO_Init+0x22e>
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	4a4a      	ldr	r2, [pc, #296]	; (8003618 <HAL_GPIO_Init+0x34c>)
 80034ee:	4293      	cmp	r3, r2
 80034f0:	d101      	bne.n	80034f6 <HAL_GPIO_Init+0x22a>
 80034f2:	2306      	movs	r3, #6
 80034f4:	e00c      	b.n	8003510 <HAL_GPIO_Init+0x244>
 80034f6:	2307      	movs	r3, #7
 80034f8:	e00a      	b.n	8003510 <HAL_GPIO_Init+0x244>
 80034fa:	2305      	movs	r3, #5
 80034fc:	e008      	b.n	8003510 <HAL_GPIO_Init+0x244>
 80034fe:	2304      	movs	r3, #4
 8003500:	e006      	b.n	8003510 <HAL_GPIO_Init+0x244>
 8003502:	2303      	movs	r3, #3
 8003504:	e004      	b.n	8003510 <HAL_GPIO_Init+0x244>
 8003506:	2302      	movs	r3, #2
 8003508:	e002      	b.n	8003510 <HAL_GPIO_Init+0x244>
 800350a:	2301      	movs	r3, #1
 800350c:	e000      	b.n	8003510 <HAL_GPIO_Init+0x244>
 800350e:	2300      	movs	r3, #0
 8003510:	697a      	ldr	r2, [r7, #20]
 8003512:	f002 0203 	and.w	r2, r2, #3
 8003516:	0092      	lsls	r2, r2, #2
 8003518:	4093      	lsls	r3, r2
 800351a:	693a      	ldr	r2, [r7, #16]
 800351c:	4313      	orrs	r3, r2
 800351e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003520:	4937      	ldr	r1, [pc, #220]	; (8003600 <HAL_GPIO_Init+0x334>)
 8003522:	697b      	ldr	r3, [r7, #20]
 8003524:	089b      	lsrs	r3, r3, #2
 8003526:	3302      	adds	r3, #2
 8003528:	693a      	ldr	r2, [r7, #16]
 800352a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800352e:	4b3b      	ldr	r3, [pc, #236]	; (800361c <HAL_GPIO_Init+0x350>)
 8003530:	689b      	ldr	r3, [r3, #8]
 8003532:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	43db      	mvns	r3, r3
 8003538:	693a      	ldr	r2, [r7, #16]
 800353a:	4013      	ands	r3, r2
 800353c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800353e:	683b      	ldr	r3, [r7, #0]
 8003540:	685b      	ldr	r3, [r3, #4]
 8003542:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003546:	2b00      	cmp	r3, #0
 8003548:	d003      	beq.n	8003552 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800354a:	693a      	ldr	r2, [r7, #16]
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	4313      	orrs	r3, r2
 8003550:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003552:	4a32      	ldr	r2, [pc, #200]	; (800361c <HAL_GPIO_Init+0x350>)
 8003554:	693b      	ldr	r3, [r7, #16]
 8003556:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003558:	4b30      	ldr	r3, [pc, #192]	; (800361c <HAL_GPIO_Init+0x350>)
 800355a:	68db      	ldr	r3, [r3, #12]
 800355c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	43db      	mvns	r3, r3
 8003562:	693a      	ldr	r2, [r7, #16]
 8003564:	4013      	ands	r3, r2
 8003566:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003568:	683b      	ldr	r3, [r7, #0]
 800356a:	685b      	ldr	r3, [r3, #4]
 800356c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003570:	2b00      	cmp	r3, #0
 8003572:	d003      	beq.n	800357c <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8003574:	693a      	ldr	r2, [r7, #16]
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	4313      	orrs	r3, r2
 800357a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800357c:	4a27      	ldr	r2, [pc, #156]	; (800361c <HAL_GPIO_Init+0x350>)
 800357e:	693b      	ldr	r3, [r7, #16]
 8003580:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8003582:	4b26      	ldr	r3, [pc, #152]	; (800361c <HAL_GPIO_Init+0x350>)
 8003584:	685b      	ldr	r3, [r3, #4]
 8003586:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	43db      	mvns	r3, r3
 800358c:	693a      	ldr	r2, [r7, #16]
 800358e:	4013      	ands	r3, r2
 8003590:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003592:	683b      	ldr	r3, [r7, #0]
 8003594:	685b      	ldr	r3, [r3, #4]
 8003596:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800359a:	2b00      	cmp	r3, #0
 800359c:	d003      	beq.n	80035a6 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800359e:	693a      	ldr	r2, [r7, #16]
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	4313      	orrs	r3, r2
 80035a4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80035a6:	4a1d      	ldr	r2, [pc, #116]	; (800361c <HAL_GPIO_Init+0x350>)
 80035a8:	693b      	ldr	r3, [r7, #16]
 80035aa:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80035ac:	4b1b      	ldr	r3, [pc, #108]	; (800361c <HAL_GPIO_Init+0x350>)
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	43db      	mvns	r3, r3
 80035b6:	693a      	ldr	r2, [r7, #16]
 80035b8:	4013      	ands	r3, r2
 80035ba:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80035bc:	683b      	ldr	r3, [r7, #0]
 80035be:	685b      	ldr	r3, [r3, #4]
 80035c0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d003      	beq.n	80035d0 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80035c8:	693a      	ldr	r2, [r7, #16]
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	4313      	orrs	r3, r2
 80035ce:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80035d0:	4a12      	ldr	r2, [pc, #72]	; (800361c <HAL_GPIO_Init+0x350>)
 80035d2:	693b      	ldr	r3, [r7, #16]
 80035d4:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80035d6:	697b      	ldr	r3, [r7, #20]
 80035d8:	3301      	adds	r3, #1
 80035da:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80035dc:	683b      	ldr	r3, [r7, #0]
 80035de:	681a      	ldr	r2, [r3, #0]
 80035e0:	697b      	ldr	r3, [r7, #20]
 80035e2:	fa22 f303 	lsr.w	r3, r2, r3
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	f47f ae78 	bne.w	80032dc <HAL_GPIO_Init+0x10>
  }
}
 80035ec:	bf00      	nop
 80035ee:	bf00      	nop
 80035f0:	371c      	adds	r7, #28
 80035f2:	46bd      	mov	sp, r7
 80035f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f8:	4770      	bx	lr
 80035fa:	bf00      	nop
 80035fc:	40021000 	.word	0x40021000
 8003600:	40010000 	.word	0x40010000
 8003604:	48000400 	.word	0x48000400
 8003608:	48000800 	.word	0x48000800
 800360c:	48000c00 	.word	0x48000c00
 8003610:	48001000 	.word	0x48001000
 8003614:	48001400 	.word	0x48001400
 8003618:	48001800 	.word	0x48001800
 800361c:	40010400 	.word	0x40010400

08003620 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003620:	b480      	push	{r7}
 8003622:	b083      	sub	sp, #12
 8003624:	af00      	add	r7, sp, #0
 8003626:	6078      	str	r0, [r7, #4]
 8003628:	460b      	mov	r3, r1
 800362a:	807b      	strh	r3, [r7, #2]
 800362c:	4613      	mov	r3, r2
 800362e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003630:	787b      	ldrb	r3, [r7, #1]
 8003632:	2b00      	cmp	r3, #0
 8003634:	d003      	beq.n	800363e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003636:	887a      	ldrh	r2, [r7, #2]
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800363c:	e002      	b.n	8003644 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800363e:	887a      	ldrh	r2, [r7, #2]
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003644:	bf00      	nop
 8003646:	370c      	adds	r7, #12
 8003648:	46bd      	mov	sp, r7
 800364a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800364e:	4770      	bx	lr

08003650 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003650:	b480      	push	{r7}
 8003652:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003654:	4b04      	ldr	r3, [pc, #16]	; (8003668 <HAL_PWREx_GetVoltageRange+0x18>)
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 800365c:	4618      	mov	r0, r3
 800365e:	46bd      	mov	sp, r7
 8003660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003664:	4770      	bx	lr
 8003666:	bf00      	nop
 8003668:	40007000 	.word	0x40007000

0800366c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800366c:	b480      	push	{r7}
 800366e:	b085      	sub	sp, #20
 8003670:	af00      	add	r7, sp, #0
 8003672:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800367a:	d130      	bne.n	80036de <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800367c:	4b23      	ldr	r3, [pc, #140]	; (800370c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003684:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003688:	d038      	beq.n	80036fc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800368a:	4b20      	ldr	r3, [pc, #128]	; (800370c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003692:	4a1e      	ldr	r2, [pc, #120]	; (800370c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003694:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003698:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800369a:	4b1d      	ldr	r3, [pc, #116]	; (8003710 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	2232      	movs	r2, #50	; 0x32
 80036a0:	fb02 f303 	mul.w	r3, r2, r3
 80036a4:	4a1b      	ldr	r2, [pc, #108]	; (8003714 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80036a6:	fba2 2303 	umull	r2, r3, r2, r3
 80036aa:	0c9b      	lsrs	r3, r3, #18
 80036ac:	3301      	adds	r3, #1
 80036ae:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80036b0:	e002      	b.n	80036b8 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	3b01      	subs	r3, #1
 80036b6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80036b8:	4b14      	ldr	r3, [pc, #80]	; (800370c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80036ba:	695b      	ldr	r3, [r3, #20]
 80036bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80036c0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80036c4:	d102      	bne.n	80036cc <HAL_PWREx_ControlVoltageScaling+0x60>
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d1f2      	bne.n	80036b2 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80036cc:	4b0f      	ldr	r3, [pc, #60]	; (800370c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80036ce:	695b      	ldr	r3, [r3, #20]
 80036d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80036d4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80036d8:	d110      	bne.n	80036fc <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80036da:	2303      	movs	r3, #3
 80036dc:	e00f      	b.n	80036fe <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80036de:	4b0b      	ldr	r3, [pc, #44]	; (800370c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80036e6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80036ea:	d007      	beq.n	80036fc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80036ec:	4b07      	ldr	r3, [pc, #28]	; (800370c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80036f4:	4a05      	ldr	r2, [pc, #20]	; (800370c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80036f6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80036fa:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80036fc:	2300      	movs	r3, #0
}
 80036fe:	4618      	mov	r0, r3
 8003700:	3714      	adds	r7, #20
 8003702:	46bd      	mov	sp, r7
 8003704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003708:	4770      	bx	lr
 800370a:	bf00      	nop
 800370c:	40007000 	.word	0x40007000
 8003710:	20000004 	.word	0x20000004
 8003714:	431bde83 	.word	0x431bde83

08003718 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003718:	b580      	push	{r7, lr}
 800371a:	b088      	sub	sp, #32
 800371c:	af00      	add	r7, sp, #0
 800371e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	2b00      	cmp	r3, #0
 8003724:	d101      	bne.n	800372a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003726:	2301      	movs	r3, #1
 8003728:	e3ca      	b.n	8003ec0 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800372a:	4b97      	ldr	r3, [pc, #604]	; (8003988 <HAL_RCC_OscConfig+0x270>)
 800372c:	689b      	ldr	r3, [r3, #8]
 800372e:	f003 030c 	and.w	r3, r3, #12
 8003732:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003734:	4b94      	ldr	r3, [pc, #592]	; (8003988 <HAL_RCC_OscConfig+0x270>)
 8003736:	68db      	ldr	r3, [r3, #12]
 8003738:	f003 0303 	and.w	r3, r3, #3
 800373c:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	f003 0310 	and.w	r3, r3, #16
 8003746:	2b00      	cmp	r3, #0
 8003748:	f000 80e4 	beq.w	8003914 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800374c:	69bb      	ldr	r3, [r7, #24]
 800374e:	2b00      	cmp	r3, #0
 8003750:	d007      	beq.n	8003762 <HAL_RCC_OscConfig+0x4a>
 8003752:	69bb      	ldr	r3, [r7, #24]
 8003754:	2b0c      	cmp	r3, #12
 8003756:	f040 808b 	bne.w	8003870 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800375a:	697b      	ldr	r3, [r7, #20]
 800375c:	2b01      	cmp	r3, #1
 800375e:	f040 8087 	bne.w	8003870 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003762:	4b89      	ldr	r3, [pc, #548]	; (8003988 <HAL_RCC_OscConfig+0x270>)
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	f003 0302 	and.w	r3, r3, #2
 800376a:	2b00      	cmp	r3, #0
 800376c:	d005      	beq.n	800377a <HAL_RCC_OscConfig+0x62>
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	699b      	ldr	r3, [r3, #24]
 8003772:	2b00      	cmp	r3, #0
 8003774:	d101      	bne.n	800377a <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8003776:	2301      	movs	r3, #1
 8003778:	e3a2      	b.n	8003ec0 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	6a1a      	ldr	r2, [r3, #32]
 800377e:	4b82      	ldr	r3, [pc, #520]	; (8003988 <HAL_RCC_OscConfig+0x270>)
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	f003 0308 	and.w	r3, r3, #8
 8003786:	2b00      	cmp	r3, #0
 8003788:	d004      	beq.n	8003794 <HAL_RCC_OscConfig+0x7c>
 800378a:	4b7f      	ldr	r3, [pc, #508]	; (8003988 <HAL_RCC_OscConfig+0x270>)
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003792:	e005      	b.n	80037a0 <HAL_RCC_OscConfig+0x88>
 8003794:	4b7c      	ldr	r3, [pc, #496]	; (8003988 <HAL_RCC_OscConfig+0x270>)
 8003796:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800379a:	091b      	lsrs	r3, r3, #4
 800379c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80037a0:	4293      	cmp	r3, r2
 80037a2:	d223      	bcs.n	80037ec <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	6a1b      	ldr	r3, [r3, #32]
 80037a8:	4618      	mov	r0, r3
 80037aa:	f000 fd55 	bl	8004258 <RCC_SetFlashLatencyFromMSIRange>
 80037ae:	4603      	mov	r3, r0
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d001      	beq.n	80037b8 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80037b4:	2301      	movs	r3, #1
 80037b6:	e383      	b.n	8003ec0 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80037b8:	4b73      	ldr	r3, [pc, #460]	; (8003988 <HAL_RCC_OscConfig+0x270>)
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	4a72      	ldr	r2, [pc, #456]	; (8003988 <HAL_RCC_OscConfig+0x270>)
 80037be:	f043 0308 	orr.w	r3, r3, #8
 80037c2:	6013      	str	r3, [r2, #0]
 80037c4:	4b70      	ldr	r3, [pc, #448]	; (8003988 <HAL_RCC_OscConfig+0x270>)
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	6a1b      	ldr	r3, [r3, #32]
 80037d0:	496d      	ldr	r1, [pc, #436]	; (8003988 <HAL_RCC_OscConfig+0x270>)
 80037d2:	4313      	orrs	r3, r2
 80037d4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80037d6:	4b6c      	ldr	r3, [pc, #432]	; (8003988 <HAL_RCC_OscConfig+0x270>)
 80037d8:	685b      	ldr	r3, [r3, #4]
 80037da:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	69db      	ldr	r3, [r3, #28]
 80037e2:	021b      	lsls	r3, r3, #8
 80037e4:	4968      	ldr	r1, [pc, #416]	; (8003988 <HAL_RCC_OscConfig+0x270>)
 80037e6:	4313      	orrs	r3, r2
 80037e8:	604b      	str	r3, [r1, #4]
 80037ea:	e025      	b.n	8003838 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80037ec:	4b66      	ldr	r3, [pc, #408]	; (8003988 <HAL_RCC_OscConfig+0x270>)
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	4a65      	ldr	r2, [pc, #404]	; (8003988 <HAL_RCC_OscConfig+0x270>)
 80037f2:	f043 0308 	orr.w	r3, r3, #8
 80037f6:	6013      	str	r3, [r2, #0]
 80037f8:	4b63      	ldr	r3, [pc, #396]	; (8003988 <HAL_RCC_OscConfig+0x270>)
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	6a1b      	ldr	r3, [r3, #32]
 8003804:	4960      	ldr	r1, [pc, #384]	; (8003988 <HAL_RCC_OscConfig+0x270>)
 8003806:	4313      	orrs	r3, r2
 8003808:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800380a:	4b5f      	ldr	r3, [pc, #380]	; (8003988 <HAL_RCC_OscConfig+0x270>)
 800380c:	685b      	ldr	r3, [r3, #4]
 800380e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	69db      	ldr	r3, [r3, #28]
 8003816:	021b      	lsls	r3, r3, #8
 8003818:	495b      	ldr	r1, [pc, #364]	; (8003988 <HAL_RCC_OscConfig+0x270>)
 800381a:	4313      	orrs	r3, r2
 800381c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800381e:	69bb      	ldr	r3, [r7, #24]
 8003820:	2b00      	cmp	r3, #0
 8003822:	d109      	bne.n	8003838 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	6a1b      	ldr	r3, [r3, #32]
 8003828:	4618      	mov	r0, r3
 800382a:	f000 fd15 	bl	8004258 <RCC_SetFlashLatencyFromMSIRange>
 800382e:	4603      	mov	r3, r0
 8003830:	2b00      	cmp	r3, #0
 8003832:	d001      	beq.n	8003838 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8003834:	2301      	movs	r3, #1
 8003836:	e343      	b.n	8003ec0 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003838:	f000 fc4a 	bl	80040d0 <HAL_RCC_GetSysClockFreq>
 800383c:	4602      	mov	r2, r0
 800383e:	4b52      	ldr	r3, [pc, #328]	; (8003988 <HAL_RCC_OscConfig+0x270>)
 8003840:	689b      	ldr	r3, [r3, #8]
 8003842:	091b      	lsrs	r3, r3, #4
 8003844:	f003 030f 	and.w	r3, r3, #15
 8003848:	4950      	ldr	r1, [pc, #320]	; (800398c <HAL_RCC_OscConfig+0x274>)
 800384a:	5ccb      	ldrb	r3, [r1, r3]
 800384c:	f003 031f 	and.w	r3, r3, #31
 8003850:	fa22 f303 	lsr.w	r3, r2, r3
 8003854:	4a4e      	ldr	r2, [pc, #312]	; (8003990 <HAL_RCC_OscConfig+0x278>)
 8003856:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003858:	4b4e      	ldr	r3, [pc, #312]	; (8003994 <HAL_RCC_OscConfig+0x27c>)
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	4618      	mov	r0, r3
 800385e:	f7ff f863 	bl	8002928 <HAL_InitTick>
 8003862:	4603      	mov	r3, r0
 8003864:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003866:	7bfb      	ldrb	r3, [r7, #15]
 8003868:	2b00      	cmp	r3, #0
 800386a:	d052      	beq.n	8003912 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 800386c:	7bfb      	ldrb	r3, [r7, #15]
 800386e:	e327      	b.n	8003ec0 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	699b      	ldr	r3, [r3, #24]
 8003874:	2b00      	cmp	r3, #0
 8003876:	d032      	beq.n	80038de <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003878:	4b43      	ldr	r3, [pc, #268]	; (8003988 <HAL_RCC_OscConfig+0x270>)
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	4a42      	ldr	r2, [pc, #264]	; (8003988 <HAL_RCC_OscConfig+0x270>)
 800387e:	f043 0301 	orr.w	r3, r3, #1
 8003882:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003884:	f7ff f8a0 	bl	80029c8 <HAL_GetTick>
 8003888:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800388a:	e008      	b.n	800389e <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800388c:	f7ff f89c 	bl	80029c8 <HAL_GetTick>
 8003890:	4602      	mov	r2, r0
 8003892:	693b      	ldr	r3, [r7, #16]
 8003894:	1ad3      	subs	r3, r2, r3
 8003896:	2b02      	cmp	r3, #2
 8003898:	d901      	bls.n	800389e <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800389a:	2303      	movs	r3, #3
 800389c:	e310      	b.n	8003ec0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800389e:	4b3a      	ldr	r3, [pc, #232]	; (8003988 <HAL_RCC_OscConfig+0x270>)
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	f003 0302 	and.w	r3, r3, #2
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d0f0      	beq.n	800388c <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80038aa:	4b37      	ldr	r3, [pc, #220]	; (8003988 <HAL_RCC_OscConfig+0x270>)
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	4a36      	ldr	r2, [pc, #216]	; (8003988 <HAL_RCC_OscConfig+0x270>)
 80038b0:	f043 0308 	orr.w	r3, r3, #8
 80038b4:	6013      	str	r3, [r2, #0]
 80038b6:	4b34      	ldr	r3, [pc, #208]	; (8003988 <HAL_RCC_OscConfig+0x270>)
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	6a1b      	ldr	r3, [r3, #32]
 80038c2:	4931      	ldr	r1, [pc, #196]	; (8003988 <HAL_RCC_OscConfig+0x270>)
 80038c4:	4313      	orrs	r3, r2
 80038c6:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80038c8:	4b2f      	ldr	r3, [pc, #188]	; (8003988 <HAL_RCC_OscConfig+0x270>)
 80038ca:	685b      	ldr	r3, [r3, #4]
 80038cc:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	69db      	ldr	r3, [r3, #28]
 80038d4:	021b      	lsls	r3, r3, #8
 80038d6:	492c      	ldr	r1, [pc, #176]	; (8003988 <HAL_RCC_OscConfig+0x270>)
 80038d8:	4313      	orrs	r3, r2
 80038da:	604b      	str	r3, [r1, #4]
 80038dc:	e01a      	b.n	8003914 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80038de:	4b2a      	ldr	r3, [pc, #168]	; (8003988 <HAL_RCC_OscConfig+0x270>)
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	4a29      	ldr	r2, [pc, #164]	; (8003988 <HAL_RCC_OscConfig+0x270>)
 80038e4:	f023 0301 	bic.w	r3, r3, #1
 80038e8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80038ea:	f7ff f86d 	bl	80029c8 <HAL_GetTick>
 80038ee:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80038f0:	e008      	b.n	8003904 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80038f2:	f7ff f869 	bl	80029c8 <HAL_GetTick>
 80038f6:	4602      	mov	r2, r0
 80038f8:	693b      	ldr	r3, [r7, #16]
 80038fa:	1ad3      	subs	r3, r2, r3
 80038fc:	2b02      	cmp	r3, #2
 80038fe:	d901      	bls.n	8003904 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8003900:	2303      	movs	r3, #3
 8003902:	e2dd      	b.n	8003ec0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003904:	4b20      	ldr	r3, [pc, #128]	; (8003988 <HAL_RCC_OscConfig+0x270>)
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	f003 0302 	and.w	r3, r3, #2
 800390c:	2b00      	cmp	r3, #0
 800390e:	d1f0      	bne.n	80038f2 <HAL_RCC_OscConfig+0x1da>
 8003910:	e000      	b.n	8003914 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003912:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	f003 0301 	and.w	r3, r3, #1
 800391c:	2b00      	cmp	r3, #0
 800391e:	d074      	beq.n	8003a0a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003920:	69bb      	ldr	r3, [r7, #24]
 8003922:	2b08      	cmp	r3, #8
 8003924:	d005      	beq.n	8003932 <HAL_RCC_OscConfig+0x21a>
 8003926:	69bb      	ldr	r3, [r7, #24]
 8003928:	2b0c      	cmp	r3, #12
 800392a:	d10e      	bne.n	800394a <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800392c:	697b      	ldr	r3, [r7, #20]
 800392e:	2b03      	cmp	r3, #3
 8003930:	d10b      	bne.n	800394a <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003932:	4b15      	ldr	r3, [pc, #84]	; (8003988 <HAL_RCC_OscConfig+0x270>)
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800393a:	2b00      	cmp	r3, #0
 800393c:	d064      	beq.n	8003a08 <HAL_RCC_OscConfig+0x2f0>
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	685b      	ldr	r3, [r3, #4]
 8003942:	2b00      	cmp	r3, #0
 8003944:	d160      	bne.n	8003a08 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003946:	2301      	movs	r3, #1
 8003948:	e2ba      	b.n	8003ec0 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	685b      	ldr	r3, [r3, #4]
 800394e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003952:	d106      	bne.n	8003962 <HAL_RCC_OscConfig+0x24a>
 8003954:	4b0c      	ldr	r3, [pc, #48]	; (8003988 <HAL_RCC_OscConfig+0x270>)
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	4a0b      	ldr	r2, [pc, #44]	; (8003988 <HAL_RCC_OscConfig+0x270>)
 800395a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800395e:	6013      	str	r3, [r2, #0]
 8003960:	e026      	b.n	80039b0 <HAL_RCC_OscConfig+0x298>
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	685b      	ldr	r3, [r3, #4]
 8003966:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800396a:	d115      	bne.n	8003998 <HAL_RCC_OscConfig+0x280>
 800396c:	4b06      	ldr	r3, [pc, #24]	; (8003988 <HAL_RCC_OscConfig+0x270>)
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	4a05      	ldr	r2, [pc, #20]	; (8003988 <HAL_RCC_OscConfig+0x270>)
 8003972:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003976:	6013      	str	r3, [r2, #0]
 8003978:	4b03      	ldr	r3, [pc, #12]	; (8003988 <HAL_RCC_OscConfig+0x270>)
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	4a02      	ldr	r2, [pc, #8]	; (8003988 <HAL_RCC_OscConfig+0x270>)
 800397e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003982:	6013      	str	r3, [r2, #0]
 8003984:	e014      	b.n	80039b0 <HAL_RCC_OscConfig+0x298>
 8003986:	bf00      	nop
 8003988:	40021000 	.word	0x40021000
 800398c:	0800ff38 	.word	0x0800ff38
 8003990:	20000004 	.word	0x20000004
 8003994:	20000008 	.word	0x20000008
 8003998:	4ba0      	ldr	r3, [pc, #640]	; (8003c1c <HAL_RCC_OscConfig+0x504>)
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	4a9f      	ldr	r2, [pc, #636]	; (8003c1c <HAL_RCC_OscConfig+0x504>)
 800399e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80039a2:	6013      	str	r3, [r2, #0]
 80039a4:	4b9d      	ldr	r3, [pc, #628]	; (8003c1c <HAL_RCC_OscConfig+0x504>)
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	4a9c      	ldr	r2, [pc, #624]	; (8003c1c <HAL_RCC_OscConfig+0x504>)
 80039aa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80039ae:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	685b      	ldr	r3, [r3, #4]
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d013      	beq.n	80039e0 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039b8:	f7ff f806 	bl	80029c8 <HAL_GetTick>
 80039bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80039be:	e008      	b.n	80039d2 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80039c0:	f7ff f802 	bl	80029c8 <HAL_GetTick>
 80039c4:	4602      	mov	r2, r0
 80039c6:	693b      	ldr	r3, [r7, #16]
 80039c8:	1ad3      	subs	r3, r2, r3
 80039ca:	2b64      	cmp	r3, #100	; 0x64
 80039cc:	d901      	bls.n	80039d2 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80039ce:	2303      	movs	r3, #3
 80039d0:	e276      	b.n	8003ec0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80039d2:	4b92      	ldr	r3, [pc, #584]	; (8003c1c <HAL_RCC_OscConfig+0x504>)
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d0f0      	beq.n	80039c0 <HAL_RCC_OscConfig+0x2a8>
 80039de:	e014      	b.n	8003a0a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039e0:	f7fe fff2 	bl	80029c8 <HAL_GetTick>
 80039e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80039e6:	e008      	b.n	80039fa <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80039e8:	f7fe ffee 	bl	80029c8 <HAL_GetTick>
 80039ec:	4602      	mov	r2, r0
 80039ee:	693b      	ldr	r3, [r7, #16]
 80039f0:	1ad3      	subs	r3, r2, r3
 80039f2:	2b64      	cmp	r3, #100	; 0x64
 80039f4:	d901      	bls.n	80039fa <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80039f6:	2303      	movs	r3, #3
 80039f8:	e262      	b.n	8003ec0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80039fa:	4b88      	ldr	r3, [pc, #544]	; (8003c1c <HAL_RCC_OscConfig+0x504>)
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d1f0      	bne.n	80039e8 <HAL_RCC_OscConfig+0x2d0>
 8003a06:	e000      	b.n	8003a0a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a08:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	f003 0302 	and.w	r3, r3, #2
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d060      	beq.n	8003ad8 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003a16:	69bb      	ldr	r3, [r7, #24]
 8003a18:	2b04      	cmp	r3, #4
 8003a1a:	d005      	beq.n	8003a28 <HAL_RCC_OscConfig+0x310>
 8003a1c:	69bb      	ldr	r3, [r7, #24]
 8003a1e:	2b0c      	cmp	r3, #12
 8003a20:	d119      	bne.n	8003a56 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003a22:	697b      	ldr	r3, [r7, #20]
 8003a24:	2b02      	cmp	r3, #2
 8003a26:	d116      	bne.n	8003a56 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003a28:	4b7c      	ldr	r3, [pc, #496]	; (8003c1c <HAL_RCC_OscConfig+0x504>)
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d005      	beq.n	8003a40 <HAL_RCC_OscConfig+0x328>
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	68db      	ldr	r3, [r3, #12]
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d101      	bne.n	8003a40 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003a3c:	2301      	movs	r3, #1
 8003a3e:	e23f      	b.n	8003ec0 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a40:	4b76      	ldr	r3, [pc, #472]	; (8003c1c <HAL_RCC_OscConfig+0x504>)
 8003a42:	685b      	ldr	r3, [r3, #4]
 8003a44:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	691b      	ldr	r3, [r3, #16]
 8003a4c:	061b      	lsls	r3, r3, #24
 8003a4e:	4973      	ldr	r1, [pc, #460]	; (8003c1c <HAL_RCC_OscConfig+0x504>)
 8003a50:	4313      	orrs	r3, r2
 8003a52:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003a54:	e040      	b.n	8003ad8 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	68db      	ldr	r3, [r3, #12]
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d023      	beq.n	8003aa6 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003a5e:	4b6f      	ldr	r3, [pc, #444]	; (8003c1c <HAL_RCC_OscConfig+0x504>)
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	4a6e      	ldr	r2, [pc, #440]	; (8003c1c <HAL_RCC_OscConfig+0x504>)
 8003a64:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a68:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a6a:	f7fe ffad 	bl	80029c8 <HAL_GetTick>
 8003a6e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003a70:	e008      	b.n	8003a84 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003a72:	f7fe ffa9 	bl	80029c8 <HAL_GetTick>
 8003a76:	4602      	mov	r2, r0
 8003a78:	693b      	ldr	r3, [r7, #16]
 8003a7a:	1ad3      	subs	r3, r2, r3
 8003a7c:	2b02      	cmp	r3, #2
 8003a7e:	d901      	bls.n	8003a84 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003a80:	2303      	movs	r3, #3
 8003a82:	e21d      	b.n	8003ec0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003a84:	4b65      	ldr	r3, [pc, #404]	; (8003c1c <HAL_RCC_OscConfig+0x504>)
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d0f0      	beq.n	8003a72 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a90:	4b62      	ldr	r3, [pc, #392]	; (8003c1c <HAL_RCC_OscConfig+0x504>)
 8003a92:	685b      	ldr	r3, [r3, #4]
 8003a94:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	691b      	ldr	r3, [r3, #16]
 8003a9c:	061b      	lsls	r3, r3, #24
 8003a9e:	495f      	ldr	r1, [pc, #380]	; (8003c1c <HAL_RCC_OscConfig+0x504>)
 8003aa0:	4313      	orrs	r3, r2
 8003aa2:	604b      	str	r3, [r1, #4]
 8003aa4:	e018      	b.n	8003ad8 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003aa6:	4b5d      	ldr	r3, [pc, #372]	; (8003c1c <HAL_RCC_OscConfig+0x504>)
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	4a5c      	ldr	r2, [pc, #368]	; (8003c1c <HAL_RCC_OscConfig+0x504>)
 8003aac:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003ab0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ab2:	f7fe ff89 	bl	80029c8 <HAL_GetTick>
 8003ab6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003ab8:	e008      	b.n	8003acc <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003aba:	f7fe ff85 	bl	80029c8 <HAL_GetTick>
 8003abe:	4602      	mov	r2, r0
 8003ac0:	693b      	ldr	r3, [r7, #16]
 8003ac2:	1ad3      	subs	r3, r2, r3
 8003ac4:	2b02      	cmp	r3, #2
 8003ac6:	d901      	bls.n	8003acc <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003ac8:	2303      	movs	r3, #3
 8003aca:	e1f9      	b.n	8003ec0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003acc:	4b53      	ldr	r3, [pc, #332]	; (8003c1c <HAL_RCC_OscConfig+0x504>)
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d1f0      	bne.n	8003aba <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	f003 0308 	and.w	r3, r3, #8
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d03c      	beq.n	8003b5e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	695b      	ldr	r3, [r3, #20]
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d01c      	beq.n	8003b26 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003aec:	4b4b      	ldr	r3, [pc, #300]	; (8003c1c <HAL_RCC_OscConfig+0x504>)
 8003aee:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003af2:	4a4a      	ldr	r2, [pc, #296]	; (8003c1c <HAL_RCC_OscConfig+0x504>)
 8003af4:	f043 0301 	orr.w	r3, r3, #1
 8003af8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003afc:	f7fe ff64 	bl	80029c8 <HAL_GetTick>
 8003b00:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003b02:	e008      	b.n	8003b16 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003b04:	f7fe ff60 	bl	80029c8 <HAL_GetTick>
 8003b08:	4602      	mov	r2, r0
 8003b0a:	693b      	ldr	r3, [r7, #16]
 8003b0c:	1ad3      	subs	r3, r2, r3
 8003b0e:	2b02      	cmp	r3, #2
 8003b10:	d901      	bls.n	8003b16 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003b12:	2303      	movs	r3, #3
 8003b14:	e1d4      	b.n	8003ec0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003b16:	4b41      	ldr	r3, [pc, #260]	; (8003c1c <HAL_RCC_OscConfig+0x504>)
 8003b18:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003b1c:	f003 0302 	and.w	r3, r3, #2
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d0ef      	beq.n	8003b04 <HAL_RCC_OscConfig+0x3ec>
 8003b24:	e01b      	b.n	8003b5e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003b26:	4b3d      	ldr	r3, [pc, #244]	; (8003c1c <HAL_RCC_OscConfig+0x504>)
 8003b28:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003b2c:	4a3b      	ldr	r2, [pc, #236]	; (8003c1c <HAL_RCC_OscConfig+0x504>)
 8003b2e:	f023 0301 	bic.w	r3, r3, #1
 8003b32:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b36:	f7fe ff47 	bl	80029c8 <HAL_GetTick>
 8003b3a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003b3c:	e008      	b.n	8003b50 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003b3e:	f7fe ff43 	bl	80029c8 <HAL_GetTick>
 8003b42:	4602      	mov	r2, r0
 8003b44:	693b      	ldr	r3, [r7, #16]
 8003b46:	1ad3      	subs	r3, r2, r3
 8003b48:	2b02      	cmp	r3, #2
 8003b4a:	d901      	bls.n	8003b50 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003b4c:	2303      	movs	r3, #3
 8003b4e:	e1b7      	b.n	8003ec0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003b50:	4b32      	ldr	r3, [pc, #200]	; (8003c1c <HAL_RCC_OscConfig+0x504>)
 8003b52:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003b56:	f003 0302 	and.w	r3, r3, #2
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d1ef      	bne.n	8003b3e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	f003 0304 	and.w	r3, r3, #4
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	f000 80a6 	beq.w	8003cb8 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003b6c:	2300      	movs	r3, #0
 8003b6e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003b70:	4b2a      	ldr	r3, [pc, #168]	; (8003c1c <HAL_RCC_OscConfig+0x504>)
 8003b72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b74:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d10d      	bne.n	8003b98 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003b7c:	4b27      	ldr	r3, [pc, #156]	; (8003c1c <HAL_RCC_OscConfig+0x504>)
 8003b7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b80:	4a26      	ldr	r2, [pc, #152]	; (8003c1c <HAL_RCC_OscConfig+0x504>)
 8003b82:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b86:	6593      	str	r3, [r2, #88]	; 0x58
 8003b88:	4b24      	ldr	r3, [pc, #144]	; (8003c1c <HAL_RCC_OscConfig+0x504>)
 8003b8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b8c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b90:	60bb      	str	r3, [r7, #8]
 8003b92:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003b94:	2301      	movs	r3, #1
 8003b96:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003b98:	4b21      	ldr	r3, [pc, #132]	; (8003c20 <HAL_RCC_OscConfig+0x508>)
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d118      	bne.n	8003bd6 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003ba4:	4b1e      	ldr	r3, [pc, #120]	; (8003c20 <HAL_RCC_OscConfig+0x508>)
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	4a1d      	ldr	r2, [pc, #116]	; (8003c20 <HAL_RCC_OscConfig+0x508>)
 8003baa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003bae:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003bb0:	f7fe ff0a 	bl	80029c8 <HAL_GetTick>
 8003bb4:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003bb6:	e008      	b.n	8003bca <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003bb8:	f7fe ff06 	bl	80029c8 <HAL_GetTick>
 8003bbc:	4602      	mov	r2, r0
 8003bbe:	693b      	ldr	r3, [r7, #16]
 8003bc0:	1ad3      	subs	r3, r2, r3
 8003bc2:	2b02      	cmp	r3, #2
 8003bc4:	d901      	bls.n	8003bca <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003bc6:	2303      	movs	r3, #3
 8003bc8:	e17a      	b.n	8003ec0 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003bca:	4b15      	ldr	r3, [pc, #84]	; (8003c20 <HAL_RCC_OscConfig+0x508>)
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d0f0      	beq.n	8003bb8 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	689b      	ldr	r3, [r3, #8]
 8003bda:	2b01      	cmp	r3, #1
 8003bdc:	d108      	bne.n	8003bf0 <HAL_RCC_OscConfig+0x4d8>
 8003bde:	4b0f      	ldr	r3, [pc, #60]	; (8003c1c <HAL_RCC_OscConfig+0x504>)
 8003be0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003be4:	4a0d      	ldr	r2, [pc, #52]	; (8003c1c <HAL_RCC_OscConfig+0x504>)
 8003be6:	f043 0301 	orr.w	r3, r3, #1
 8003bea:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003bee:	e029      	b.n	8003c44 <HAL_RCC_OscConfig+0x52c>
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	689b      	ldr	r3, [r3, #8]
 8003bf4:	2b05      	cmp	r3, #5
 8003bf6:	d115      	bne.n	8003c24 <HAL_RCC_OscConfig+0x50c>
 8003bf8:	4b08      	ldr	r3, [pc, #32]	; (8003c1c <HAL_RCC_OscConfig+0x504>)
 8003bfa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003bfe:	4a07      	ldr	r2, [pc, #28]	; (8003c1c <HAL_RCC_OscConfig+0x504>)
 8003c00:	f043 0304 	orr.w	r3, r3, #4
 8003c04:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003c08:	4b04      	ldr	r3, [pc, #16]	; (8003c1c <HAL_RCC_OscConfig+0x504>)
 8003c0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c0e:	4a03      	ldr	r2, [pc, #12]	; (8003c1c <HAL_RCC_OscConfig+0x504>)
 8003c10:	f043 0301 	orr.w	r3, r3, #1
 8003c14:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003c18:	e014      	b.n	8003c44 <HAL_RCC_OscConfig+0x52c>
 8003c1a:	bf00      	nop
 8003c1c:	40021000 	.word	0x40021000
 8003c20:	40007000 	.word	0x40007000
 8003c24:	4b9c      	ldr	r3, [pc, #624]	; (8003e98 <HAL_RCC_OscConfig+0x780>)
 8003c26:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c2a:	4a9b      	ldr	r2, [pc, #620]	; (8003e98 <HAL_RCC_OscConfig+0x780>)
 8003c2c:	f023 0301 	bic.w	r3, r3, #1
 8003c30:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003c34:	4b98      	ldr	r3, [pc, #608]	; (8003e98 <HAL_RCC_OscConfig+0x780>)
 8003c36:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c3a:	4a97      	ldr	r2, [pc, #604]	; (8003e98 <HAL_RCC_OscConfig+0x780>)
 8003c3c:	f023 0304 	bic.w	r3, r3, #4
 8003c40:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	689b      	ldr	r3, [r3, #8]
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d016      	beq.n	8003c7a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c4c:	f7fe febc 	bl	80029c8 <HAL_GetTick>
 8003c50:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003c52:	e00a      	b.n	8003c6a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c54:	f7fe feb8 	bl	80029c8 <HAL_GetTick>
 8003c58:	4602      	mov	r2, r0
 8003c5a:	693b      	ldr	r3, [r7, #16]
 8003c5c:	1ad3      	subs	r3, r2, r3
 8003c5e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c62:	4293      	cmp	r3, r2
 8003c64:	d901      	bls.n	8003c6a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8003c66:	2303      	movs	r3, #3
 8003c68:	e12a      	b.n	8003ec0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003c6a:	4b8b      	ldr	r3, [pc, #556]	; (8003e98 <HAL_RCC_OscConfig+0x780>)
 8003c6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c70:	f003 0302 	and.w	r3, r3, #2
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d0ed      	beq.n	8003c54 <HAL_RCC_OscConfig+0x53c>
 8003c78:	e015      	b.n	8003ca6 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c7a:	f7fe fea5 	bl	80029c8 <HAL_GetTick>
 8003c7e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003c80:	e00a      	b.n	8003c98 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c82:	f7fe fea1 	bl	80029c8 <HAL_GetTick>
 8003c86:	4602      	mov	r2, r0
 8003c88:	693b      	ldr	r3, [r7, #16]
 8003c8a:	1ad3      	subs	r3, r2, r3
 8003c8c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c90:	4293      	cmp	r3, r2
 8003c92:	d901      	bls.n	8003c98 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003c94:	2303      	movs	r3, #3
 8003c96:	e113      	b.n	8003ec0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003c98:	4b7f      	ldr	r3, [pc, #508]	; (8003e98 <HAL_RCC_OscConfig+0x780>)
 8003c9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c9e:	f003 0302 	and.w	r3, r3, #2
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d1ed      	bne.n	8003c82 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003ca6:	7ffb      	ldrb	r3, [r7, #31]
 8003ca8:	2b01      	cmp	r3, #1
 8003caa:	d105      	bne.n	8003cb8 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003cac:	4b7a      	ldr	r3, [pc, #488]	; (8003e98 <HAL_RCC_OscConfig+0x780>)
 8003cae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003cb0:	4a79      	ldr	r2, [pc, #484]	; (8003e98 <HAL_RCC_OscConfig+0x780>)
 8003cb2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003cb6:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	f000 80fe 	beq.w	8003ebe <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cc6:	2b02      	cmp	r3, #2
 8003cc8:	f040 80d0 	bne.w	8003e6c <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003ccc:	4b72      	ldr	r3, [pc, #456]	; (8003e98 <HAL_RCC_OscConfig+0x780>)
 8003cce:	68db      	ldr	r3, [r3, #12]
 8003cd0:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003cd2:	697b      	ldr	r3, [r7, #20]
 8003cd4:	f003 0203 	and.w	r2, r3, #3
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cdc:	429a      	cmp	r2, r3
 8003cde:	d130      	bne.n	8003d42 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003ce0:	697b      	ldr	r3, [r7, #20]
 8003ce2:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cea:	3b01      	subs	r3, #1
 8003cec:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003cee:	429a      	cmp	r2, r3
 8003cf0:	d127      	bne.n	8003d42 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003cf2:	697b      	ldr	r3, [r7, #20]
 8003cf4:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003cfc:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003cfe:	429a      	cmp	r2, r3
 8003d00:	d11f      	bne.n	8003d42 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003d02:	697b      	ldr	r3, [r7, #20]
 8003d04:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d08:	687a      	ldr	r2, [r7, #4]
 8003d0a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003d0c:	2a07      	cmp	r2, #7
 8003d0e:	bf14      	ite	ne
 8003d10:	2201      	movne	r2, #1
 8003d12:	2200      	moveq	r2, #0
 8003d14:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003d16:	4293      	cmp	r3, r2
 8003d18:	d113      	bne.n	8003d42 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003d1a:	697b      	ldr	r3, [r7, #20]
 8003d1c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d24:	085b      	lsrs	r3, r3, #1
 8003d26:	3b01      	subs	r3, #1
 8003d28:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003d2a:	429a      	cmp	r2, r3
 8003d2c:	d109      	bne.n	8003d42 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003d2e:	697b      	ldr	r3, [r7, #20]
 8003d30:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d38:	085b      	lsrs	r3, r3, #1
 8003d3a:	3b01      	subs	r3, #1
 8003d3c:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003d3e:	429a      	cmp	r2, r3
 8003d40:	d06e      	beq.n	8003e20 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003d42:	69bb      	ldr	r3, [r7, #24]
 8003d44:	2b0c      	cmp	r3, #12
 8003d46:	d069      	beq.n	8003e1c <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003d48:	4b53      	ldr	r3, [pc, #332]	; (8003e98 <HAL_RCC_OscConfig+0x780>)
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d105      	bne.n	8003d60 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8003d54:	4b50      	ldr	r3, [pc, #320]	; (8003e98 <HAL_RCC_OscConfig+0x780>)
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d001      	beq.n	8003d64 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8003d60:	2301      	movs	r3, #1
 8003d62:	e0ad      	b.n	8003ec0 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003d64:	4b4c      	ldr	r3, [pc, #304]	; (8003e98 <HAL_RCC_OscConfig+0x780>)
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	4a4b      	ldr	r2, [pc, #300]	; (8003e98 <HAL_RCC_OscConfig+0x780>)
 8003d6a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003d6e:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003d70:	f7fe fe2a 	bl	80029c8 <HAL_GetTick>
 8003d74:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003d76:	e008      	b.n	8003d8a <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d78:	f7fe fe26 	bl	80029c8 <HAL_GetTick>
 8003d7c:	4602      	mov	r2, r0
 8003d7e:	693b      	ldr	r3, [r7, #16]
 8003d80:	1ad3      	subs	r3, r2, r3
 8003d82:	2b02      	cmp	r3, #2
 8003d84:	d901      	bls.n	8003d8a <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8003d86:	2303      	movs	r3, #3
 8003d88:	e09a      	b.n	8003ec0 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003d8a:	4b43      	ldr	r3, [pc, #268]	; (8003e98 <HAL_RCC_OscConfig+0x780>)
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d1f0      	bne.n	8003d78 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003d96:	4b40      	ldr	r3, [pc, #256]	; (8003e98 <HAL_RCC_OscConfig+0x780>)
 8003d98:	68da      	ldr	r2, [r3, #12]
 8003d9a:	4b40      	ldr	r3, [pc, #256]	; (8003e9c <HAL_RCC_OscConfig+0x784>)
 8003d9c:	4013      	ands	r3, r2
 8003d9e:	687a      	ldr	r2, [r7, #4]
 8003da0:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8003da2:	687a      	ldr	r2, [r7, #4]
 8003da4:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003da6:	3a01      	subs	r2, #1
 8003da8:	0112      	lsls	r2, r2, #4
 8003daa:	4311      	orrs	r1, r2
 8003dac:	687a      	ldr	r2, [r7, #4]
 8003dae:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003db0:	0212      	lsls	r2, r2, #8
 8003db2:	4311      	orrs	r1, r2
 8003db4:	687a      	ldr	r2, [r7, #4]
 8003db6:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003db8:	0852      	lsrs	r2, r2, #1
 8003dba:	3a01      	subs	r2, #1
 8003dbc:	0552      	lsls	r2, r2, #21
 8003dbe:	4311      	orrs	r1, r2
 8003dc0:	687a      	ldr	r2, [r7, #4]
 8003dc2:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003dc4:	0852      	lsrs	r2, r2, #1
 8003dc6:	3a01      	subs	r2, #1
 8003dc8:	0652      	lsls	r2, r2, #25
 8003dca:	4311      	orrs	r1, r2
 8003dcc:	687a      	ldr	r2, [r7, #4]
 8003dce:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003dd0:	0912      	lsrs	r2, r2, #4
 8003dd2:	0452      	lsls	r2, r2, #17
 8003dd4:	430a      	orrs	r2, r1
 8003dd6:	4930      	ldr	r1, [pc, #192]	; (8003e98 <HAL_RCC_OscConfig+0x780>)
 8003dd8:	4313      	orrs	r3, r2
 8003dda:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003ddc:	4b2e      	ldr	r3, [pc, #184]	; (8003e98 <HAL_RCC_OscConfig+0x780>)
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	4a2d      	ldr	r2, [pc, #180]	; (8003e98 <HAL_RCC_OscConfig+0x780>)
 8003de2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003de6:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003de8:	4b2b      	ldr	r3, [pc, #172]	; (8003e98 <HAL_RCC_OscConfig+0x780>)
 8003dea:	68db      	ldr	r3, [r3, #12]
 8003dec:	4a2a      	ldr	r2, [pc, #168]	; (8003e98 <HAL_RCC_OscConfig+0x780>)
 8003dee:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003df2:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003df4:	f7fe fde8 	bl	80029c8 <HAL_GetTick>
 8003df8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003dfa:	e008      	b.n	8003e0e <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003dfc:	f7fe fde4 	bl	80029c8 <HAL_GetTick>
 8003e00:	4602      	mov	r2, r0
 8003e02:	693b      	ldr	r3, [r7, #16]
 8003e04:	1ad3      	subs	r3, r2, r3
 8003e06:	2b02      	cmp	r3, #2
 8003e08:	d901      	bls.n	8003e0e <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8003e0a:	2303      	movs	r3, #3
 8003e0c:	e058      	b.n	8003ec0 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003e0e:	4b22      	ldr	r3, [pc, #136]	; (8003e98 <HAL_RCC_OscConfig+0x780>)
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d0f0      	beq.n	8003dfc <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003e1a:	e050      	b.n	8003ebe <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003e1c:	2301      	movs	r3, #1
 8003e1e:	e04f      	b.n	8003ec0 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003e20:	4b1d      	ldr	r3, [pc, #116]	; (8003e98 <HAL_RCC_OscConfig+0x780>)
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d148      	bne.n	8003ebe <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003e2c:	4b1a      	ldr	r3, [pc, #104]	; (8003e98 <HAL_RCC_OscConfig+0x780>)
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	4a19      	ldr	r2, [pc, #100]	; (8003e98 <HAL_RCC_OscConfig+0x780>)
 8003e32:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003e36:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003e38:	4b17      	ldr	r3, [pc, #92]	; (8003e98 <HAL_RCC_OscConfig+0x780>)
 8003e3a:	68db      	ldr	r3, [r3, #12]
 8003e3c:	4a16      	ldr	r2, [pc, #88]	; (8003e98 <HAL_RCC_OscConfig+0x780>)
 8003e3e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003e42:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003e44:	f7fe fdc0 	bl	80029c8 <HAL_GetTick>
 8003e48:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003e4a:	e008      	b.n	8003e5e <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e4c:	f7fe fdbc 	bl	80029c8 <HAL_GetTick>
 8003e50:	4602      	mov	r2, r0
 8003e52:	693b      	ldr	r3, [r7, #16]
 8003e54:	1ad3      	subs	r3, r2, r3
 8003e56:	2b02      	cmp	r3, #2
 8003e58:	d901      	bls.n	8003e5e <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8003e5a:	2303      	movs	r3, #3
 8003e5c:	e030      	b.n	8003ec0 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003e5e:	4b0e      	ldr	r3, [pc, #56]	; (8003e98 <HAL_RCC_OscConfig+0x780>)
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d0f0      	beq.n	8003e4c <HAL_RCC_OscConfig+0x734>
 8003e6a:	e028      	b.n	8003ebe <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003e6c:	69bb      	ldr	r3, [r7, #24]
 8003e6e:	2b0c      	cmp	r3, #12
 8003e70:	d023      	beq.n	8003eba <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e72:	4b09      	ldr	r3, [pc, #36]	; (8003e98 <HAL_RCC_OscConfig+0x780>)
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	4a08      	ldr	r2, [pc, #32]	; (8003e98 <HAL_RCC_OscConfig+0x780>)
 8003e78:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003e7c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e7e:	f7fe fda3 	bl	80029c8 <HAL_GetTick>
 8003e82:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003e84:	e00c      	b.n	8003ea0 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e86:	f7fe fd9f 	bl	80029c8 <HAL_GetTick>
 8003e8a:	4602      	mov	r2, r0
 8003e8c:	693b      	ldr	r3, [r7, #16]
 8003e8e:	1ad3      	subs	r3, r2, r3
 8003e90:	2b02      	cmp	r3, #2
 8003e92:	d905      	bls.n	8003ea0 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8003e94:	2303      	movs	r3, #3
 8003e96:	e013      	b.n	8003ec0 <HAL_RCC_OscConfig+0x7a8>
 8003e98:	40021000 	.word	0x40021000
 8003e9c:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003ea0:	4b09      	ldr	r3, [pc, #36]	; (8003ec8 <HAL_RCC_OscConfig+0x7b0>)
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d1ec      	bne.n	8003e86 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8003eac:	4b06      	ldr	r3, [pc, #24]	; (8003ec8 <HAL_RCC_OscConfig+0x7b0>)
 8003eae:	68da      	ldr	r2, [r3, #12]
 8003eb0:	4905      	ldr	r1, [pc, #20]	; (8003ec8 <HAL_RCC_OscConfig+0x7b0>)
 8003eb2:	4b06      	ldr	r3, [pc, #24]	; (8003ecc <HAL_RCC_OscConfig+0x7b4>)
 8003eb4:	4013      	ands	r3, r2
 8003eb6:	60cb      	str	r3, [r1, #12]
 8003eb8:	e001      	b.n	8003ebe <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003eba:	2301      	movs	r3, #1
 8003ebc:	e000      	b.n	8003ec0 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8003ebe:	2300      	movs	r3, #0
}
 8003ec0:	4618      	mov	r0, r3
 8003ec2:	3720      	adds	r7, #32
 8003ec4:	46bd      	mov	sp, r7
 8003ec6:	bd80      	pop	{r7, pc}
 8003ec8:	40021000 	.word	0x40021000
 8003ecc:	feeefffc 	.word	0xfeeefffc

08003ed0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003ed0:	b580      	push	{r7, lr}
 8003ed2:	b084      	sub	sp, #16
 8003ed4:	af00      	add	r7, sp, #0
 8003ed6:	6078      	str	r0, [r7, #4]
 8003ed8:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d101      	bne.n	8003ee4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003ee0:	2301      	movs	r3, #1
 8003ee2:	e0e7      	b.n	80040b4 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003ee4:	4b75      	ldr	r3, [pc, #468]	; (80040bc <HAL_RCC_ClockConfig+0x1ec>)
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	f003 0307 	and.w	r3, r3, #7
 8003eec:	683a      	ldr	r2, [r7, #0]
 8003eee:	429a      	cmp	r2, r3
 8003ef0:	d910      	bls.n	8003f14 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ef2:	4b72      	ldr	r3, [pc, #456]	; (80040bc <HAL_RCC_ClockConfig+0x1ec>)
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	f023 0207 	bic.w	r2, r3, #7
 8003efa:	4970      	ldr	r1, [pc, #448]	; (80040bc <HAL_RCC_ClockConfig+0x1ec>)
 8003efc:	683b      	ldr	r3, [r7, #0]
 8003efe:	4313      	orrs	r3, r2
 8003f00:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f02:	4b6e      	ldr	r3, [pc, #440]	; (80040bc <HAL_RCC_ClockConfig+0x1ec>)
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	f003 0307 	and.w	r3, r3, #7
 8003f0a:	683a      	ldr	r2, [r7, #0]
 8003f0c:	429a      	cmp	r2, r3
 8003f0e:	d001      	beq.n	8003f14 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003f10:	2301      	movs	r3, #1
 8003f12:	e0cf      	b.n	80040b4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	f003 0302 	and.w	r3, r3, #2
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d010      	beq.n	8003f42 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	689a      	ldr	r2, [r3, #8]
 8003f24:	4b66      	ldr	r3, [pc, #408]	; (80040c0 <HAL_RCC_ClockConfig+0x1f0>)
 8003f26:	689b      	ldr	r3, [r3, #8]
 8003f28:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003f2c:	429a      	cmp	r2, r3
 8003f2e:	d908      	bls.n	8003f42 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003f30:	4b63      	ldr	r3, [pc, #396]	; (80040c0 <HAL_RCC_ClockConfig+0x1f0>)
 8003f32:	689b      	ldr	r3, [r3, #8]
 8003f34:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	689b      	ldr	r3, [r3, #8]
 8003f3c:	4960      	ldr	r1, [pc, #384]	; (80040c0 <HAL_RCC_ClockConfig+0x1f0>)
 8003f3e:	4313      	orrs	r3, r2
 8003f40:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	f003 0301 	and.w	r3, r3, #1
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d04c      	beq.n	8003fe8 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	685b      	ldr	r3, [r3, #4]
 8003f52:	2b03      	cmp	r3, #3
 8003f54:	d107      	bne.n	8003f66 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003f56:	4b5a      	ldr	r3, [pc, #360]	; (80040c0 <HAL_RCC_ClockConfig+0x1f0>)
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d121      	bne.n	8003fa6 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8003f62:	2301      	movs	r3, #1
 8003f64:	e0a6      	b.n	80040b4 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	685b      	ldr	r3, [r3, #4]
 8003f6a:	2b02      	cmp	r3, #2
 8003f6c:	d107      	bne.n	8003f7e <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003f6e:	4b54      	ldr	r3, [pc, #336]	; (80040c0 <HAL_RCC_ClockConfig+0x1f0>)
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d115      	bne.n	8003fa6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003f7a:	2301      	movs	r3, #1
 8003f7c:	e09a      	b.n	80040b4 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	685b      	ldr	r3, [r3, #4]
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d107      	bne.n	8003f96 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003f86:	4b4e      	ldr	r3, [pc, #312]	; (80040c0 <HAL_RCC_ClockConfig+0x1f0>)
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	f003 0302 	and.w	r3, r3, #2
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d109      	bne.n	8003fa6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003f92:	2301      	movs	r3, #1
 8003f94:	e08e      	b.n	80040b4 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003f96:	4b4a      	ldr	r3, [pc, #296]	; (80040c0 <HAL_RCC_ClockConfig+0x1f0>)
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d101      	bne.n	8003fa6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003fa2:	2301      	movs	r3, #1
 8003fa4:	e086      	b.n	80040b4 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003fa6:	4b46      	ldr	r3, [pc, #280]	; (80040c0 <HAL_RCC_ClockConfig+0x1f0>)
 8003fa8:	689b      	ldr	r3, [r3, #8]
 8003faa:	f023 0203 	bic.w	r2, r3, #3
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	685b      	ldr	r3, [r3, #4]
 8003fb2:	4943      	ldr	r1, [pc, #268]	; (80040c0 <HAL_RCC_ClockConfig+0x1f0>)
 8003fb4:	4313      	orrs	r3, r2
 8003fb6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003fb8:	f7fe fd06 	bl	80029c8 <HAL_GetTick>
 8003fbc:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003fbe:	e00a      	b.n	8003fd6 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003fc0:	f7fe fd02 	bl	80029c8 <HAL_GetTick>
 8003fc4:	4602      	mov	r2, r0
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	1ad3      	subs	r3, r2, r3
 8003fca:	f241 3288 	movw	r2, #5000	; 0x1388
 8003fce:	4293      	cmp	r3, r2
 8003fd0:	d901      	bls.n	8003fd6 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8003fd2:	2303      	movs	r3, #3
 8003fd4:	e06e      	b.n	80040b4 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003fd6:	4b3a      	ldr	r3, [pc, #232]	; (80040c0 <HAL_RCC_ClockConfig+0x1f0>)
 8003fd8:	689b      	ldr	r3, [r3, #8]
 8003fda:	f003 020c 	and.w	r2, r3, #12
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	685b      	ldr	r3, [r3, #4]
 8003fe2:	009b      	lsls	r3, r3, #2
 8003fe4:	429a      	cmp	r2, r3
 8003fe6:	d1eb      	bne.n	8003fc0 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	f003 0302 	and.w	r3, r3, #2
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d010      	beq.n	8004016 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	689a      	ldr	r2, [r3, #8]
 8003ff8:	4b31      	ldr	r3, [pc, #196]	; (80040c0 <HAL_RCC_ClockConfig+0x1f0>)
 8003ffa:	689b      	ldr	r3, [r3, #8]
 8003ffc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004000:	429a      	cmp	r2, r3
 8004002:	d208      	bcs.n	8004016 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004004:	4b2e      	ldr	r3, [pc, #184]	; (80040c0 <HAL_RCC_ClockConfig+0x1f0>)
 8004006:	689b      	ldr	r3, [r3, #8]
 8004008:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	689b      	ldr	r3, [r3, #8]
 8004010:	492b      	ldr	r1, [pc, #172]	; (80040c0 <HAL_RCC_ClockConfig+0x1f0>)
 8004012:	4313      	orrs	r3, r2
 8004014:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004016:	4b29      	ldr	r3, [pc, #164]	; (80040bc <HAL_RCC_ClockConfig+0x1ec>)
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	f003 0307 	and.w	r3, r3, #7
 800401e:	683a      	ldr	r2, [r7, #0]
 8004020:	429a      	cmp	r2, r3
 8004022:	d210      	bcs.n	8004046 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004024:	4b25      	ldr	r3, [pc, #148]	; (80040bc <HAL_RCC_ClockConfig+0x1ec>)
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	f023 0207 	bic.w	r2, r3, #7
 800402c:	4923      	ldr	r1, [pc, #140]	; (80040bc <HAL_RCC_ClockConfig+0x1ec>)
 800402e:	683b      	ldr	r3, [r7, #0]
 8004030:	4313      	orrs	r3, r2
 8004032:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004034:	4b21      	ldr	r3, [pc, #132]	; (80040bc <HAL_RCC_ClockConfig+0x1ec>)
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	f003 0307 	and.w	r3, r3, #7
 800403c:	683a      	ldr	r2, [r7, #0]
 800403e:	429a      	cmp	r2, r3
 8004040:	d001      	beq.n	8004046 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8004042:	2301      	movs	r3, #1
 8004044:	e036      	b.n	80040b4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	f003 0304 	and.w	r3, r3, #4
 800404e:	2b00      	cmp	r3, #0
 8004050:	d008      	beq.n	8004064 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004052:	4b1b      	ldr	r3, [pc, #108]	; (80040c0 <HAL_RCC_ClockConfig+0x1f0>)
 8004054:	689b      	ldr	r3, [r3, #8]
 8004056:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	68db      	ldr	r3, [r3, #12]
 800405e:	4918      	ldr	r1, [pc, #96]	; (80040c0 <HAL_RCC_ClockConfig+0x1f0>)
 8004060:	4313      	orrs	r3, r2
 8004062:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	f003 0308 	and.w	r3, r3, #8
 800406c:	2b00      	cmp	r3, #0
 800406e:	d009      	beq.n	8004084 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004070:	4b13      	ldr	r3, [pc, #76]	; (80040c0 <HAL_RCC_ClockConfig+0x1f0>)
 8004072:	689b      	ldr	r3, [r3, #8]
 8004074:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	691b      	ldr	r3, [r3, #16]
 800407c:	00db      	lsls	r3, r3, #3
 800407e:	4910      	ldr	r1, [pc, #64]	; (80040c0 <HAL_RCC_ClockConfig+0x1f0>)
 8004080:	4313      	orrs	r3, r2
 8004082:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004084:	f000 f824 	bl	80040d0 <HAL_RCC_GetSysClockFreq>
 8004088:	4602      	mov	r2, r0
 800408a:	4b0d      	ldr	r3, [pc, #52]	; (80040c0 <HAL_RCC_ClockConfig+0x1f0>)
 800408c:	689b      	ldr	r3, [r3, #8]
 800408e:	091b      	lsrs	r3, r3, #4
 8004090:	f003 030f 	and.w	r3, r3, #15
 8004094:	490b      	ldr	r1, [pc, #44]	; (80040c4 <HAL_RCC_ClockConfig+0x1f4>)
 8004096:	5ccb      	ldrb	r3, [r1, r3]
 8004098:	f003 031f 	and.w	r3, r3, #31
 800409c:	fa22 f303 	lsr.w	r3, r2, r3
 80040a0:	4a09      	ldr	r2, [pc, #36]	; (80040c8 <HAL_RCC_ClockConfig+0x1f8>)
 80040a2:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80040a4:	4b09      	ldr	r3, [pc, #36]	; (80040cc <HAL_RCC_ClockConfig+0x1fc>)
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	4618      	mov	r0, r3
 80040aa:	f7fe fc3d 	bl	8002928 <HAL_InitTick>
 80040ae:	4603      	mov	r3, r0
 80040b0:	72fb      	strb	r3, [r7, #11]

  return status;
 80040b2:	7afb      	ldrb	r3, [r7, #11]
}
 80040b4:	4618      	mov	r0, r3
 80040b6:	3710      	adds	r7, #16
 80040b8:	46bd      	mov	sp, r7
 80040ba:	bd80      	pop	{r7, pc}
 80040bc:	40022000 	.word	0x40022000
 80040c0:	40021000 	.word	0x40021000
 80040c4:	0800ff38 	.word	0x0800ff38
 80040c8:	20000004 	.word	0x20000004
 80040cc:	20000008 	.word	0x20000008

080040d0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80040d0:	b480      	push	{r7}
 80040d2:	b089      	sub	sp, #36	; 0x24
 80040d4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80040d6:	2300      	movs	r3, #0
 80040d8:	61fb      	str	r3, [r7, #28]
 80040da:	2300      	movs	r3, #0
 80040dc:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80040de:	4b3e      	ldr	r3, [pc, #248]	; (80041d8 <HAL_RCC_GetSysClockFreq+0x108>)
 80040e0:	689b      	ldr	r3, [r3, #8]
 80040e2:	f003 030c 	and.w	r3, r3, #12
 80040e6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80040e8:	4b3b      	ldr	r3, [pc, #236]	; (80041d8 <HAL_RCC_GetSysClockFreq+0x108>)
 80040ea:	68db      	ldr	r3, [r3, #12]
 80040ec:	f003 0303 	and.w	r3, r3, #3
 80040f0:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80040f2:	693b      	ldr	r3, [r7, #16]
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d005      	beq.n	8004104 <HAL_RCC_GetSysClockFreq+0x34>
 80040f8:	693b      	ldr	r3, [r7, #16]
 80040fa:	2b0c      	cmp	r3, #12
 80040fc:	d121      	bne.n	8004142 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	2b01      	cmp	r3, #1
 8004102:	d11e      	bne.n	8004142 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004104:	4b34      	ldr	r3, [pc, #208]	; (80041d8 <HAL_RCC_GetSysClockFreq+0x108>)
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	f003 0308 	and.w	r3, r3, #8
 800410c:	2b00      	cmp	r3, #0
 800410e:	d107      	bne.n	8004120 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004110:	4b31      	ldr	r3, [pc, #196]	; (80041d8 <HAL_RCC_GetSysClockFreq+0x108>)
 8004112:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004116:	0a1b      	lsrs	r3, r3, #8
 8004118:	f003 030f 	and.w	r3, r3, #15
 800411c:	61fb      	str	r3, [r7, #28]
 800411e:	e005      	b.n	800412c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004120:	4b2d      	ldr	r3, [pc, #180]	; (80041d8 <HAL_RCC_GetSysClockFreq+0x108>)
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	091b      	lsrs	r3, r3, #4
 8004126:	f003 030f 	and.w	r3, r3, #15
 800412a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800412c:	4a2b      	ldr	r2, [pc, #172]	; (80041dc <HAL_RCC_GetSysClockFreq+0x10c>)
 800412e:	69fb      	ldr	r3, [r7, #28]
 8004130:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004134:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004136:	693b      	ldr	r3, [r7, #16]
 8004138:	2b00      	cmp	r3, #0
 800413a:	d10d      	bne.n	8004158 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800413c:	69fb      	ldr	r3, [r7, #28]
 800413e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004140:	e00a      	b.n	8004158 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8004142:	693b      	ldr	r3, [r7, #16]
 8004144:	2b04      	cmp	r3, #4
 8004146:	d102      	bne.n	800414e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004148:	4b25      	ldr	r3, [pc, #148]	; (80041e0 <HAL_RCC_GetSysClockFreq+0x110>)
 800414a:	61bb      	str	r3, [r7, #24]
 800414c:	e004      	b.n	8004158 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800414e:	693b      	ldr	r3, [r7, #16]
 8004150:	2b08      	cmp	r3, #8
 8004152:	d101      	bne.n	8004158 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004154:	4b23      	ldr	r3, [pc, #140]	; (80041e4 <HAL_RCC_GetSysClockFreq+0x114>)
 8004156:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004158:	693b      	ldr	r3, [r7, #16]
 800415a:	2b0c      	cmp	r3, #12
 800415c:	d134      	bne.n	80041c8 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800415e:	4b1e      	ldr	r3, [pc, #120]	; (80041d8 <HAL_RCC_GetSysClockFreq+0x108>)
 8004160:	68db      	ldr	r3, [r3, #12]
 8004162:	f003 0303 	and.w	r3, r3, #3
 8004166:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004168:	68bb      	ldr	r3, [r7, #8]
 800416a:	2b02      	cmp	r3, #2
 800416c:	d003      	beq.n	8004176 <HAL_RCC_GetSysClockFreq+0xa6>
 800416e:	68bb      	ldr	r3, [r7, #8]
 8004170:	2b03      	cmp	r3, #3
 8004172:	d003      	beq.n	800417c <HAL_RCC_GetSysClockFreq+0xac>
 8004174:	e005      	b.n	8004182 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8004176:	4b1a      	ldr	r3, [pc, #104]	; (80041e0 <HAL_RCC_GetSysClockFreq+0x110>)
 8004178:	617b      	str	r3, [r7, #20]
      break;
 800417a:	e005      	b.n	8004188 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800417c:	4b19      	ldr	r3, [pc, #100]	; (80041e4 <HAL_RCC_GetSysClockFreq+0x114>)
 800417e:	617b      	str	r3, [r7, #20]
      break;
 8004180:	e002      	b.n	8004188 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8004182:	69fb      	ldr	r3, [r7, #28]
 8004184:	617b      	str	r3, [r7, #20]
      break;
 8004186:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004188:	4b13      	ldr	r3, [pc, #76]	; (80041d8 <HAL_RCC_GetSysClockFreq+0x108>)
 800418a:	68db      	ldr	r3, [r3, #12]
 800418c:	091b      	lsrs	r3, r3, #4
 800418e:	f003 0307 	and.w	r3, r3, #7
 8004192:	3301      	adds	r3, #1
 8004194:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004196:	4b10      	ldr	r3, [pc, #64]	; (80041d8 <HAL_RCC_GetSysClockFreq+0x108>)
 8004198:	68db      	ldr	r3, [r3, #12]
 800419a:	0a1b      	lsrs	r3, r3, #8
 800419c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80041a0:	697a      	ldr	r2, [r7, #20]
 80041a2:	fb03 f202 	mul.w	r2, r3, r2
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80041ac:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80041ae:	4b0a      	ldr	r3, [pc, #40]	; (80041d8 <HAL_RCC_GetSysClockFreq+0x108>)
 80041b0:	68db      	ldr	r3, [r3, #12]
 80041b2:	0e5b      	lsrs	r3, r3, #25
 80041b4:	f003 0303 	and.w	r3, r3, #3
 80041b8:	3301      	adds	r3, #1
 80041ba:	005b      	lsls	r3, r3, #1
 80041bc:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80041be:	697a      	ldr	r2, [r7, #20]
 80041c0:	683b      	ldr	r3, [r7, #0]
 80041c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80041c6:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80041c8:	69bb      	ldr	r3, [r7, #24]
}
 80041ca:	4618      	mov	r0, r3
 80041cc:	3724      	adds	r7, #36	; 0x24
 80041ce:	46bd      	mov	sp, r7
 80041d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d4:	4770      	bx	lr
 80041d6:	bf00      	nop
 80041d8:	40021000 	.word	0x40021000
 80041dc:	0800ff50 	.word	0x0800ff50
 80041e0:	00f42400 	.word	0x00f42400
 80041e4:	007a1200 	.word	0x007a1200

080041e8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80041e8:	b480      	push	{r7}
 80041ea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80041ec:	4b03      	ldr	r3, [pc, #12]	; (80041fc <HAL_RCC_GetHCLKFreq+0x14>)
 80041ee:	681b      	ldr	r3, [r3, #0]
}
 80041f0:	4618      	mov	r0, r3
 80041f2:	46bd      	mov	sp, r7
 80041f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f8:	4770      	bx	lr
 80041fa:	bf00      	nop
 80041fc:	20000004 	.word	0x20000004

08004200 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004200:	b580      	push	{r7, lr}
 8004202:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004204:	f7ff fff0 	bl	80041e8 <HAL_RCC_GetHCLKFreq>
 8004208:	4602      	mov	r2, r0
 800420a:	4b06      	ldr	r3, [pc, #24]	; (8004224 <HAL_RCC_GetPCLK1Freq+0x24>)
 800420c:	689b      	ldr	r3, [r3, #8]
 800420e:	0a1b      	lsrs	r3, r3, #8
 8004210:	f003 0307 	and.w	r3, r3, #7
 8004214:	4904      	ldr	r1, [pc, #16]	; (8004228 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004216:	5ccb      	ldrb	r3, [r1, r3]
 8004218:	f003 031f 	and.w	r3, r3, #31
 800421c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004220:	4618      	mov	r0, r3
 8004222:	bd80      	pop	{r7, pc}
 8004224:	40021000 	.word	0x40021000
 8004228:	0800ff48 	.word	0x0800ff48

0800422c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800422c:	b580      	push	{r7, lr}
 800422e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004230:	f7ff ffda 	bl	80041e8 <HAL_RCC_GetHCLKFreq>
 8004234:	4602      	mov	r2, r0
 8004236:	4b06      	ldr	r3, [pc, #24]	; (8004250 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004238:	689b      	ldr	r3, [r3, #8]
 800423a:	0adb      	lsrs	r3, r3, #11
 800423c:	f003 0307 	and.w	r3, r3, #7
 8004240:	4904      	ldr	r1, [pc, #16]	; (8004254 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004242:	5ccb      	ldrb	r3, [r1, r3]
 8004244:	f003 031f 	and.w	r3, r3, #31
 8004248:	fa22 f303 	lsr.w	r3, r2, r3
}
 800424c:	4618      	mov	r0, r3
 800424e:	bd80      	pop	{r7, pc}
 8004250:	40021000 	.word	0x40021000
 8004254:	0800ff48 	.word	0x0800ff48

08004258 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004258:	b580      	push	{r7, lr}
 800425a:	b086      	sub	sp, #24
 800425c:	af00      	add	r7, sp, #0
 800425e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004260:	2300      	movs	r3, #0
 8004262:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004264:	4b2a      	ldr	r3, [pc, #168]	; (8004310 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004266:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004268:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800426c:	2b00      	cmp	r3, #0
 800426e:	d003      	beq.n	8004278 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004270:	f7ff f9ee 	bl	8003650 <HAL_PWREx_GetVoltageRange>
 8004274:	6178      	str	r0, [r7, #20]
 8004276:	e014      	b.n	80042a2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004278:	4b25      	ldr	r3, [pc, #148]	; (8004310 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800427a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800427c:	4a24      	ldr	r2, [pc, #144]	; (8004310 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800427e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004282:	6593      	str	r3, [r2, #88]	; 0x58
 8004284:	4b22      	ldr	r3, [pc, #136]	; (8004310 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004286:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004288:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800428c:	60fb      	str	r3, [r7, #12]
 800428e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004290:	f7ff f9de 	bl	8003650 <HAL_PWREx_GetVoltageRange>
 8004294:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004296:	4b1e      	ldr	r3, [pc, #120]	; (8004310 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004298:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800429a:	4a1d      	ldr	r2, [pc, #116]	; (8004310 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800429c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80042a0:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80042a2:	697b      	ldr	r3, [r7, #20]
 80042a4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80042a8:	d10b      	bne.n	80042c2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	2b80      	cmp	r3, #128	; 0x80
 80042ae:	d919      	bls.n	80042e4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	2ba0      	cmp	r3, #160	; 0xa0
 80042b4:	d902      	bls.n	80042bc <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80042b6:	2302      	movs	r3, #2
 80042b8:	613b      	str	r3, [r7, #16]
 80042ba:	e013      	b.n	80042e4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80042bc:	2301      	movs	r3, #1
 80042be:	613b      	str	r3, [r7, #16]
 80042c0:	e010      	b.n	80042e4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	2b80      	cmp	r3, #128	; 0x80
 80042c6:	d902      	bls.n	80042ce <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80042c8:	2303      	movs	r3, #3
 80042ca:	613b      	str	r3, [r7, #16]
 80042cc:	e00a      	b.n	80042e4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	2b80      	cmp	r3, #128	; 0x80
 80042d2:	d102      	bne.n	80042da <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80042d4:	2302      	movs	r3, #2
 80042d6:	613b      	str	r3, [r7, #16]
 80042d8:	e004      	b.n	80042e4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	2b70      	cmp	r3, #112	; 0x70
 80042de:	d101      	bne.n	80042e4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80042e0:	2301      	movs	r3, #1
 80042e2:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80042e4:	4b0b      	ldr	r3, [pc, #44]	; (8004314 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	f023 0207 	bic.w	r2, r3, #7
 80042ec:	4909      	ldr	r1, [pc, #36]	; (8004314 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80042ee:	693b      	ldr	r3, [r7, #16]
 80042f0:	4313      	orrs	r3, r2
 80042f2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80042f4:	4b07      	ldr	r3, [pc, #28]	; (8004314 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	f003 0307 	and.w	r3, r3, #7
 80042fc:	693a      	ldr	r2, [r7, #16]
 80042fe:	429a      	cmp	r2, r3
 8004300:	d001      	beq.n	8004306 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8004302:	2301      	movs	r3, #1
 8004304:	e000      	b.n	8004308 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8004306:	2300      	movs	r3, #0
}
 8004308:	4618      	mov	r0, r3
 800430a:	3718      	adds	r7, #24
 800430c:	46bd      	mov	sp, r7
 800430e:	bd80      	pop	{r7, pc}
 8004310:	40021000 	.word	0x40021000
 8004314:	40022000 	.word	0x40022000

08004318 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004318:	b580      	push	{r7, lr}
 800431a:	b086      	sub	sp, #24
 800431c:	af00      	add	r7, sp, #0
 800431e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004320:	2300      	movs	r3, #0
 8004322:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004324:	2300      	movs	r3, #0
 8004326:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004330:	2b00      	cmp	r3, #0
 8004332:	d041      	beq.n	80043b8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004338:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800433c:	d02a      	beq.n	8004394 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800433e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004342:	d824      	bhi.n	800438e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004344:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004348:	d008      	beq.n	800435c <HAL_RCCEx_PeriphCLKConfig+0x44>
 800434a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800434e:	d81e      	bhi.n	800438e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004350:	2b00      	cmp	r3, #0
 8004352:	d00a      	beq.n	800436a <HAL_RCCEx_PeriphCLKConfig+0x52>
 8004354:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004358:	d010      	beq.n	800437c <HAL_RCCEx_PeriphCLKConfig+0x64>
 800435a:	e018      	b.n	800438e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800435c:	4b86      	ldr	r3, [pc, #536]	; (8004578 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800435e:	68db      	ldr	r3, [r3, #12]
 8004360:	4a85      	ldr	r2, [pc, #532]	; (8004578 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004362:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004366:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004368:	e015      	b.n	8004396 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	3304      	adds	r3, #4
 800436e:	2100      	movs	r1, #0
 8004370:	4618      	mov	r0, r3
 8004372:	f000 fabb 	bl	80048ec <RCCEx_PLLSAI1_Config>
 8004376:	4603      	mov	r3, r0
 8004378:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800437a:	e00c      	b.n	8004396 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	3320      	adds	r3, #32
 8004380:	2100      	movs	r1, #0
 8004382:	4618      	mov	r0, r3
 8004384:	f000 fba6 	bl	8004ad4 <RCCEx_PLLSAI2_Config>
 8004388:	4603      	mov	r3, r0
 800438a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800438c:	e003      	b.n	8004396 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800438e:	2301      	movs	r3, #1
 8004390:	74fb      	strb	r3, [r7, #19]
      break;
 8004392:	e000      	b.n	8004396 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8004394:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004396:	7cfb      	ldrb	r3, [r7, #19]
 8004398:	2b00      	cmp	r3, #0
 800439a:	d10b      	bne.n	80043b4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800439c:	4b76      	ldr	r3, [pc, #472]	; (8004578 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800439e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043a2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80043aa:	4973      	ldr	r1, [pc, #460]	; (8004578 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80043ac:	4313      	orrs	r3, r2
 80043ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80043b2:	e001      	b.n	80043b8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80043b4:	7cfb      	ldrb	r3, [r7, #19]
 80043b6:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d041      	beq.n	8004448 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80043c8:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80043cc:	d02a      	beq.n	8004424 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80043ce:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80043d2:	d824      	bhi.n	800441e <HAL_RCCEx_PeriphCLKConfig+0x106>
 80043d4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80043d8:	d008      	beq.n	80043ec <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80043da:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80043de:	d81e      	bhi.n	800441e <HAL_RCCEx_PeriphCLKConfig+0x106>
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d00a      	beq.n	80043fa <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80043e4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80043e8:	d010      	beq.n	800440c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80043ea:	e018      	b.n	800441e <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80043ec:	4b62      	ldr	r3, [pc, #392]	; (8004578 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80043ee:	68db      	ldr	r3, [r3, #12]
 80043f0:	4a61      	ldr	r2, [pc, #388]	; (8004578 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80043f2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80043f6:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80043f8:	e015      	b.n	8004426 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	3304      	adds	r3, #4
 80043fe:	2100      	movs	r1, #0
 8004400:	4618      	mov	r0, r3
 8004402:	f000 fa73 	bl	80048ec <RCCEx_PLLSAI1_Config>
 8004406:	4603      	mov	r3, r0
 8004408:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800440a:	e00c      	b.n	8004426 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	3320      	adds	r3, #32
 8004410:	2100      	movs	r1, #0
 8004412:	4618      	mov	r0, r3
 8004414:	f000 fb5e 	bl	8004ad4 <RCCEx_PLLSAI2_Config>
 8004418:	4603      	mov	r3, r0
 800441a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800441c:	e003      	b.n	8004426 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800441e:	2301      	movs	r3, #1
 8004420:	74fb      	strb	r3, [r7, #19]
      break;
 8004422:	e000      	b.n	8004426 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8004424:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004426:	7cfb      	ldrb	r3, [r7, #19]
 8004428:	2b00      	cmp	r3, #0
 800442a:	d10b      	bne.n	8004444 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800442c:	4b52      	ldr	r3, [pc, #328]	; (8004578 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800442e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004432:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800443a:	494f      	ldr	r1, [pc, #316]	; (8004578 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800443c:	4313      	orrs	r3, r2
 800443e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8004442:	e001      	b.n	8004448 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004444:	7cfb      	ldrb	r3, [r7, #19]
 8004446:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004450:	2b00      	cmp	r3, #0
 8004452:	f000 80a0 	beq.w	8004596 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004456:	2300      	movs	r3, #0
 8004458:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800445a:	4b47      	ldr	r3, [pc, #284]	; (8004578 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800445c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800445e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004462:	2b00      	cmp	r3, #0
 8004464:	d101      	bne.n	800446a <HAL_RCCEx_PeriphCLKConfig+0x152>
 8004466:	2301      	movs	r3, #1
 8004468:	e000      	b.n	800446c <HAL_RCCEx_PeriphCLKConfig+0x154>
 800446a:	2300      	movs	r3, #0
 800446c:	2b00      	cmp	r3, #0
 800446e:	d00d      	beq.n	800448c <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004470:	4b41      	ldr	r3, [pc, #260]	; (8004578 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004472:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004474:	4a40      	ldr	r2, [pc, #256]	; (8004578 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004476:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800447a:	6593      	str	r3, [r2, #88]	; 0x58
 800447c:	4b3e      	ldr	r3, [pc, #248]	; (8004578 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800447e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004480:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004484:	60bb      	str	r3, [r7, #8]
 8004486:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004488:	2301      	movs	r3, #1
 800448a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800448c:	4b3b      	ldr	r3, [pc, #236]	; (800457c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	4a3a      	ldr	r2, [pc, #232]	; (800457c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004492:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004496:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004498:	f7fe fa96 	bl	80029c8 <HAL_GetTick>
 800449c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800449e:	e009      	b.n	80044b4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80044a0:	f7fe fa92 	bl	80029c8 <HAL_GetTick>
 80044a4:	4602      	mov	r2, r0
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	1ad3      	subs	r3, r2, r3
 80044aa:	2b02      	cmp	r3, #2
 80044ac:	d902      	bls.n	80044b4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80044ae:	2303      	movs	r3, #3
 80044b0:	74fb      	strb	r3, [r7, #19]
        break;
 80044b2:	e005      	b.n	80044c0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80044b4:	4b31      	ldr	r3, [pc, #196]	; (800457c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d0ef      	beq.n	80044a0 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80044c0:	7cfb      	ldrb	r3, [r7, #19]
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d15c      	bne.n	8004580 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80044c6:	4b2c      	ldr	r3, [pc, #176]	; (8004578 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80044c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044cc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80044d0:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80044d2:	697b      	ldr	r3, [r7, #20]
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d01f      	beq.n	8004518 <HAL_RCCEx_PeriphCLKConfig+0x200>
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80044de:	697a      	ldr	r2, [r7, #20]
 80044e0:	429a      	cmp	r2, r3
 80044e2:	d019      	beq.n	8004518 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80044e4:	4b24      	ldr	r3, [pc, #144]	; (8004578 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80044e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044ea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80044ee:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80044f0:	4b21      	ldr	r3, [pc, #132]	; (8004578 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80044f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044f6:	4a20      	ldr	r2, [pc, #128]	; (8004578 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80044f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80044fc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004500:	4b1d      	ldr	r3, [pc, #116]	; (8004578 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004502:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004506:	4a1c      	ldr	r2, [pc, #112]	; (8004578 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004508:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800450c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004510:	4a19      	ldr	r2, [pc, #100]	; (8004578 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004512:	697b      	ldr	r3, [r7, #20]
 8004514:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004518:	697b      	ldr	r3, [r7, #20]
 800451a:	f003 0301 	and.w	r3, r3, #1
 800451e:	2b00      	cmp	r3, #0
 8004520:	d016      	beq.n	8004550 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004522:	f7fe fa51 	bl	80029c8 <HAL_GetTick>
 8004526:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004528:	e00b      	b.n	8004542 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800452a:	f7fe fa4d 	bl	80029c8 <HAL_GetTick>
 800452e:	4602      	mov	r2, r0
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	1ad3      	subs	r3, r2, r3
 8004534:	f241 3288 	movw	r2, #5000	; 0x1388
 8004538:	4293      	cmp	r3, r2
 800453a:	d902      	bls.n	8004542 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 800453c:	2303      	movs	r3, #3
 800453e:	74fb      	strb	r3, [r7, #19]
            break;
 8004540:	e006      	b.n	8004550 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004542:	4b0d      	ldr	r3, [pc, #52]	; (8004578 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004544:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004548:	f003 0302 	and.w	r3, r3, #2
 800454c:	2b00      	cmp	r3, #0
 800454e:	d0ec      	beq.n	800452a <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8004550:	7cfb      	ldrb	r3, [r7, #19]
 8004552:	2b00      	cmp	r3, #0
 8004554:	d10c      	bne.n	8004570 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004556:	4b08      	ldr	r3, [pc, #32]	; (8004578 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004558:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800455c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004566:	4904      	ldr	r1, [pc, #16]	; (8004578 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004568:	4313      	orrs	r3, r2
 800456a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800456e:	e009      	b.n	8004584 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004570:	7cfb      	ldrb	r3, [r7, #19]
 8004572:	74bb      	strb	r3, [r7, #18]
 8004574:	e006      	b.n	8004584 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8004576:	bf00      	nop
 8004578:	40021000 	.word	0x40021000
 800457c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004580:	7cfb      	ldrb	r3, [r7, #19]
 8004582:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004584:	7c7b      	ldrb	r3, [r7, #17]
 8004586:	2b01      	cmp	r3, #1
 8004588:	d105      	bne.n	8004596 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800458a:	4b9e      	ldr	r3, [pc, #632]	; (8004804 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800458c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800458e:	4a9d      	ldr	r2, [pc, #628]	; (8004804 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004590:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004594:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	f003 0301 	and.w	r3, r3, #1
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d00a      	beq.n	80045b8 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80045a2:	4b98      	ldr	r3, [pc, #608]	; (8004804 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80045a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045a8:	f023 0203 	bic.w	r2, r3, #3
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045b0:	4994      	ldr	r1, [pc, #592]	; (8004804 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80045b2:	4313      	orrs	r3, r2
 80045b4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	f003 0302 	and.w	r3, r3, #2
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d00a      	beq.n	80045da <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80045c4:	4b8f      	ldr	r3, [pc, #572]	; (8004804 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80045c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045ca:	f023 020c 	bic.w	r2, r3, #12
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045d2:	498c      	ldr	r1, [pc, #560]	; (8004804 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80045d4:	4313      	orrs	r3, r2
 80045d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	f003 0304 	and.w	r3, r3, #4
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d00a      	beq.n	80045fc <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80045e6:	4b87      	ldr	r3, [pc, #540]	; (8004804 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80045e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045ec:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045f4:	4983      	ldr	r1, [pc, #524]	; (8004804 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80045f6:	4313      	orrs	r3, r2
 80045f8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	f003 0308 	and.w	r3, r3, #8
 8004604:	2b00      	cmp	r3, #0
 8004606:	d00a      	beq.n	800461e <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004608:	4b7e      	ldr	r3, [pc, #504]	; (8004804 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800460a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800460e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004616:	497b      	ldr	r1, [pc, #492]	; (8004804 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004618:	4313      	orrs	r3, r2
 800461a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	f003 0310 	and.w	r3, r3, #16
 8004626:	2b00      	cmp	r3, #0
 8004628:	d00a      	beq.n	8004640 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800462a:	4b76      	ldr	r3, [pc, #472]	; (8004804 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800462c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004630:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004638:	4972      	ldr	r1, [pc, #456]	; (8004804 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800463a:	4313      	orrs	r3, r2
 800463c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	f003 0320 	and.w	r3, r3, #32
 8004648:	2b00      	cmp	r3, #0
 800464a:	d00a      	beq.n	8004662 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800464c:	4b6d      	ldr	r3, [pc, #436]	; (8004804 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800464e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004652:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800465a:	496a      	ldr	r1, [pc, #424]	; (8004804 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800465c:	4313      	orrs	r3, r2
 800465e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800466a:	2b00      	cmp	r3, #0
 800466c:	d00a      	beq.n	8004684 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800466e:	4b65      	ldr	r3, [pc, #404]	; (8004804 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004670:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004674:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800467c:	4961      	ldr	r1, [pc, #388]	; (8004804 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800467e:	4313      	orrs	r3, r2
 8004680:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800468c:	2b00      	cmp	r3, #0
 800468e:	d00a      	beq.n	80046a6 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004690:	4b5c      	ldr	r3, [pc, #368]	; (8004804 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004692:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004696:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800469e:	4959      	ldr	r1, [pc, #356]	; (8004804 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80046a0:	4313      	orrs	r3, r2
 80046a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d00a      	beq.n	80046c8 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80046b2:	4b54      	ldr	r3, [pc, #336]	; (8004804 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80046b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046b8:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80046c0:	4950      	ldr	r1, [pc, #320]	; (8004804 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80046c2:	4313      	orrs	r3, r2
 80046c4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d00a      	beq.n	80046ea <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80046d4:	4b4b      	ldr	r3, [pc, #300]	; (8004804 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80046d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046da:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046e2:	4948      	ldr	r1, [pc, #288]	; (8004804 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80046e4:	4313      	orrs	r3, r2
 80046e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d00a      	beq.n	800470c <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80046f6:	4b43      	ldr	r3, [pc, #268]	; (8004804 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80046f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046fc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004704:	493f      	ldr	r1, [pc, #252]	; (8004804 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004706:	4313      	orrs	r3, r2
 8004708:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004714:	2b00      	cmp	r3, #0
 8004716:	d028      	beq.n	800476a <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004718:	4b3a      	ldr	r3, [pc, #232]	; (8004804 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800471a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800471e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004726:	4937      	ldr	r1, [pc, #220]	; (8004804 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004728:	4313      	orrs	r3, r2
 800472a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004732:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004736:	d106      	bne.n	8004746 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004738:	4b32      	ldr	r3, [pc, #200]	; (8004804 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800473a:	68db      	ldr	r3, [r3, #12]
 800473c:	4a31      	ldr	r2, [pc, #196]	; (8004804 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800473e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004742:	60d3      	str	r3, [r2, #12]
 8004744:	e011      	b.n	800476a <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800474a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800474e:	d10c      	bne.n	800476a <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	3304      	adds	r3, #4
 8004754:	2101      	movs	r1, #1
 8004756:	4618      	mov	r0, r3
 8004758:	f000 f8c8 	bl	80048ec <RCCEx_PLLSAI1_Config>
 800475c:	4603      	mov	r3, r0
 800475e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004760:	7cfb      	ldrb	r3, [r7, #19]
 8004762:	2b00      	cmp	r3, #0
 8004764:	d001      	beq.n	800476a <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8004766:	7cfb      	ldrb	r3, [r7, #19]
 8004768:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004772:	2b00      	cmp	r3, #0
 8004774:	d028      	beq.n	80047c8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004776:	4b23      	ldr	r3, [pc, #140]	; (8004804 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004778:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800477c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004784:	491f      	ldr	r1, [pc, #124]	; (8004804 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004786:	4313      	orrs	r3, r2
 8004788:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004790:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004794:	d106      	bne.n	80047a4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004796:	4b1b      	ldr	r3, [pc, #108]	; (8004804 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004798:	68db      	ldr	r3, [r3, #12]
 800479a:	4a1a      	ldr	r2, [pc, #104]	; (8004804 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800479c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80047a0:	60d3      	str	r3, [r2, #12]
 80047a2:	e011      	b.n	80047c8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047a8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80047ac:	d10c      	bne.n	80047c8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	3304      	adds	r3, #4
 80047b2:	2101      	movs	r1, #1
 80047b4:	4618      	mov	r0, r3
 80047b6:	f000 f899 	bl	80048ec <RCCEx_PLLSAI1_Config>
 80047ba:	4603      	mov	r3, r0
 80047bc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80047be:	7cfb      	ldrb	r3, [r7, #19]
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d001      	beq.n	80047c8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 80047c4:	7cfb      	ldrb	r3, [r7, #19]
 80047c6:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d02b      	beq.n	800482c <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80047d4:	4b0b      	ldr	r3, [pc, #44]	; (8004804 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80047d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047da:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80047e2:	4908      	ldr	r1, [pc, #32]	; (8004804 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80047e4:	4313      	orrs	r3, r2
 80047e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80047ee:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80047f2:	d109      	bne.n	8004808 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80047f4:	4b03      	ldr	r3, [pc, #12]	; (8004804 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80047f6:	68db      	ldr	r3, [r3, #12]
 80047f8:	4a02      	ldr	r2, [pc, #8]	; (8004804 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80047fa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80047fe:	60d3      	str	r3, [r2, #12]
 8004800:	e014      	b.n	800482c <HAL_RCCEx_PeriphCLKConfig+0x514>
 8004802:	bf00      	nop
 8004804:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800480c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004810:	d10c      	bne.n	800482c <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	3304      	adds	r3, #4
 8004816:	2101      	movs	r1, #1
 8004818:	4618      	mov	r0, r3
 800481a:	f000 f867 	bl	80048ec <RCCEx_PLLSAI1_Config>
 800481e:	4603      	mov	r3, r0
 8004820:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004822:	7cfb      	ldrb	r3, [r7, #19]
 8004824:	2b00      	cmp	r3, #0
 8004826:	d001      	beq.n	800482c <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8004828:	7cfb      	ldrb	r3, [r7, #19]
 800482a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004834:	2b00      	cmp	r3, #0
 8004836:	d02f      	beq.n	8004898 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004838:	4b2b      	ldr	r3, [pc, #172]	; (80048e8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800483a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800483e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004846:	4928      	ldr	r1, [pc, #160]	; (80048e8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004848:	4313      	orrs	r3, r2
 800484a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004852:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004856:	d10d      	bne.n	8004874 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	3304      	adds	r3, #4
 800485c:	2102      	movs	r1, #2
 800485e:	4618      	mov	r0, r3
 8004860:	f000 f844 	bl	80048ec <RCCEx_PLLSAI1_Config>
 8004864:	4603      	mov	r3, r0
 8004866:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004868:	7cfb      	ldrb	r3, [r7, #19]
 800486a:	2b00      	cmp	r3, #0
 800486c:	d014      	beq.n	8004898 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800486e:	7cfb      	ldrb	r3, [r7, #19]
 8004870:	74bb      	strb	r3, [r7, #18]
 8004872:	e011      	b.n	8004898 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004878:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800487c:	d10c      	bne.n	8004898 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	3320      	adds	r3, #32
 8004882:	2102      	movs	r1, #2
 8004884:	4618      	mov	r0, r3
 8004886:	f000 f925 	bl	8004ad4 <RCCEx_PLLSAI2_Config>
 800488a:	4603      	mov	r3, r0
 800488c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800488e:	7cfb      	ldrb	r3, [r7, #19]
 8004890:	2b00      	cmp	r3, #0
 8004892:	d001      	beq.n	8004898 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8004894:	7cfb      	ldrb	r3, [r7, #19]
 8004896:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d00a      	beq.n	80048ba <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80048a4:	4b10      	ldr	r3, [pc, #64]	; (80048e8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80048a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048aa:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80048b2:	490d      	ldr	r1, [pc, #52]	; (80048e8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80048b4:	4313      	orrs	r3, r2
 80048b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d00b      	beq.n	80048de <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80048c6:	4b08      	ldr	r3, [pc, #32]	; (80048e8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80048c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048cc:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80048d6:	4904      	ldr	r1, [pc, #16]	; (80048e8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80048d8:	4313      	orrs	r3, r2
 80048da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80048de:	7cbb      	ldrb	r3, [r7, #18]
}
 80048e0:	4618      	mov	r0, r3
 80048e2:	3718      	adds	r7, #24
 80048e4:	46bd      	mov	sp, r7
 80048e6:	bd80      	pop	{r7, pc}
 80048e8:	40021000 	.word	0x40021000

080048ec <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80048ec:	b580      	push	{r7, lr}
 80048ee:	b084      	sub	sp, #16
 80048f0:	af00      	add	r7, sp, #0
 80048f2:	6078      	str	r0, [r7, #4]
 80048f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80048f6:	2300      	movs	r3, #0
 80048f8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80048fa:	4b75      	ldr	r3, [pc, #468]	; (8004ad0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80048fc:	68db      	ldr	r3, [r3, #12]
 80048fe:	f003 0303 	and.w	r3, r3, #3
 8004902:	2b00      	cmp	r3, #0
 8004904:	d018      	beq.n	8004938 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004906:	4b72      	ldr	r3, [pc, #456]	; (8004ad0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004908:	68db      	ldr	r3, [r3, #12]
 800490a:	f003 0203 	and.w	r2, r3, #3
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	429a      	cmp	r2, r3
 8004914:	d10d      	bne.n	8004932 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
       ||
 800491a:	2b00      	cmp	r3, #0
 800491c:	d009      	beq.n	8004932 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800491e:	4b6c      	ldr	r3, [pc, #432]	; (8004ad0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004920:	68db      	ldr	r3, [r3, #12]
 8004922:	091b      	lsrs	r3, r3, #4
 8004924:	f003 0307 	and.w	r3, r3, #7
 8004928:	1c5a      	adds	r2, r3, #1
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	685b      	ldr	r3, [r3, #4]
       ||
 800492e:	429a      	cmp	r2, r3
 8004930:	d047      	beq.n	80049c2 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004932:	2301      	movs	r3, #1
 8004934:	73fb      	strb	r3, [r7, #15]
 8004936:	e044      	b.n	80049c2 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	2b03      	cmp	r3, #3
 800493e:	d018      	beq.n	8004972 <RCCEx_PLLSAI1_Config+0x86>
 8004940:	2b03      	cmp	r3, #3
 8004942:	d825      	bhi.n	8004990 <RCCEx_PLLSAI1_Config+0xa4>
 8004944:	2b01      	cmp	r3, #1
 8004946:	d002      	beq.n	800494e <RCCEx_PLLSAI1_Config+0x62>
 8004948:	2b02      	cmp	r3, #2
 800494a:	d009      	beq.n	8004960 <RCCEx_PLLSAI1_Config+0x74>
 800494c:	e020      	b.n	8004990 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800494e:	4b60      	ldr	r3, [pc, #384]	; (8004ad0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	f003 0302 	and.w	r3, r3, #2
 8004956:	2b00      	cmp	r3, #0
 8004958:	d11d      	bne.n	8004996 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800495a:	2301      	movs	r3, #1
 800495c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800495e:	e01a      	b.n	8004996 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004960:	4b5b      	ldr	r3, [pc, #364]	; (8004ad0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004968:	2b00      	cmp	r3, #0
 800496a:	d116      	bne.n	800499a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 800496c:	2301      	movs	r3, #1
 800496e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004970:	e013      	b.n	800499a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004972:	4b57      	ldr	r3, [pc, #348]	; (8004ad0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800497a:	2b00      	cmp	r3, #0
 800497c:	d10f      	bne.n	800499e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800497e:	4b54      	ldr	r3, [pc, #336]	; (8004ad0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004986:	2b00      	cmp	r3, #0
 8004988:	d109      	bne.n	800499e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800498a:	2301      	movs	r3, #1
 800498c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800498e:	e006      	b.n	800499e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004990:	2301      	movs	r3, #1
 8004992:	73fb      	strb	r3, [r7, #15]
      break;
 8004994:	e004      	b.n	80049a0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004996:	bf00      	nop
 8004998:	e002      	b.n	80049a0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800499a:	bf00      	nop
 800499c:	e000      	b.n	80049a0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800499e:	bf00      	nop
    }

    if(status == HAL_OK)
 80049a0:	7bfb      	ldrb	r3, [r7, #15]
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d10d      	bne.n	80049c2 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80049a6:	4b4a      	ldr	r3, [pc, #296]	; (8004ad0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80049a8:	68db      	ldr	r3, [r3, #12]
 80049aa:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	6819      	ldr	r1, [r3, #0]
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	685b      	ldr	r3, [r3, #4]
 80049b6:	3b01      	subs	r3, #1
 80049b8:	011b      	lsls	r3, r3, #4
 80049ba:	430b      	orrs	r3, r1
 80049bc:	4944      	ldr	r1, [pc, #272]	; (8004ad0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80049be:	4313      	orrs	r3, r2
 80049c0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80049c2:	7bfb      	ldrb	r3, [r7, #15]
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d17d      	bne.n	8004ac4 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80049c8:	4b41      	ldr	r3, [pc, #260]	; (8004ad0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	4a40      	ldr	r2, [pc, #256]	; (8004ad0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80049ce:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80049d2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80049d4:	f7fd fff8 	bl	80029c8 <HAL_GetTick>
 80049d8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80049da:	e009      	b.n	80049f0 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80049dc:	f7fd fff4 	bl	80029c8 <HAL_GetTick>
 80049e0:	4602      	mov	r2, r0
 80049e2:	68bb      	ldr	r3, [r7, #8]
 80049e4:	1ad3      	subs	r3, r2, r3
 80049e6:	2b02      	cmp	r3, #2
 80049e8:	d902      	bls.n	80049f0 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80049ea:	2303      	movs	r3, #3
 80049ec:	73fb      	strb	r3, [r7, #15]
        break;
 80049ee:	e005      	b.n	80049fc <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80049f0:	4b37      	ldr	r3, [pc, #220]	; (8004ad0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d1ef      	bne.n	80049dc <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80049fc:	7bfb      	ldrb	r3, [r7, #15]
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d160      	bne.n	8004ac4 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004a02:	683b      	ldr	r3, [r7, #0]
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d111      	bne.n	8004a2c <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004a08:	4b31      	ldr	r3, [pc, #196]	; (8004ad0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004a0a:	691b      	ldr	r3, [r3, #16]
 8004a0c:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8004a10:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004a14:	687a      	ldr	r2, [r7, #4]
 8004a16:	6892      	ldr	r2, [r2, #8]
 8004a18:	0211      	lsls	r1, r2, #8
 8004a1a:	687a      	ldr	r2, [r7, #4]
 8004a1c:	68d2      	ldr	r2, [r2, #12]
 8004a1e:	0912      	lsrs	r2, r2, #4
 8004a20:	0452      	lsls	r2, r2, #17
 8004a22:	430a      	orrs	r2, r1
 8004a24:	492a      	ldr	r1, [pc, #168]	; (8004ad0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004a26:	4313      	orrs	r3, r2
 8004a28:	610b      	str	r3, [r1, #16]
 8004a2a:	e027      	b.n	8004a7c <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004a2c:	683b      	ldr	r3, [r7, #0]
 8004a2e:	2b01      	cmp	r3, #1
 8004a30:	d112      	bne.n	8004a58 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004a32:	4b27      	ldr	r3, [pc, #156]	; (8004ad0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004a34:	691b      	ldr	r3, [r3, #16]
 8004a36:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8004a3a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004a3e:	687a      	ldr	r2, [r7, #4]
 8004a40:	6892      	ldr	r2, [r2, #8]
 8004a42:	0211      	lsls	r1, r2, #8
 8004a44:	687a      	ldr	r2, [r7, #4]
 8004a46:	6912      	ldr	r2, [r2, #16]
 8004a48:	0852      	lsrs	r2, r2, #1
 8004a4a:	3a01      	subs	r2, #1
 8004a4c:	0552      	lsls	r2, r2, #21
 8004a4e:	430a      	orrs	r2, r1
 8004a50:	491f      	ldr	r1, [pc, #124]	; (8004ad0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004a52:	4313      	orrs	r3, r2
 8004a54:	610b      	str	r3, [r1, #16]
 8004a56:	e011      	b.n	8004a7c <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004a58:	4b1d      	ldr	r3, [pc, #116]	; (8004ad0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004a5a:	691b      	ldr	r3, [r3, #16]
 8004a5c:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004a60:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004a64:	687a      	ldr	r2, [r7, #4]
 8004a66:	6892      	ldr	r2, [r2, #8]
 8004a68:	0211      	lsls	r1, r2, #8
 8004a6a:	687a      	ldr	r2, [r7, #4]
 8004a6c:	6952      	ldr	r2, [r2, #20]
 8004a6e:	0852      	lsrs	r2, r2, #1
 8004a70:	3a01      	subs	r2, #1
 8004a72:	0652      	lsls	r2, r2, #25
 8004a74:	430a      	orrs	r2, r1
 8004a76:	4916      	ldr	r1, [pc, #88]	; (8004ad0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004a78:	4313      	orrs	r3, r2
 8004a7a:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004a7c:	4b14      	ldr	r3, [pc, #80]	; (8004ad0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	4a13      	ldr	r2, [pc, #76]	; (8004ad0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004a82:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004a86:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a88:	f7fd ff9e 	bl	80029c8 <HAL_GetTick>
 8004a8c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004a8e:	e009      	b.n	8004aa4 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004a90:	f7fd ff9a 	bl	80029c8 <HAL_GetTick>
 8004a94:	4602      	mov	r2, r0
 8004a96:	68bb      	ldr	r3, [r7, #8]
 8004a98:	1ad3      	subs	r3, r2, r3
 8004a9a:	2b02      	cmp	r3, #2
 8004a9c:	d902      	bls.n	8004aa4 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8004a9e:	2303      	movs	r3, #3
 8004aa0:	73fb      	strb	r3, [r7, #15]
          break;
 8004aa2:	e005      	b.n	8004ab0 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004aa4:	4b0a      	ldr	r3, [pc, #40]	; (8004ad0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d0ef      	beq.n	8004a90 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8004ab0:	7bfb      	ldrb	r3, [r7, #15]
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d106      	bne.n	8004ac4 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004ab6:	4b06      	ldr	r3, [pc, #24]	; (8004ad0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004ab8:	691a      	ldr	r2, [r3, #16]
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	699b      	ldr	r3, [r3, #24]
 8004abe:	4904      	ldr	r1, [pc, #16]	; (8004ad0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004ac0:	4313      	orrs	r3, r2
 8004ac2:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004ac4:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ac6:	4618      	mov	r0, r3
 8004ac8:	3710      	adds	r7, #16
 8004aca:	46bd      	mov	sp, r7
 8004acc:	bd80      	pop	{r7, pc}
 8004ace:	bf00      	nop
 8004ad0:	40021000 	.word	0x40021000

08004ad4 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8004ad4:	b580      	push	{r7, lr}
 8004ad6:	b084      	sub	sp, #16
 8004ad8:	af00      	add	r7, sp, #0
 8004ada:	6078      	str	r0, [r7, #4]
 8004adc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004ade:	2300      	movs	r3, #0
 8004ae0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004ae2:	4b6a      	ldr	r3, [pc, #424]	; (8004c8c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004ae4:	68db      	ldr	r3, [r3, #12]
 8004ae6:	f003 0303 	and.w	r3, r3, #3
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d018      	beq.n	8004b20 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8004aee:	4b67      	ldr	r3, [pc, #412]	; (8004c8c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004af0:	68db      	ldr	r3, [r3, #12]
 8004af2:	f003 0203 	and.w	r2, r3, #3
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	429a      	cmp	r2, r3
 8004afc:	d10d      	bne.n	8004b1a <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
       ||
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d009      	beq.n	8004b1a <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8004b06:	4b61      	ldr	r3, [pc, #388]	; (8004c8c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004b08:	68db      	ldr	r3, [r3, #12]
 8004b0a:	091b      	lsrs	r3, r3, #4
 8004b0c:	f003 0307 	and.w	r3, r3, #7
 8004b10:	1c5a      	adds	r2, r3, #1
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	685b      	ldr	r3, [r3, #4]
       ||
 8004b16:	429a      	cmp	r2, r3
 8004b18:	d047      	beq.n	8004baa <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004b1a:	2301      	movs	r3, #1
 8004b1c:	73fb      	strb	r3, [r7, #15]
 8004b1e:	e044      	b.n	8004baa <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	2b03      	cmp	r3, #3
 8004b26:	d018      	beq.n	8004b5a <RCCEx_PLLSAI2_Config+0x86>
 8004b28:	2b03      	cmp	r3, #3
 8004b2a:	d825      	bhi.n	8004b78 <RCCEx_PLLSAI2_Config+0xa4>
 8004b2c:	2b01      	cmp	r3, #1
 8004b2e:	d002      	beq.n	8004b36 <RCCEx_PLLSAI2_Config+0x62>
 8004b30:	2b02      	cmp	r3, #2
 8004b32:	d009      	beq.n	8004b48 <RCCEx_PLLSAI2_Config+0x74>
 8004b34:	e020      	b.n	8004b78 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004b36:	4b55      	ldr	r3, [pc, #340]	; (8004c8c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	f003 0302 	and.w	r3, r3, #2
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d11d      	bne.n	8004b7e <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8004b42:	2301      	movs	r3, #1
 8004b44:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004b46:	e01a      	b.n	8004b7e <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004b48:	4b50      	ldr	r3, [pc, #320]	; (8004c8c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d116      	bne.n	8004b82 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8004b54:	2301      	movs	r3, #1
 8004b56:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004b58:	e013      	b.n	8004b82 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004b5a:	4b4c      	ldr	r3, [pc, #304]	; (8004c8c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d10f      	bne.n	8004b86 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004b66:	4b49      	ldr	r3, [pc, #292]	; (8004c8c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d109      	bne.n	8004b86 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8004b72:	2301      	movs	r3, #1
 8004b74:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004b76:	e006      	b.n	8004b86 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004b78:	2301      	movs	r3, #1
 8004b7a:	73fb      	strb	r3, [r7, #15]
      break;
 8004b7c:	e004      	b.n	8004b88 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004b7e:	bf00      	nop
 8004b80:	e002      	b.n	8004b88 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004b82:	bf00      	nop
 8004b84:	e000      	b.n	8004b88 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004b86:	bf00      	nop
    }

    if(status == HAL_OK)
 8004b88:	7bfb      	ldrb	r3, [r7, #15]
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d10d      	bne.n	8004baa <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004b8e:	4b3f      	ldr	r3, [pc, #252]	; (8004c8c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004b90:	68db      	ldr	r3, [r3, #12]
 8004b92:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	6819      	ldr	r1, [r3, #0]
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	685b      	ldr	r3, [r3, #4]
 8004b9e:	3b01      	subs	r3, #1
 8004ba0:	011b      	lsls	r3, r3, #4
 8004ba2:	430b      	orrs	r3, r1
 8004ba4:	4939      	ldr	r1, [pc, #228]	; (8004c8c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004ba6:	4313      	orrs	r3, r2
 8004ba8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004baa:	7bfb      	ldrb	r3, [r7, #15]
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d167      	bne.n	8004c80 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8004bb0:	4b36      	ldr	r3, [pc, #216]	; (8004c8c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	4a35      	ldr	r2, [pc, #212]	; (8004c8c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004bb6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004bba:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004bbc:	f7fd ff04 	bl	80029c8 <HAL_GetTick>
 8004bc0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004bc2:	e009      	b.n	8004bd8 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004bc4:	f7fd ff00 	bl	80029c8 <HAL_GetTick>
 8004bc8:	4602      	mov	r2, r0
 8004bca:	68bb      	ldr	r3, [r7, #8]
 8004bcc:	1ad3      	subs	r3, r2, r3
 8004bce:	2b02      	cmp	r3, #2
 8004bd0:	d902      	bls.n	8004bd8 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004bd2:	2303      	movs	r3, #3
 8004bd4:	73fb      	strb	r3, [r7, #15]
        break;
 8004bd6:	e005      	b.n	8004be4 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004bd8:	4b2c      	ldr	r3, [pc, #176]	; (8004c8c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d1ef      	bne.n	8004bc4 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004be4:	7bfb      	ldrb	r3, [r7, #15]
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d14a      	bne.n	8004c80 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004bea:	683b      	ldr	r3, [r7, #0]
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d111      	bne.n	8004c14 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004bf0:	4b26      	ldr	r3, [pc, #152]	; (8004c8c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004bf2:	695b      	ldr	r3, [r3, #20]
 8004bf4:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8004bf8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004bfc:	687a      	ldr	r2, [r7, #4]
 8004bfe:	6892      	ldr	r2, [r2, #8]
 8004c00:	0211      	lsls	r1, r2, #8
 8004c02:	687a      	ldr	r2, [r7, #4]
 8004c04:	68d2      	ldr	r2, [r2, #12]
 8004c06:	0912      	lsrs	r2, r2, #4
 8004c08:	0452      	lsls	r2, r2, #17
 8004c0a:	430a      	orrs	r2, r1
 8004c0c:	491f      	ldr	r1, [pc, #124]	; (8004c8c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004c0e:	4313      	orrs	r3, r2
 8004c10:	614b      	str	r3, [r1, #20]
 8004c12:	e011      	b.n	8004c38 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004c14:	4b1d      	ldr	r3, [pc, #116]	; (8004c8c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004c16:	695b      	ldr	r3, [r3, #20]
 8004c18:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004c1c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004c20:	687a      	ldr	r2, [r7, #4]
 8004c22:	6892      	ldr	r2, [r2, #8]
 8004c24:	0211      	lsls	r1, r2, #8
 8004c26:	687a      	ldr	r2, [r7, #4]
 8004c28:	6912      	ldr	r2, [r2, #16]
 8004c2a:	0852      	lsrs	r2, r2, #1
 8004c2c:	3a01      	subs	r2, #1
 8004c2e:	0652      	lsls	r2, r2, #25
 8004c30:	430a      	orrs	r2, r1
 8004c32:	4916      	ldr	r1, [pc, #88]	; (8004c8c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004c34:	4313      	orrs	r3, r2
 8004c36:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8004c38:	4b14      	ldr	r3, [pc, #80]	; (8004c8c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	4a13      	ldr	r2, [pc, #76]	; (8004c8c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004c3e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004c42:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c44:	f7fd fec0 	bl	80029c8 <HAL_GetTick>
 8004c48:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004c4a:	e009      	b.n	8004c60 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004c4c:	f7fd febc 	bl	80029c8 <HAL_GetTick>
 8004c50:	4602      	mov	r2, r0
 8004c52:	68bb      	ldr	r3, [r7, #8]
 8004c54:	1ad3      	subs	r3, r2, r3
 8004c56:	2b02      	cmp	r3, #2
 8004c58:	d902      	bls.n	8004c60 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8004c5a:	2303      	movs	r3, #3
 8004c5c:	73fb      	strb	r3, [r7, #15]
          break;
 8004c5e:	e005      	b.n	8004c6c <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004c60:	4b0a      	ldr	r3, [pc, #40]	; (8004c8c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d0ef      	beq.n	8004c4c <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8004c6c:	7bfb      	ldrb	r3, [r7, #15]
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d106      	bne.n	8004c80 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8004c72:	4b06      	ldr	r3, [pc, #24]	; (8004c8c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004c74:	695a      	ldr	r2, [r3, #20]
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	695b      	ldr	r3, [r3, #20]
 8004c7a:	4904      	ldr	r1, [pc, #16]	; (8004c8c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004c7c:	4313      	orrs	r3, r2
 8004c7e:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8004c80:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c82:	4618      	mov	r0, r3
 8004c84:	3710      	adds	r7, #16
 8004c86:	46bd      	mov	sp, r7
 8004c88:	bd80      	pop	{r7, pc}
 8004c8a:	bf00      	nop
 8004c8c:	40021000 	.word	0x40021000

08004c90 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004c90:	b580      	push	{r7, lr}
 8004c92:	b084      	sub	sp, #16
 8004c94:	af00      	add	r7, sp, #0
 8004c96:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d101      	bne.n	8004ca2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004c9e:	2301      	movs	r3, #1
 8004ca0:	e095      	b.n	8004dce <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d108      	bne.n	8004cbc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	685b      	ldr	r3, [r3, #4]
 8004cae:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004cb2:	d009      	beq.n	8004cc8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	2200      	movs	r2, #0
 8004cb8:	61da      	str	r2, [r3, #28]
 8004cba:	e005      	b.n	8004cc8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	2200      	movs	r2, #0
 8004cc0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	2200      	movs	r2, #0
 8004cc6:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	2200      	movs	r2, #0
 8004ccc:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004cd4:	b2db      	uxtb	r3, r3
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d106      	bne.n	8004ce8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	2200      	movs	r2, #0
 8004cde:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004ce2:	6878      	ldr	r0, [r7, #4]
 8004ce4:	f7fc fe46 	bl	8001974 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	2202      	movs	r2, #2
 8004cec:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	681a      	ldr	r2, [r3, #0]
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004cfe:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	68db      	ldr	r3, [r3, #12]
 8004d04:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004d08:	d902      	bls.n	8004d10 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004d0a:	2300      	movs	r3, #0
 8004d0c:	60fb      	str	r3, [r7, #12]
 8004d0e:	e002      	b.n	8004d16 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004d10:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004d14:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	68db      	ldr	r3, [r3, #12]
 8004d1a:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8004d1e:	d007      	beq.n	8004d30 <HAL_SPI_Init+0xa0>
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	68db      	ldr	r3, [r3, #12]
 8004d24:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004d28:	d002      	beq.n	8004d30 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	2200      	movs	r2, #0
 8004d2e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	685b      	ldr	r3, [r3, #4]
 8004d34:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	689b      	ldr	r3, [r3, #8]
 8004d3c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004d40:	431a      	orrs	r2, r3
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	691b      	ldr	r3, [r3, #16]
 8004d46:	f003 0302 	and.w	r3, r3, #2
 8004d4a:	431a      	orrs	r2, r3
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	695b      	ldr	r3, [r3, #20]
 8004d50:	f003 0301 	and.w	r3, r3, #1
 8004d54:	431a      	orrs	r2, r3
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	699b      	ldr	r3, [r3, #24]
 8004d5a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004d5e:	431a      	orrs	r2, r3
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	69db      	ldr	r3, [r3, #28]
 8004d64:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004d68:	431a      	orrs	r2, r3
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	6a1b      	ldr	r3, [r3, #32]
 8004d6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d72:	ea42 0103 	orr.w	r1, r2, r3
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d7a:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	430a      	orrs	r2, r1
 8004d84:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	699b      	ldr	r3, [r3, #24]
 8004d8a:	0c1b      	lsrs	r3, r3, #16
 8004d8c:	f003 0204 	and.w	r2, r3, #4
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d94:	f003 0310 	and.w	r3, r3, #16
 8004d98:	431a      	orrs	r2, r3
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d9e:	f003 0308 	and.w	r3, r3, #8
 8004da2:	431a      	orrs	r2, r3
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	68db      	ldr	r3, [r3, #12]
 8004da8:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8004dac:	ea42 0103 	orr.w	r1, r2, r3
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	430a      	orrs	r2, r1
 8004dbc:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	2200      	movs	r2, #0
 8004dc2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	2201      	movs	r2, #1
 8004dc8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8004dcc:	2300      	movs	r3, #0
}
 8004dce:	4618      	mov	r0, r3
 8004dd0:	3710      	adds	r7, #16
 8004dd2:	46bd      	mov	sp, r7
 8004dd4:	bd80      	pop	{r7, pc}

08004dd6 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004dd6:	b580      	push	{r7, lr}
 8004dd8:	b088      	sub	sp, #32
 8004dda:	af00      	add	r7, sp, #0
 8004ddc:	60f8      	str	r0, [r7, #12]
 8004dde:	60b9      	str	r1, [r7, #8]
 8004de0:	603b      	str	r3, [r7, #0]
 8004de2:	4613      	mov	r3, r2
 8004de4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004de6:	2300      	movs	r3, #0
 8004de8:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004df0:	2b01      	cmp	r3, #1
 8004df2:	d101      	bne.n	8004df8 <HAL_SPI_Transmit+0x22>
 8004df4:	2302      	movs	r3, #2
 8004df6:	e15f      	b.n	80050b8 <HAL_SPI_Transmit+0x2e2>
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	2201      	movs	r2, #1
 8004dfc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004e00:	f7fd fde2 	bl	80029c8 <HAL_GetTick>
 8004e04:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8004e06:	88fb      	ldrh	r3, [r7, #6]
 8004e08:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004e10:	b2db      	uxtb	r3, r3
 8004e12:	2b01      	cmp	r3, #1
 8004e14:	d002      	beq.n	8004e1c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8004e16:	2302      	movs	r3, #2
 8004e18:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004e1a:	e148      	b.n	80050ae <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 8004e1c:	68bb      	ldr	r3, [r7, #8]
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d002      	beq.n	8004e28 <HAL_SPI_Transmit+0x52>
 8004e22:	88fb      	ldrh	r3, [r7, #6]
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d102      	bne.n	8004e2e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8004e28:	2301      	movs	r3, #1
 8004e2a:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004e2c:	e13f      	b.n	80050ae <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	2203      	movs	r2, #3
 8004e32:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	2200      	movs	r2, #0
 8004e3a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	68ba      	ldr	r2, [r7, #8]
 8004e40:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	88fa      	ldrh	r2, [r7, #6]
 8004e46:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	88fa      	ldrh	r2, [r7, #6]
 8004e4c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	2200      	movs	r2, #0
 8004e52:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	2200      	movs	r2, #0
 8004e58:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	2200      	movs	r2, #0
 8004e60:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	2200      	movs	r2, #0
 8004e68:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	2200      	movs	r2, #0
 8004e6e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	689b      	ldr	r3, [r3, #8]
 8004e74:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004e78:	d10f      	bne.n	8004e9a <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	681a      	ldr	r2, [r3, #0]
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004e88:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	681a      	ldr	r2, [r3, #0]
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004e98:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ea4:	2b40      	cmp	r3, #64	; 0x40
 8004ea6:	d007      	beq.n	8004eb8 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	681a      	ldr	r2, [r3, #0]
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004eb6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	68db      	ldr	r3, [r3, #12]
 8004ebc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004ec0:	d94f      	bls.n	8004f62 <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	685b      	ldr	r3, [r3, #4]
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d002      	beq.n	8004ed0 <HAL_SPI_Transmit+0xfa>
 8004eca:	8afb      	ldrh	r3, [r7, #22]
 8004ecc:	2b01      	cmp	r3, #1
 8004ece:	d142      	bne.n	8004f56 <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ed4:	881a      	ldrh	r2, [r3, #0]
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ee0:	1c9a      	adds	r2, r3, #2
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004eea:	b29b      	uxth	r3, r3
 8004eec:	3b01      	subs	r3, #1
 8004eee:	b29a      	uxth	r2, r3
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004ef4:	e02f      	b.n	8004f56 <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	689b      	ldr	r3, [r3, #8]
 8004efc:	f003 0302 	and.w	r3, r3, #2
 8004f00:	2b02      	cmp	r3, #2
 8004f02:	d112      	bne.n	8004f2a <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f08:	881a      	ldrh	r2, [r3, #0]
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f14:	1c9a      	adds	r2, r3, #2
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004f1e:	b29b      	uxth	r3, r3
 8004f20:	3b01      	subs	r3, #1
 8004f22:	b29a      	uxth	r2, r3
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004f28:	e015      	b.n	8004f56 <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004f2a:	f7fd fd4d 	bl	80029c8 <HAL_GetTick>
 8004f2e:	4602      	mov	r2, r0
 8004f30:	69bb      	ldr	r3, [r7, #24]
 8004f32:	1ad3      	subs	r3, r2, r3
 8004f34:	683a      	ldr	r2, [r7, #0]
 8004f36:	429a      	cmp	r2, r3
 8004f38:	d803      	bhi.n	8004f42 <HAL_SPI_Transmit+0x16c>
 8004f3a:	683b      	ldr	r3, [r7, #0]
 8004f3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f40:	d102      	bne.n	8004f48 <HAL_SPI_Transmit+0x172>
 8004f42:	683b      	ldr	r3, [r7, #0]
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d106      	bne.n	8004f56 <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 8004f48:	2303      	movs	r3, #3
 8004f4a:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	2201      	movs	r2, #1
 8004f50:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 8004f54:	e0ab      	b.n	80050ae <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004f5a:	b29b      	uxth	r3, r3
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d1ca      	bne.n	8004ef6 <HAL_SPI_Transmit+0x120>
 8004f60:	e080      	b.n	8005064 <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	685b      	ldr	r3, [r3, #4]
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d002      	beq.n	8004f70 <HAL_SPI_Transmit+0x19a>
 8004f6a:	8afb      	ldrh	r3, [r7, #22]
 8004f6c:	2b01      	cmp	r3, #1
 8004f6e:	d174      	bne.n	800505a <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004f74:	b29b      	uxth	r3, r3
 8004f76:	2b01      	cmp	r3, #1
 8004f78:	d912      	bls.n	8004fa0 <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f7e:	881a      	ldrh	r2, [r3, #0]
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f8a:	1c9a      	adds	r2, r3, #2
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004f94:	b29b      	uxth	r3, r3
 8004f96:	3b02      	subs	r3, #2
 8004f98:	b29a      	uxth	r2, r3
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004f9e:	e05c      	b.n	800505a <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	330c      	adds	r3, #12
 8004faa:	7812      	ldrb	r2, [r2, #0]
 8004fac:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fb2:	1c5a      	adds	r2, r3, #1
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004fbc:	b29b      	uxth	r3, r3
 8004fbe:	3b01      	subs	r3, #1
 8004fc0:	b29a      	uxth	r2, r3
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8004fc6:	e048      	b.n	800505a <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	689b      	ldr	r3, [r3, #8]
 8004fce:	f003 0302 	and.w	r3, r3, #2
 8004fd2:	2b02      	cmp	r3, #2
 8004fd4:	d12b      	bne.n	800502e <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004fda:	b29b      	uxth	r3, r3
 8004fdc:	2b01      	cmp	r3, #1
 8004fde:	d912      	bls.n	8005006 <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fe4:	881a      	ldrh	r2, [r3, #0]
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ff0:	1c9a      	adds	r2, r3, #2
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004ffa:	b29b      	uxth	r3, r3
 8004ffc:	3b02      	subs	r3, #2
 8004ffe:	b29a      	uxth	r2, r3
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005004:	e029      	b.n	800505a <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	330c      	adds	r3, #12
 8005010:	7812      	ldrb	r2, [r2, #0]
 8005012:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005018:	1c5a      	adds	r2, r3, #1
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005022:	b29b      	uxth	r3, r3
 8005024:	3b01      	subs	r3, #1
 8005026:	b29a      	uxth	r2, r3
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800502c:	e015      	b.n	800505a <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800502e:	f7fd fccb 	bl	80029c8 <HAL_GetTick>
 8005032:	4602      	mov	r2, r0
 8005034:	69bb      	ldr	r3, [r7, #24]
 8005036:	1ad3      	subs	r3, r2, r3
 8005038:	683a      	ldr	r2, [r7, #0]
 800503a:	429a      	cmp	r2, r3
 800503c:	d803      	bhi.n	8005046 <HAL_SPI_Transmit+0x270>
 800503e:	683b      	ldr	r3, [r7, #0]
 8005040:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005044:	d102      	bne.n	800504c <HAL_SPI_Transmit+0x276>
 8005046:	683b      	ldr	r3, [r7, #0]
 8005048:	2b00      	cmp	r3, #0
 800504a:	d106      	bne.n	800505a <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 800504c:	2303      	movs	r3, #3
 800504e:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	2201      	movs	r2, #1
 8005054:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 8005058:	e029      	b.n	80050ae <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800505e:	b29b      	uxth	r3, r3
 8005060:	2b00      	cmp	r3, #0
 8005062:	d1b1      	bne.n	8004fc8 <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005064:	69ba      	ldr	r2, [r7, #24]
 8005066:	6839      	ldr	r1, [r7, #0]
 8005068:	68f8      	ldr	r0, [r7, #12]
 800506a:	f000 fad7 	bl	800561c <SPI_EndRxTxTransaction>
 800506e:	4603      	mov	r3, r0
 8005070:	2b00      	cmp	r3, #0
 8005072:	d002      	beq.n	800507a <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	2220      	movs	r2, #32
 8005078:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	689b      	ldr	r3, [r3, #8]
 800507e:	2b00      	cmp	r3, #0
 8005080:	d10a      	bne.n	8005098 <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005082:	2300      	movs	r3, #0
 8005084:	613b      	str	r3, [r7, #16]
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	68db      	ldr	r3, [r3, #12]
 800508c:	613b      	str	r3, [r7, #16]
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	689b      	ldr	r3, [r3, #8]
 8005094:	613b      	str	r3, [r7, #16]
 8005096:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800509c:	2b00      	cmp	r3, #0
 800509e:	d002      	beq.n	80050a6 <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 80050a0:	2301      	movs	r3, #1
 80050a2:	77fb      	strb	r3, [r7, #31]
 80050a4:	e003      	b.n	80050ae <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	2201      	movs	r2, #1
 80050aa:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	2200      	movs	r2, #0
 80050b2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80050b6:	7ffb      	ldrb	r3, [r7, #31]
}
 80050b8:	4618      	mov	r0, r3
 80050ba:	3720      	adds	r7, #32
 80050bc:	46bd      	mov	sp, r7
 80050be:	bd80      	pop	{r7, pc}

080050c0 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 80050c0:	b580      	push	{r7, lr}
 80050c2:	b086      	sub	sp, #24
 80050c4:	af00      	add	r7, sp, #0
 80050c6:	60f8      	str	r0, [r7, #12]
 80050c8:	60b9      	str	r1, [r7, #8]
 80050ca:	4613      	mov	r3, r2
 80050cc:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 80050ce:	2300      	movs	r3, #0
 80050d0:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80050d8:	2b01      	cmp	r3, #1
 80050da:	d101      	bne.n	80050e0 <HAL_SPI_Transmit_DMA+0x20>
 80050dc:	2302      	movs	r3, #2
 80050de:	e0d4      	b.n	800528a <HAL_SPI_Transmit_DMA+0x1ca>
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	2201      	movs	r2, #1
 80050e4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  if (hspi->State != HAL_SPI_STATE_READY)
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80050ee:	b2db      	uxtb	r3, r3
 80050f0:	2b01      	cmp	r3, #1
 80050f2:	d002      	beq.n	80050fa <HAL_SPI_Transmit_DMA+0x3a>
  {
    errorcode = HAL_BUSY;
 80050f4:	2302      	movs	r3, #2
 80050f6:	75fb      	strb	r3, [r7, #23]
    goto error;
 80050f8:	e0c2      	b.n	8005280 <HAL_SPI_Transmit_DMA+0x1c0>
  }

  if ((pData == NULL) || (Size == 0U))
 80050fa:	68bb      	ldr	r3, [r7, #8]
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d002      	beq.n	8005106 <HAL_SPI_Transmit_DMA+0x46>
 8005100:	88fb      	ldrh	r3, [r7, #6]
 8005102:	2b00      	cmp	r3, #0
 8005104:	d102      	bne.n	800510c <HAL_SPI_Transmit_DMA+0x4c>
  {
    errorcode = HAL_ERROR;
 8005106:	2301      	movs	r3, #1
 8005108:	75fb      	strb	r3, [r7, #23]
    goto error;
 800510a:	e0b9      	b.n	8005280 <HAL_SPI_Transmit_DMA+0x1c0>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	2203      	movs	r2, #3
 8005110:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	2200      	movs	r2, #0
 8005118:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	68ba      	ldr	r2, [r7, #8]
 800511e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	88fa      	ldrh	r2, [r7, #6]
 8005124:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	88fa      	ldrh	r2, [r7, #6]
 800512a:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	2200      	movs	r2, #0
 8005130:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	2200      	movs	r2, #0
 8005136:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	2200      	movs	r2, #0
 800513c:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->RxXferSize  = 0U;
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	2200      	movs	r2, #0
 8005142:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	2200      	movs	r2, #0
 800514a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	689b      	ldr	r3, [r3, #8]
 8005152:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005156:	d10f      	bne.n	8005178 <HAL_SPI_Transmit_DMA+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	681a      	ldr	r2, [r3, #0]
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005166:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	681a      	ldr	r2, [r3, #0]
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005176:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800517c:	4a45      	ldr	r2, [pc, #276]	; (8005294 <HAL_SPI_Transmit_DMA+0x1d4>)
 800517e:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005184:	4a44      	ldr	r2, [pc, #272]	; (8005298 <HAL_SPI_Transmit_DMA+0x1d8>)
 8005186:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800518c:	4a43      	ldr	r2, [pc, #268]	; (800529c <HAL_SPI_Transmit_DMA+0x1dc>)
 800518e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005194:	2200      	movs	r2, #0
 8005196:	639a      	str	r2, [r3, #56]	; 0x38

  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	685a      	ldr	r2, [r3, #4]
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80051a6:	605a      	str	r2, [r3, #4]
  /* Packing mode is enabled only if the DMA setting is HALWORD */
  if ((hspi->Init.DataSize <= SPI_DATASIZE_8BIT) && (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD))
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	68db      	ldr	r3, [r3, #12]
 80051ac:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80051b0:	d82d      	bhi.n	800520e <HAL_SPI_Transmit_DMA+0x14e>
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80051b6:	699b      	ldr	r3, [r3, #24]
 80051b8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80051bc:	d127      	bne.n	800520e <HAL_SPI_Transmit_DMA+0x14e>
  {
    /* Check the even/odd of the data size + crc if enabled */
    if ((hspi->TxXferCount & 0x1U) == 0U)
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80051c2:	b29b      	uxth	r3, r3
 80051c4:	f003 0301 	and.w	r3, r3, #1
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d10f      	bne.n	80051ec <HAL_SPI_Transmit_DMA+0x12c>
    {
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	685a      	ldr	r2, [r3, #4]
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80051da:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U);
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80051e0:	b29b      	uxth	r3, r3
 80051e2:	085b      	lsrs	r3, r3, #1
 80051e4:	b29a      	uxth	r2, r3
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	87da      	strh	r2, [r3, #62]	; 0x3e
 80051ea:	e010      	b.n	800520e <HAL_SPI_Transmit_DMA+0x14e>
    }
    else
    {
      SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	685a      	ldr	r2, [r3, #4]
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80051fa:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005200:	b29b      	uxth	r3, r3
 8005202:	085b      	lsrs	r3, r3, #1
 8005204:	b29b      	uxth	r3, r3
 8005206:	3301      	adds	r3, #1
 8005208:	b29a      	uxth	r2, r3
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
  }

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	6d58      	ldr	r0, [r3, #84]	; 0x54
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005216:	4619      	mov	r1, r3
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	330c      	adds	r3, #12
 800521e:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005224:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8005226:	f7fd ff11 	bl	800304c <HAL_DMA_Start_IT>
 800522a:	4603      	mov	r3, r0
 800522c:	2b00      	cmp	r3, #0
 800522e:	d008      	beq.n	8005242 <HAL_SPI_Transmit_DMA+0x182>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005234:	f043 0210 	orr.w	r2, r3, #16
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 800523c:	2301      	movs	r3, #1
 800523e:	75fb      	strb	r3, [r7, #23]

    goto error;
 8005240:	e01e      	b.n	8005280 <HAL_SPI_Transmit_DMA+0x1c0>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800524c:	2b40      	cmp	r3, #64	; 0x40
 800524e:	d007      	beq.n	8005260 <HAL_SPI_Transmit_DMA+0x1a0>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	681a      	ldr	r2, [r3, #0]
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800525e:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	685a      	ldr	r2, [r3, #4]
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	f042 0220 	orr.w	r2, r2, #32
 800526e:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	685a      	ldr	r2, [r3, #4]
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	f042 0202 	orr.w	r2, r2, #2
 800527e:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	2200      	movs	r2, #0
 8005284:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8005288:	7dfb      	ldrb	r3, [r7, #23]
}
 800528a:	4618      	mov	r0, r3
 800528c:	3718      	adds	r7, #24
 800528e:	46bd      	mov	sp, r7
 8005290:	bd80      	pop	{r7, pc}
 8005292:	bf00      	nop
 8005294:	08005383 	.word	0x08005383
 8005298:	080052dd 	.word	0x080052dd
 800529c:	0800539f 	.word	0x0800539f

080052a0 <HAL_SPI_TxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 80052a0:	b480      	push	{r7}
 80052a2:	b083      	sub	sp, #12
 80052a4:	af00      	add	r7, sp, #0
 80052a6:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 80052a8:	bf00      	nop
 80052aa:	370c      	adds	r7, #12
 80052ac:	46bd      	mov	sp, r7
 80052ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052b2:	4770      	bx	lr

080052b4 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 80052b4:	b480      	push	{r7}
 80052b6:	b083      	sub	sp, #12
 80052b8:	af00      	add	r7, sp, #0
 80052ba:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 80052bc:	bf00      	nop
 80052be:	370c      	adds	r7, #12
 80052c0:	46bd      	mov	sp, r7
 80052c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052c6:	4770      	bx	lr

080052c8 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80052c8:	b480      	push	{r7}
 80052ca:	b083      	sub	sp, #12
 80052cc:	af00      	add	r7, sp, #0
 80052ce:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80052d0:	bf00      	nop
 80052d2:	370c      	adds	r7, #12
 80052d4:	46bd      	mov	sp, r7
 80052d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052da:	4770      	bx	lr

080052dc <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80052dc:	b580      	push	{r7, lr}
 80052de:	b086      	sub	sp, #24
 80052e0:	af00      	add	r7, sp, #0
 80052e2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052e8:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80052ea:	f7fd fb6d 	bl	80029c8 <HAL_GetTick>
 80052ee:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	f003 0320 	and.w	r3, r3, #32
 80052fa:	2b20      	cmp	r3, #32
 80052fc:	d03b      	beq.n	8005376 <SPI_DMATransmitCplt+0x9a>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 80052fe:	697b      	ldr	r3, [r7, #20]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	685a      	ldr	r2, [r3, #4]
 8005304:	697b      	ldr	r3, [r7, #20]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	f022 0220 	bic.w	r2, r2, #32
 800530c:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800530e:	697b      	ldr	r3, [r7, #20]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	685a      	ldr	r2, [r3, #4]
 8005314:	697b      	ldr	r3, [r7, #20]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	f022 0202 	bic.w	r2, r2, #2
 800531c:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800531e:	693a      	ldr	r2, [r7, #16]
 8005320:	2164      	movs	r1, #100	; 0x64
 8005322:	6978      	ldr	r0, [r7, #20]
 8005324:	f000 f97a 	bl	800561c <SPI_EndRxTxTransaction>
 8005328:	4603      	mov	r3, r0
 800532a:	2b00      	cmp	r3, #0
 800532c:	d005      	beq.n	800533a <SPI_DMATransmitCplt+0x5e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800532e:	697b      	ldr	r3, [r7, #20]
 8005330:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005332:	f043 0220 	orr.w	r2, r3, #32
 8005336:	697b      	ldr	r3, [r7, #20]
 8005338:	661a      	str	r2, [r3, #96]	; 0x60
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800533a:	697b      	ldr	r3, [r7, #20]
 800533c:	689b      	ldr	r3, [r3, #8]
 800533e:	2b00      	cmp	r3, #0
 8005340:	d10a      	bne.n	8005358 <SPI_DMATransmitCplt+0x7c>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005342:	2300      	movs	r3, #0
 8005344:	60fb      	str	r3, [r7, #12]
 8005346:	697b      	ldr	r3, [r7, #20]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	68db      	ldr	r3, [r3, #12]
 800534c:	60fb      	str	r3, [r7, #12]
 800534e:	697b      	ldr	r3, [r7, #20]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	689b      	ldr	r3, [r3, #8]
 8005354:	60fb      	str	r3, [r7, #12]
 8005356:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 8005358:	697b      	ldr	r3, [r7, #20]
 800535a:	2200      	movs	r2, #0
 800535c:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 800535e:	697b      	ldr	r3, [r7, #20]
 8005360:	2201      	movs	r2, #1
 8005362:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005366:	697b      	ldr	r3, [r7, #20]
 8005368:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800536a:	2b00      	cmp	r3, #0
 800536c:	d003      	beq.n	8005376 <SPI_DMATransmitCplt+0x9a>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800536e:	6978      	ldr	r0, [r7, #20]
 8005370:	f7ff ffaa 	bl	80052c8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8005374:	e002      	b.n	800537c <SPI_DMATransmitCplt+0xa0>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 8005376:	6978      	ldr	r0, [r7, #20]
 8005378:	f7ff ff92 	bl	80052a0 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800537c:	3718      	adds	r7, #24
 800537e:	46bd      	mov	sp, r7
 8005380:	bd80      	pop	{r7, pc}

08005382 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8005382:	b580      	push	{r7, lr}
 8005384:	b084      	sub	sp, #16
 8005386:	af00      	add	r7, sp, #0
 8005388:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800538e:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 8005390:	68f8      	ldr	r0, [r7, #12]
 8005392:	f7ff ff8f 	bl	80052b4 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8005396:	bf00      	nop
 8005398:	3710      	adds	r7, #16
 800539a:	46bd      	mov	sp, r7
 800539c:	bd80      	pop	{r7, pc}

0800539e <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 800539e:	b580      	push	{r7, lr}
 80053a0:	b084      	sub	sp, #16
 80053a2:	af00      	add	r7, sp, #0
 80053a4:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053aa:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	685a      	ldr	r2, [r3, #4]
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	f022 0203 	bic.w	r2, r2, #3
 80053ba:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80053c0:	f043 0210 	orr.w	r2, r3, #16
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State = HAL_SPI_STATE_READY;
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	2201      	movs	r2, #1
 80053cc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80053d0:	68f8      	ldr	r0, [r7, #12]
 80053d2:	f7ff ff79 	bl	80052c8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80053d6:	bf00      	nop
 80053d8:	3710      	adds	r7, #16
 80053da:	46bd      	mov	sp, r7
 80053dc:	bd80      	pop	{r7, pc}
	...

080053e0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80053e0:	b580      	push	{r7, lr}
 80053e2:	b088      	sub	sp, #32
 80053e4:	af00      	add	r7, sp, #0
 80053e6:	60f8      	str	r0, [r7, #12]
 80053e8:	60b9      	str	r1, [r7, #8]
 80053ea:	603b      	str	r3, [r7, #0]
 80053ec:	4613      	mov	r3, r2
 80053ee:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80053f0:	f7fd faea 	bl	80029c8 <HAL_GetTick>
 80053f4:	4602      	mov	r2, r0
 80053f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053f8:	1a9b      	subs	r3, r3, r2
 80053fa:	683a      	ldr	r2, [r7, #0]
 80053fc:	4413      	add	r3, r2
 80053fe:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005400:	f7fd fae2 	bl	80029c8 <HAL_GetTick>
 8005404:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005406:	4b39      	ldr	r3, [pc, #228]	; (80054ec <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	015b      	lsls	r3, r3, #5
 800540c:	0d1b      	lsrs	r3, r3, #20
 800540e:	69fa      	ldr	r2, [r7, #28]
 8005410:	fb02 f303 	mul.w	r3, r2, r3
 8005414:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005416:	e054      	b.n	80054c2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005418:	683b      	ldr	r3, [r7, #0]
 800541a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800541e:	d050      	beq.n	80054c2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005420:	f7fd fad2 	bl	80029c8 <HAL_GetTick>
 8005424:	4602      	mov	r2, r0
 8005426:	69bb      	ldr	r3, [r7, #24]
 8005428:	1ad3      	subs	r3, r2, r3
 800542a:	69fa      	ldr	r2, [r7, #28]
 800542c:	429a      	cmp	r2, r3
 800542e:	d902      	bls.n	8005436 <SPI_WaitFlagStateUntilTimeout+0x56>
 8005430:	69fb      	ldr	r3, [r7, #28]
 8005432:	2b00      	cmp	r3, #0
 8005434:	d13d      	bne.n	80054b2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	685a      	ldr	r2, [r3, #4]
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005444:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	685b      	ldr	r3, [r3, #4]
 800544a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800544e:	d111      	bne.n	8005474 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	689b      	ldr	r3, [r3, #8]
 8005454:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005458:	d004      	beq.n	8005464 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	689b      	ldr	r3, [r3, #8]
 800545e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005462:	d107      	bne.n	8005474 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	681a      	ldr	r2, [r3, #0]
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005472:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005478:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800547c:	d10f      	bne.n	800549e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	681a      	ldr	r2, [r3, #0]
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800548c:	601a      	str	r2, [r3, #0]
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	681a      	ldr	r2, [r3, #0]
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800549c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	2201      	movs	r2, #1
 80054a2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	2200      	movs	r2, #0
 80054aa:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80054ae:	2303      	movs	r3, #3
 80054b0:	e017      	b.n	80054e2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80054b2:	697b      	ldr	r3, [r7, #20]
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d101      	bne.n	80054bc <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80054b8:	2300      	movs	r3, #0
 80054ba:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80054bc:	697b      	ldr	r3, [r7, #20]
 80054be:	3b01      	subs	r3, #1
 80054c0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	689a      	ldr	r2, [r3, #8]
 80054c8:	68bb      	ldr	r3, [r7, #8]
 80054ca:	4013      	ands	r3, r2
 80054cc:	68ba      	ldr	r2, [r7, #8]
 80054ce:	429a      	cmp	r2, r3
 80054d0:	bf0c      	ite	eq
 80054d2:	2301      	moveq	r3, #1
 80054d4:	2300      	movne	r3, #0
 80054d6:	b2db      	uxtb	r3, r3
 80054d8:	461a      	mov	r2, r3
 80054da:	79fb      	ldrb	r3, [r7, #7]
 80054dc:	429a      	cmp	r2, r3
 80054de:	d19b      	bne.n	8005418 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80054e0:	2300      	movs	r3, #0
}
 80054e2:	4618      	mov	r0, r3
 80054e4:	3720      	adds	r7, #32
 80054e6:	46bd      	mov	sp, r7
 80054e8:	bd80      	pop	{r7, pc}
 80054ea:	bf00      	nop
 80054ec:	20000004 	.word	0x20000004

080054f0 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80054f0:	b580      	push	{r7, lr}
 80054f2:	b08a      	sub	sp, #40	; 0x28
 80054f4:	af00      	add	r7, sp, #0
 80054f6:	60f8      	str	r0, [r7, #12]
 80054f8:	60b9      	str	r1, [r7, #8]
 80054fa:	607a      	str	r2, [r7, #4]
 80054fc:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80054fe:	2300      	movs	r3, #0
 8005500:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8005502:	f7fd fa61 	bl	80029c8 <HAL_GetTick>
 8005506:	4602      	mov	r2, r0
 8005508:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800550a:	1a9b      	subs	r3, r3, r2
 800550c:	683a      	ldr	r2, [r7, #0]
 800550e:	4413      	add	r3, r2
 8005510:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8005512:	f7fd fa59 	bl	80029c8 <HAL_GetTick>
 8005516:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	330c      	adds	r3, #12
 800551e:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8005520:	4b3d      	ldr	r3, [pc, #244]	; (8005618 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8005522:	681a      	ldr	r2, [r3, #0]
 8005524:	4613      	mov	r3, r2
 8005526:	009b      	lsls	r3, r3, #2
 8005528:	4413      	add	r3, r2
 800552a:	00da      	lsls	r2, r3, #3
 800552c:	1ad3      	subs	r3, r2, r3
 800552e:	0d1b      	lsrs	r3, r3, #20
 8005530:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005532:	fb02 f303 	mul.w	r3, r2, r3
 8005536:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8005538:	e060      	b.n	80055fc <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800553a:	68bb      	ldr	r3, [r7, #8]
 800553c:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8005540:	d107      	bne.n	8005552 <SPI_WaitFifoStateUntilTimeout+0x62>
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	2b00      	cmp	r3, #0
 8005546:	d104      	bne.n	8005552 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8005548:	69fb      	ldr	r3, [r7, #28]
 800554a:	781b      	ldrb	r3, [r3, #0]
 800554c:	b2db      	uxtb	r3, r3
 800554e:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8005550:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8005552:	683b      	ldr	r3, [r7, #0]
 8005554:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005558:	d050      	beq.n	80055fc <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800555a:	f7fd fa35 	bl	80029c8 <HAL_GetTick>
 800555e:	4602      	mov	r2, r0
 8005560:	6a3b      	ldr	r3, [r7, #32]
 8005562:	1ad3      	subs	r3, r2, r3
 8005564:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005566:	429a      	cmp	r2, r3
 8005568:	d902      	bls.n	8005570 <SPI_WaitFifoStateUntilTimeout+0x80>
 800556a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800556c:	2b00      	cmp	r3, #0
 800556e:	d13d      	bne.n	80055ec <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	685a      	ldr	r2, [r3, #4]
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800557e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	685b      	ldr	r3, [r3, #4]
 8005584:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005588:	d111      	bne.n	80055ae <SPI_WaitFifoStateUntilTimeout+0xbe>
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	689b      	ldr	r3, [r3, #8]
 800558e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005592:	d004      	beq.n	800559e <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	689b      	ldr	r3, [r3, #8]
 8005598:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800559c:	d107      	bne.n	80055ae <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	681a      	ldr	r2, [r3, #0]
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80055ac:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055b2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80055b6:	d10f      	bne.n	80055d8 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	681a      	ldr	r2, [r3, #0]
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80055c6:	601a      	str	r2, [r3, #0]
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	681a      	ldr	r2, [r3, #0]
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80055d6:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	2201      	movs	r2, #1
 80055dc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	2200      	movs	r2, #0
 80055e4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80055e8:	2303      	movs	r3, #3
 80055ea:	e010      	b.n	800560e <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80055ec:	69bb      	ldr	r3, [r7, #24]
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d101      	bne.n	80055f6 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 80055f2:	2300      	movs	r3, #0
 80055f4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 80055f6:	69bb      	ldr	r3, [r7, #24]
 80055f8:	3b01      	subs	r3, #1
 80055fa:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	689a      	ldr	r2, [r3, #8]
 8005602:	68bb      	ldr	r3, [r7, #8]
 8005604:	4013      	ands	r3, r2
 8005606:	687a      	ldr	r2, [r7, #4]
 8005608:	429a      	cmp	r2, r3
 800560a:	d196      	bne.n	800553a <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 800560c:	2300      	movs	r3, #0
}
 800560e:	4618      	mov	r0, r3
 8005610:	3728      	adds	r7, #40	; 0x28
 8005612:	46bd      	mov	sp, r7
 8005614:	bd80      	pop	{r7, pc}
 8005616:	bf00      	nop
 8005618:	20000004 	.word	0x20000004

0800561c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800561c:	b580      	push	{r7, lr}
 800561e:	b086      	sub	sp, #24
 8005620:	af02      	add	r7, sp, #8
 8005622:	60f8      	str	r0, [r7, #12]
 8005624:	60b9      	str	r1, [r7, #8]
 8005626:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	9300      	str	r3, [sp, #0]
 800562c:	68bb      	ldr	r3, [r7, #8]
 800562e:	2200      	movs	r2, #0
 8005630:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8005634:	68f8      	ldr	r0, [r7, #12]
 8005636:	f7ff ff5b 	bl	80054f0 <SPI_WaitFifoStateUntilTimeout>
 800563a:	4603      	mov	r3, r0
 800563c:	2b00      	cmp	r3, #0
 800563e:	d007      	beq.n	8005650 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005644:	f043 0220 	orr.w	r2, r3, #32
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800564c:	2303      	movs	r3, #3
 800564e:	e027      	b.n	80056a0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	9300      	str	r3, [sp, #0]
 8005654:	68bb      	ldr	r3, [r7, #8]
 8005656:	2200      	movs	r2, #0
 8005658:	2180      	movs	r1, #128	; 0x80
 800565a:	68f8      	ldr	r0, [r7, #12]
 800565c:	f7ff fec0 	bl	80053e0 <SPI_WaitFlagStateUntilTimeout>
 8005660:	4603      	mov	r3, r0
 8005662:	2b00      	cmp	r3, #0
 8005664:	d007      	beq.n	8005676 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800566a:	f043 0220 	orr.w	r2, r3, #32
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005672:	2303      	movs	r3, #3
 8005674:	e014      	b.n	80056a0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	9300      	str	r3, [sp, #0]
 800567a:	68bb      	ldr	r3, [r7, #8]
 800567c:	2200      	movs	r2, #0
 800567e:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8005682:	68f8      	ldr	r0, [r7, #12]
 8005684:	f7ff ff34 	bl	80054f0 <SPI_WaitFifoStateUntilTimeout>
 8005688:	4603      	mov	r3, r0
 800568a:	2b00      	cmp	r3, #0
 800568c:	d007      	beq.n	800569e <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005692:	f043 0220 	orr.w	r2, r3, #32
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800569a:	2303      	movs	r3, #3
 800569c:	e000      	b.n	80056a0 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800569e:	2300      	movs	r3, #0
}
 80056a0:	4618      	mov	r0, r3
 80056a2:	3710      	adds	r7, #16
 80056a4:	46bd      	mov	sp, r7
 80056a6:	bd80      	pop	{r7, pc}

080056a8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80056a8:	b580      	push	{r7, lr}
 80056aa:	b082      	sub	sp, #8
 80056ac:	af00      	add	r7, sp, #0
 80056ae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d101      	bne.n	80056ba <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80056b6:	2301      	movs	r3, #1
 80056b8:	e049      	b.n	800574e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80056c0:	b2db      	uxtb	r3, r3
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d106      	bne.n	80056d4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	2200      	movs	r2, #0
 80056ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80056ce:	6878      	ldr	r0, [r7, #4]
 80056d0:	f7fc fcee 	bl	80020b0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	2202      	movs	r2, #2
 80056d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681a      	ldr	r2, [r3, #0]
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	3304      	adds	r3, #4
 80056e4:	4619      	mov	r1, r3
 80056e6:	4610      	mov	r0, r2
 80056e8:	f001 fa5a 	bl	8006ba0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	2201      	movs	r2, #1
 80056f0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	2201      	movs	r2, #1
 80056f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	2201      	movs	r2, #1
 8005700:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	2201      	movs	r2, #1
 8005708:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	2201      	movs	r2, #1
 8005710:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	2201      	movs	r2, #1
 8005718:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	2201      	movs	r2, #1
 8005720:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	2201      	movs	r2, #1
 8005728:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	2201      	movs	r2, #1
 8005730:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	2201      	movs	r2, #1
 8005738:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	2201      	movs	r2, #1
 8005740:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	2201      	movs	r2, #1
 8005748:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800574c:	2300      	movs	r3, #0
}
 800574e:	4618      	mov	r0, r3
 8005750:	3708      	adds	r7, #8
 8005752:	46bd      	mov	sp, r7
 8005754:	bd80      	pop	{r7, pc}
	...

08005758 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005758:	b480      	push	{r7}
 800575a:	b085      	sub	sp, #20
 800575c:	af00      	add	r7, sp, #0
 800575e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005766:	b2db      	uxtb	r3, r3
 8005768:	2b01      	cmp	r3, #1
 800576a:	d001      	beq.n	8005770 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800576c:	2301      	movs	r3, #1
 800576e:	e04f      	b.n	8005810 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	2202      	movs	r2, #2
 8005774:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	68da      	ldr	r2, [r3, #12]
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	f042 0201 	orr.w	r2, r2, #1
 8005786:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	4a23      	ldr	r2, [pc, #140]	; (800581c <HAL_TIM_Base_Start_IT+0xc4>)
 800578e:	4293      	cmp	r3, r2
 8005790:	d01d      	beq.n	80057ce <HAL_TIM_Base_Start_IT+0x76>
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800579a:	d018      	beq.n	80057ce <HAL_TIM_Base_Start_IT+0x76>
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	4a1f      	ldr	r2, [pc, #124]	; (8005820 <HAL_TIM_Base_Start_IT+0xc8>)
 80057a2:	4293      	cmp	r3, r2
 80057a4:	d013      	beq.n	80057ce <HAL_TIM_Base_Start_IT+0x76>
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	4a1e      	ldr	r2, [pc, #120]	; (8005824 <HAL_TIM_Base_Start_IT+0xcc>)
 80057ac:	4293      	cmp	r3, r2
 80057ae:	d00e      	beq.n	80057ce <HAL_TIM_Base_Start_IT+0x76>
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	4a1c      	ldr	r2, [pc, #112]	; (8005828 <HAL_TIM_Base_Start_IT+0xd0>)
 80057b6:	4293      	cmp	r3, r2
 80057b8:	d009      	beq.n	80057ce <HAL_TIM_Base_Start_IT+0x76>
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	4a1b      	ldr	r2, [pc, #108]	; (800582c <HAL_TIM_Base_Start_IT+0xd4>)
 80057c0:	4293      	cmp	r3, r2
 80057c2:	d004      	beq.n	80057ce <HAL_TIM_Base_Start_IT+0x76>
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	4a19      	ldr	r2, [pc, #100]	; (8005830 <HAL_TIM_Base_Start_IT+0xd8>)
 80057ca:	4293      	cmp	r3, r2
 80057cc:	d115      	bne.n	80057fa <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	689a      	ldr	r2, [r3, #8]
 80057d4:	4b17      	ldr	r3, [pc, #92]	; (8005834 <HAL_TIM_Base_Start_IT+0xdc>)
 80057d6:	4013      	ands	r3, r2
 80057d8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	2b06      	cmp	r3, #6
 80057de:	d015      	beq.n	800580c <HAL_TIM_Base_Start_IT+0xb4>
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80057e6:	d011      	beq.n	800580c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	681a      	ldr	r2, [r3, #0]
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	f042 0201 	orr.w	r2, r2, #1
 80057f6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80057f8:	e008      	b.n	800580c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	681a      	ldr	r2, [r3, #0]
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	f042 0201 	orr.w	r2, r2, #1
 8005808:	601a      	str	r2, [r3, #0]
 800580a:	e000      	b.n	800580e <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800580c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800580e:	2300      	movs	r3, #0
}
 8005810:	4618      	mov	r0, r3
 8005812:	3714      	adds	r7, #20
 8005814:	46bd      	mov	sp, r7
 8005816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800581a:	4770      	bx	lr
 800581c:	40012c00 	.word	0x40012c00
 8005820:	40000400 	.word	0x40000400
 8005824:	40000800 	.word	0x40000800
 8005828:	40000c00 	.word	0x40000c00
 800582c:	40013400 	.word	0x40013400
 8005830:	40014000 	.word	0x40014000
 8005834:	00010007 	.word	0x00010007

08005838 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005838:	b580      	push	{r7, lr}
 800583a:	b082      	sub	sp, #8
 800583c:	af00      	add	r7, sp, #0
 800583e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	2b00      	cmp	r3, #0
 8005844:	d101      	bne.n	800584a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005846:	2301      	movs	r3, #1
 8005848:	e049      	b.n	80058de <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005850:	b2db      	uxtb	r3, r3
 8005852:	2b00      	cmp	r3, #0
 8005854:	d106      	bne.n	8005864 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	2200      	movs	r2, #0
 800585a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800585e:	6878      	ldr	r0, [r7, #4]
 8005860:	f000 f841 	bl	80058e6 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	2202      	movs	r2, #2
 8005868:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681a      	ldr	r2, [r3, #0]
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	3304      	adds	r3, #4
 8005874:	4619      	mov	r1, r3
 8005876:	4610      	mov	r0, r2
 8005878:	f001 f992 	bl	8006ba0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	2201      	movs	r2, #1
 8005880:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	2201      	movs	r2, #1
 8005888:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	2201      	movs	r2, #1
 8005890:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	2201      	movs	r2, #1
 8005898:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	2201      	movs	r2, #1
 80058a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	2201      	movs	r2, #1
 80058a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	2201      	movs	r2, #1
 80058b0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	2201      	movs	r2, #1
 80058b8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	2201      	movs	r2, #1
 80058c0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	2201      	movs	r2, #1
 80058c8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	2201      	movs	r2, #1
 80058d0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	2201      	movs	r2, #1
 80058d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80058dc:	2300      	movs	r3, #0
}
 80058de:	4618      	mov	r0, r3
 80058e0:	3708      	adds	r7, #8
 80058e2:	46bd      	mov	sp, r7
 80058e4:	bd80      	pop	{r7, pc}

080058e6 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80058e6:	b480      	push	{r7}
 80058e8:	b083      	sub	sp, #12
 80058ea:	af00      	add	r7, sp, #0
 80058ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80058ee:	bf00      	nop
 80058f0:	370c      	adds	r7, #12
 80058f2:	46bd      	mov	sp, r7
 80058f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058f8:	4770      	bx	lr
	...

080058fc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80058fc:	b580      	push	{r7, lr}
 80058fe:	b084      	sub	sp, #16
 8005900:	af00      	add	r7, sp, #0
 8005902:	6078      	str	r0, [r7, #4]
 8005904:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005906:	683b      	ldr	r3, [r7, #0]
 8005908:	2b00      	cmp	r3, #0
 800590a:	d109      	bne.n	8005920 <HAL_TIM_PWM_Start+0x24>
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005912:	b2db      	uxtb	r3, r3
 8005914:	2b01      	cmp	r3, #1
 8005916:	bf14      	ite	ne
 8005918:	2301      	movne	r3, #1
 800591a:	2300      	moveq	r3, #0
 800591c:	b2db      	uxtb	r3, r3
 800591e:	e03c      	b.n	800599a <HAL_TIM_PWM_Start+0x9e>
 8005920:	683b      	ldr	r3, [r7, #0]
 8005922:	2b04      	cmp	r3, #4
 8005924:	d109      	bne.n	800593a <HAL_TIM_PWM_Start+0x3e>
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800592c:	b2db      	uxtb	r3, r3
 800592e:	2b01      	cmp	r3, #1
 8005930:	bf14      	ite	ne
 8005932:	2301      	movne	r3, #1
 8005934:	2300      	moveq	r3, #0
 8005936:	b2db      	uxtb	r3, r3
 8005938:	e02f      	b.n	800599a <HAL_TIM_PWM_Start+0x9e>
 800593a:	683b      	ldr	r3, [r7, #0]
 800593c:	2b08      	cmp	r3, #8
 800593e:	d109      	bne.n	8005954 <HAL_TIM_PWM_Start+0x58>
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005946:	b2db      	uxtb	r3, r3
 8005948:	2b01      	cmp	r3, #1
 800594a:	bf14      	ite	ne
 800594c:	2301      	movne	r3, #1
 800594e:	2300      	moveq	r3, #0
 8005950:	b2db      	uxtb	r3, r3
 8005952:	e022      	b.n	800599a <HAL_TIM_PWM_Start+0x9e>
 8005954:	683b      	ldr	r3, [r7, #0]
 8005956:	2b0c      	cmp	r3, #12
 8005958:	d109      	bne.n	800596e <HAL_TIM_PWM_Start+0x72>
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005960:	b2db      	uxtb	r3, r3
 8005962:	2b01      	cmp	r3, #1
 8005964:	bf14      	ite	ne
 8005966:	2301      	movne	r3, #1
 8005968:	2300      	moveq	r3, #0
 800596a:	b2db      	uxtb	r3, r3
 800596c:	e015      	b.n	800599a <HAL_TIM_PWM_Start+0x9e>
 800596e:	683b      	ldr	r3, [r7, #0]
 8005970:	2b10      	cmp	r3, #16
 8005972:	d109      	bne.n	8005988 <HAL_TIM_PWM_Start+0x8c>
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800597a:	b2db      	uxtb	r3, r3
 800597c:	2b01      	cmp	r3, #1
 800597e:	bf14      	ite	ne
 8005980:	2301      	movne	r3, #1
 8005982:	2300      	moveq	r3, #0
 8005984:	b2db      	uxtb	r3, r3
 8005986:	e008      	b.n	800599a <HAL_TIM_PWM_Start+0x9e>
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800598e:	b2db      	uxtb	r3, r3
 8005990:	2b01      	cmp	r3, #1
 8005992:	bf14      	ite	ne
 8005994:	2301      	movne	r3, #1
 8005996:	2300      	moveq	r3, #0
 8005998:	b2db      	uxtb	r3, r3
 800599a:	2b00      	cmp	r3, #0
 800599c:	d001      	beq.n	80059a2 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800599e:	2301      	movs	r3, #1
 80059a0:	e09c      	b.n	8005adc <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80059a2:	683b      	ldr	r3, [r7, #0]
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d104      	bne.n	80059b2 <HAL_TIM_PWM_Start+0xb6>
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	2202      	movs	r2, #2
 80059ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80059b0:	e023      	b.n	80059fa <HAL_TIM_PWM_Start+0xfe>
 80059b2:	683b      	ldr	r3, [r7, #0]
 80059b4:	2b04      	cmp	r3, #4
 80059b6:	d104      	bne.n	80059c2 <HAL_TIM_PWM_Start+0xc6>
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	2202      	movs	r2, #2
 80059bc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80059c0:	e01b      	b.n	80059fa <HAL_TIM_PWM_Start+0xfe>
 80059c2:	683b      	ldr	r3, [r7, #0]
 80059c4:	2b08      	cmp	r3, #8
 80059c6:	d104      	bne.n	80059d2 <HAL_TIM_PWM_Start+0xd6>
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	2202      	movs	r2, #2
 80059cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80059d0:	e013      	b.n	80059fa <HAL_TIM_PWM_Start+0xfe>
 80059d2:	683b      	ldr	r3, [r7, #0]
 80059d4:	2b0c      	cmp	r3, #12
 80059d6:	d104      	bne.n	80059e2 <HAL_TIM_PWM_Start+0xe6>
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	2202      	movs	r2, #2
 80059dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80059e0:	e00b      	b.n	80059fa <HAL_TIM_PWM_Start+0xfe>
 80059e2:	683b      	ldr	r3, [r7, #0]
 80059e4:	2b10      	cmp	r3, #16
 80059e6:	d104      	bne.n	80059f2 <HAL_TIM_PWM_Start+0xf6>
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	2202      	movs	r2, #2
 80059ec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80059f0:	e003      	b.n	80059fa <HAL_TIM_PWM_Start+0xfe>
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	2202      	movs	r2, #2
 80059f6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	2201      	movs	r2, #1
 8005a00:	6839      	ldr	r1, [r7, #0]
 8005a02:	4618      	mov	r0, r3
 8005a04:	f001 fdfa 	bl	80075fc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	4a35      	ldr	r2, [pc, #212]	; (8005ae4 <HAL_TIM_PWM_Start+0x1e8>)
 8005a0e:	4293      	cmp	r3, r2
 8005a10:	d013      	beq.n	8005a3a <HAL_TIM_PWM_Start+0x13e>
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	4a34      	ldr	r2, [pc, #208]	; (8005ae8 <HAL_TIM_PWM_Start+0x1ec>)
 8005a18:	4293      	cmp	r3, r2
 8005a1a:	d00e      	beq.n	8005a3a <HAL_TIM_PWM_Start+0x13e>
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	4a32      	ldr	r2, [pc, #200]	; (8005aec <HAL_TIM_PWM_Start+0x1f0>)
 8005a22:	4293      	cmp	r3, r2
 8005a24:	d009      	beq.n	8005a3a <HAL_TIM_PWM_Start+0x13e>
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	4a31      	ldr	r2, [pc, #196]	; (8005af0 <HAL_TIM_PWM_Start+0x1f4>)
 8005a2c:	4293      	cmp	r3, r2
 8005a2e:	d004      	beq.n	8005a3a <HAL_TIM_PWM_Start+0x13e>
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	4a2f      	ldr	r2, [pc, #188]	; (8005af4 <HAL_TIM_PWM_Start+0x1f8>)
 8005a36:	4293      	cmp	r3, r2
 8005a38:	d101      	bne.n	8005a3e <HAL_TIM_PWM_Start+0x142>
 8005a3a:	2301      	movs	r3, #1
 8005a3c:	e000      	b.n	8005a40 <HAL_TIM_PWM_Start+0x144>
 8005a3e:	2300      	movs	r3, #0
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d007      	beq.n	8005a54 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005a52:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	4a22      	ldr	r2, [pc, #136]	; (8005ae4 <HAL_TIM_PWM_Start+0x1e8>)
 8005a5a:	4293      	cmp	r3, r2
 8005a5c:	d01d      	beq.n	8005a9a <HAL_TIM_PWM_Start+0x19e>
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005a66:	d018      	beq.n	8005a9a <HAL_TIM_PWM_Start+0x19e>
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	4a22      	ldr	r2, [pc, #136]	; (8005af8 <HAL_TIM_PWM_Start+0x1fc>)
 8005a6e:	4293      	cmp	r3, r2
 8005a70:	d013      	beq.n	8005a9a <HAL_TIM_PWM_Start+0x19e>
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	4a21      	ldr	r2, [pc, #132]	; (8005afc <HAL_TIM_PWM_Start+0x200>)
 8005a78:	4293      	cmp	r3, r2
 8005a7a:	d00e      	beq.n	8005a9a <HAL_TIM_PWM_Start+0x19e>
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	4a1f      	ldr	r2, [pc, #124]	; (8005b00 <HAL_TIM_PWM_Start+0x204>)
 8005a82:	4293      	cmp	r3, r2
 8005a84:	d009      	beq.n	8005a9a <HAL_TIM_PWM_Start+0x19e>
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	4a17      	ldr	r2, [pc, #92]	; (8005ae8 <HAL_TIM_PWM_Start+0x1ec>)
 8005a8c:	4293      	cmp	r3, r2
 8005a8e:	d004      	beq.n	8005a9a <HAL_TIM_PWM_Start+0x19e>
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	4a15      	ldr	r2, [pc, #84]	; (8005aec <HAL_TIM_PWM_Start+0x1f0>)
 8005a96:	4293      	cmp	r3, r2
 8005a98:	d115      	bne.n	8005ac6 <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	689a      	ldr	r2, [r3, #8]
 8005aa0:	4b18      	ldr	r3, [pc, #96]	; (8005b04 <HAL_TIM_PWM_Start+0x208>)
 8005aa2:	4013      	ands	r3, r2
 8005aa4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	2b06      	cmp	r3, #6
 8005aaa:	d015      	beq.n	8005ad8 <HAL_TIM_PWM_Start+0x1dc>
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005ab2:	d011      	beq.n	8005ad8 <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	681a      	ldr	r2, [r3, #0]
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	f042 0201 	orr.w	r2, r2, #1
 8005ac2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005ac4:	e008      	b.n	8005ad8 <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	681a      	ldr	r2, [r3, #0]
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	f042 0201 	orr.w	r2, r2, #1
 8005ad4:	601a      	str	r2, [r3, #0]
 8005ad6:	e000      	b.n	8005ada <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005ad8:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005ada:	2300      	movs	r3, #0
}
 8005adc:	4618      	mov	r0, r3
 8005ade:	3710      	adds	r7, #16
 8005ae0:	46bd      	mov	sp, r7
 8005ae2:	bd80      	pop	{r7, pc}
 8005ae4:	40012c00 	.word	0x40012c00
 8005ae8:	40013400 	.word	0x40013400
 8005aec:	40014000 	.word	0x40014000
 8005af0:	40014400 	.word	0x40014400
 8005af4:	40014800 	.word	0x40014800
 8005af8:	40000400 	.word	0x40000400
 8005afc:	40000800 	.word	0x40000800
 8005b00:	40000c00 	.word	0x40000c00
 8005b04:	00010007 	.word	0x00010007

08005b08 <HAL_TIM_PWM_Start_DMA>:
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, const uint32_t *pData,
                                        uint16_t Length)
{
 8005b08:	b580      	push	{r7, lr}
 8005b0a:	b086      	sub	sp, #24
 8005b0c:	af00      	add	r7, sp, #0
 8005b0e:	60f8      	str	r0, [r7, #12]
 8005b10:	60b9      	str	r1, [r7, #8]
 8005b12:	607a      	str	r2, [r7, #4]
 8005b14:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 8005b16:	2300      	movs	r3, #0
 8005b18:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 8005b1a:	68bb      	ldr	r3, [r7, #8]
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d109      	bne.n	8005b34 <HAL_TIM_PWM_Start_DMA+0x2c>
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005b26:	b2db      	uxtb	r3, r3
 8005b28:	2b02      	cmp	r3, #2
 8005b2a:	bf0c      	ite	eq
 8005b2c:	2301      	moveq	r3, #1
 8005b2e:	2300      	movne	r3, #0
 8005b30:	b2db      	uxtb	r3, r3
 8005b32:	e03c      	b.n	8005bae <HAL_TIM_PWM_Start_DMA+0xa6>
 8005b34:	68bb      	ldr	r3, [r7, #8]
 8005b36:	2b04      	cmp	r3, #4
 8005b38:	d109      	bne.n	8005b4e <HAL_TIM_PWM_Start_DMA+0x46>
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005b40:	b2db      	uxtb	r3, r3
 8005b42:	2b02      	cmp	r3, #2
 8005b44:	bf0c      	ite	eq
 8005b46:	2301      	moveq	r3, #1
 8005b48:	2300      	movne	r3, #0
 8005b4a:	b2db      	uxtb	r3, r3
 8005b4c:	e02f      	b.n	8005bae <HAL_TIM_PWM_Start_DMA+0xa6>
 8005b4e:	68bb      	ldr	r3, [r7, #8]
 8005b50:	2b08      	cmp	r3, #8
 8005b52:	d109      	bne.n	8005b68 <HAL_TIM_PWM_Start_DMA+0x60>
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005b5a:	b2db      	uxtb	r3, r3
 8005b5c:	2b02      	cmp	r3, #2
 8005b5e:	bf0c      	ite	eq
 8005b60:	2301      	moveq	r3, #1
 8005b62:	2300      	movne	r3, #0
 8005b64:	b2db      	uxtb	r3, r3
 8005b66:	e022      	b.n	8005bae <HAL_TIM_PWM_Start_DMA+0xa6>
 8005b68:	68bb      	ldr	r3, [r7, #8]
 8005b6a:	2b0c      	cmp	r3, #12
 8005b6c:	d109      	bne.n	8005b82 <HAL_TIM_PWM_Start_DMA+0x7a>
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005b74:	b2db      	uxtb	r3, r3
 8005b76:	2b02      	cmp	r3, #2
 8005b78:	bf0c      	ite	eq
 8005b7a:	2301      	moveq	r3, #1
 8005b7c:	2300      	movne	r3, #0
 8005b7e:	b2db      	uxtb	r3, r3
 8005b80:	e015      	b.n	8005bae <HAL_TIM_PWM_Start_DMA+0xa6>
 8005b82:	68bb      	ldr	r3, [r7, #8]
 8005b84:	2b10      	cmp	r3, #16
 8005b86:	d109      	bne.n	8005b9c <HAL_TIM_PWM_Start_DMA+0x94>
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005b8e:	b2db      	uxtb	r3, r3
 8005b90:	2b02      	cmp	r3, #2
 8005b92:	bf0c      	ite	eq
 8005b94:	2301      	moveq	r3, #1
 8005b96:	2300      	movne	r3, #0
 8005b98:	b2db      	uxtb	r3, r3
 8005b9a:	e008      	b.n	8005bae <HAL_TIM_PWM_Start_DMA+0xa6>
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8005ba2:	b2db      	uxtb	r3, r3
 8005ba4:	2b02      	cmp	r3, #2
 8005ba6:	bf0c      	ite	eq
 8005ba8:	2301      	moveq	r3, #1
 8005baa:	2300      	movne	r3, #0
 8005bac:	b2db      	uxtb	r3, r3
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d001      	beq.n	8005bb6 <HAL_TIM_PWM_Start_DMA+0xae>
  {
    return HAL_BUSY;
 8005bb2:	2302      	movs	r3, #2
 8005bb4:	e1ab      	b.n	8005f0e <HAL_TIM_PWM_Start_DMA+0x406>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 8005bb6:	68bb      	ldr	r3, [r7, #8]
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d109      	bne.n	8005bd0 <HAL_TIM_PWM_Start_DMA+0xc8>
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005bc2:	b2db      	uxtb	r3, r3
 8005bc4:	2b01      	cmp	r3, #1
 8005bc6:	bf0c      	ite	eq
 8005bc8:	2301      	moveq	r3, #1
 8005bca:	2300      	movne	r3, #0
 8005bcc:	b2db      	uxtb	r3, r3
 8005bce:	e03c      	b.n	8005c4a <HAL_TIM_PWM_Start_DMA+0x142>
 8005bd0:	68bb      	ldr	r3, [r7, #8]
 8005bd2:	2b04      	cmp	r3, #4
 8005bd4:	d109      	bne.n	8005bea <HAL_TIM_PWM_Start_DMA+0xe2>
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005bdc:	b2db      	uxtb	r3, r3
 8005bde:	2b01      	cmp	r3, #1
 8005be0:	bf0c      	ite	eq
 8005be2:	2301      	moveq	r3, #1
 8005be4:	2300      	movne	r3, #0
 8005be6:	b2db      	uxtb	r3, r3
 8005be8:	e02f      	b.n	8005c4a <HAL_TIM_PWM_Start_DMA+0x142>
 8005bea:	68bb      	ldr	r3, [r7, #8]
 8005bec:	2b08      	cmp	r3, #8
 8005bee:	d109      	bne.n	8005c04 <HAL_TIM_PWM_Start_DMA+0xfc>
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005bf6:	b2db      	uxtb	r3, r3
 8005bf8:	2b01      	cmp	r3, #1
 8005bfa:	bf0c      	ite	eq
 8005bfc:	2301      	moveq	r3, #1
 8005bfe:	2300      	movne	r3, #0
 8005c00:	b2db      	uxtb	r3, r3
 8005c02:	e022      	b.n	8005c4a <HAL_TIM_PWM_Start_DMA+0x142>
 8005c04:	68bb      	ldr	r3, [r7, #8]
 8005c06:	2b0c      	cmp	r3, #12
 8005c08:	d109      	bne.n	8005c1e <HAL_TIM_PWM_Start_DMA+0x116>
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005c10:	b2db      	uxtb	r3, r3
 8005c12:	2b01      	cmp	r3, #1
 8005c14:	bf0c      	ite	eq
 8005c16:	2301      	moveq	r3, #1
 8005c18:	2300      	movne	r3, #0
 8005c1a:	b2db      	uxtb	r3, r3
 8005c1c:	e015      	b.n	8005c4a <HAL_TIM_PWM_Start_DMA+0x142>
 8005c1e:	68bb      	ldr	r3, [r7, #8]
 8005c20:	2b10      	cmp	r3, #16
 8005c22:	d109      	bne.n	8005c38 <HAL_TIM_PWM_Start_DMA+0x130>
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005c2a:	b2db      	uxtb	r3, r3
 8005c2c:	2b01      	cmp	r3, #1
 8005c2e:	bf0c      	ite	eq
 8005c30:	2301      	moveq	r3, #1
 8005c32:	2300      	movne	r3, #0
 8005c34:	b2db      	uxtb	r3, r3
 8005c36:	e008      	b.n	8005c4a <HAL_TIM_PWM_Start_DMA+0x142>
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8005c3e:	b2db      	uxtb	r3, r3
 8005c40:	2b01      	cmp	r3, #1
 8005c42:	bf0c      	ite	eq
 8005c44:	2301      	moveq	r3, #1
 8005c46:	2300      	movne	r3, #0
 8005c48:	b2db      	uxtb	r3, r3
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d034      	beq.n	8005cb8 <HAL_TIM_PWM_Start_DMA+0x1b0>
  {
    if ((pData == NULL) || (Length == 0U))
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d002      	beq.n	8005c5a <HAL_TIM_PWM_Start_DMA+0x152>
 8005c54:	887b      	ldrh	r3, [r7, #2]
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d101      	bne.n	8005c5e <HAL_TIM_PWM_Start_DMA+0x156>
    {
      return HAL_ERROR;
 8005c5a:	2301      	movs	r3, #1
 8005c5c:	e157      	b.n	8005f0e <HAL_TIM_PWM_Start_DMA+0x406>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005c5e:	68bb      	ldr	r3, [r7, #8]
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d104      	bne.n	8005c6e <HAL_TIM_PWM_Start_DMA+0x166>
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	2202      	movs	r2, #2
 8005c68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005c6c:	e026      	b.n	8005cbc <HAL_TIM_PWM_Start_DMA+0x1b4>
 8005c6e:	68bb      	ldr	r3, [r7, #8]
 8005c70:	2b04      	cmp	r3, #4
 8005c72:	d104      	bne.n	8005c7e <HAL_TIM_PWM_Start_DMA+0x176>
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	2202      	movs	r2, #2
 8005c78:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005c7c:	e01e      	b.n	8005cbc <HAL_TIM_PWM_Start_DMA+0x1b4>
 8005c7e:	68bb      	ldr	r3, [r7, #8]
 8005c80:	2b08      	cmp	r3, #8
 8005c82:	d104      	bne.n	8005c8e <HAL_TIM_PWM_Start_DMA+0x186>
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	2202      	movs	r2, #2
 8005c88:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005c8c:	e016      	b.n	8005cbc <HAL_TIM_PWM_Start_DMA+0x1b4>
 8005c8e:	68bb      	ldr	r3, [r7, #8]
 8005c90:	2b0c      	cmp	r3, #12
 8005c92:	d104      	bne.n	8005c9e <HAL_TIM_PWM_Start_DMA+0x196>
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	2202      	movs	r2, #2
 8005c98:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005c9c:	e00e      	b.n	8005cbc <HAL_TIM_PWM_Start_DMA+0x1b4>
 8005c9e:	68bb      	ldr	r3, [r7, #8]
 8005ca0:	2b10      	cmp	r3, #16
 8005ca2:	d104      	bne.n	8005cae <HAL_TIM_PWM_Start_DMA+0x1a6>
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	2202      	movs	r2, #2
 8005ca8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005cac:	e006      	b.n	8005cbc <HAL_TIM_PWM_Start_DMA+0x1b4>
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	2202      	movs	r2, #2
 8005cb2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005cb6:	e001      	b.n	8005cbc <HAL_TIM_PWM_Start_DMA+0x1b4>
    }
  }
  else
  {
    return HAL_ERROR;
 8005cb8:	2301      	movs	r3, #1
 8005cba:	e128      	b.n	8005f0e <HAL_TIM_PWM_Start_DMA+0x406>
  }

  switch (Channel)
 8005cbc:	68bb      	ldr	r3, [r7, #8]
 8005cbe:	2b0c      	cmp	r3, #12
 8005cc0:	f200 80ae 	bhi.w	8005e20 <HAL_TIM_PWM_Start_DMA+0x318>
 8005cc4:	a201      	add	r2, pc, #4	; (adr r2, 8005ccc <HAL_TIM_PWM_Start_DMA+0x1c4>)
 8005cc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005cca:	bf00      	nop
 8005ccc:	08005d01 	.word	0x08005d01
 8005cd0:	08005e21 	.word	0x08005e21
 8005cd4:	08005e21 	.word	0x08005e21
 8005cd8:	08005e21 	.word	0x08005e21
 8005cdc:	08005d49 	.word	0x08005d49
 8005ce0:	08005e21 	.word	0x08005e21
 8005ce4:	08005e21 	.word	0x08005e21
 8005ce8:	08005e21 	.word	0x08005e21
 8005cec:	08005d91 	.word	0x08005d91
 8005cf0:	08005e21 	.word	0x08005e21
 8005cf4:	08005e21 	.word	0x08005e21
 8005cf8:	08005e21 	.word	0x08005e21
 8005cfc:	08005dd9 	.word	0x08005dd9
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d04:	4a84      	ldr	r2, [pc, #528]	; (8005f18 <HAL_TIM_PWM_Start_DMA+0x410>)
 8005d06:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d0c:	4a83      	ldr	r2, [pc, #524]	; (8005f1c <HAL_TIM_PWM_Start_DMA+0x414>)
 8005d0e:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d14:	4a82      	ldr	r2, [pc, #520]	; (8005f20 <HAL_TIM_PWM_Start_DMA+0x418>)
 8005d16:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8005d1c:	6879      	ldr	r1, [r7, #4]
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	3334      	adds	r3, #52	; 0x34
 8005d24:	461a      	mov	r2, r3
 8005d26:	887b      	ldrh	r3, [r7, #2]
 8005d28:	f7fd f990 	bl	800304c <HAL_DMA_Start_IT>
 8005d2c:	4603      	mov	r3, r0
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d001      	beq.n	8005d36 <HAL_TIM_PWM_Start_DMA+0x22e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8005d32:	2301      	movs	r3, #1
 8005d34:	e0eb      	b.n	8005f0e <HAL_TIM_PWM_Start_DMA+0x406>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	68da      	ldr	r2, [r3, #12]
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005d44:	60da      	str	r2, [r3, #12]
      break;
 8005d46:	e06e      	b.n	8005e26 <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d4c:	4a72      	ldr	r2, [pc, #456]	; (8005f18 <HAL_TIM_PWM_Start_DMA+0x410>)
 8005d4e:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d54:	4a71      	ldr	r2, [pc, #452]	; (8005f1c <HAL_TIM_PWM_Start_DMA+0x414>)
 8005d56:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d5c:	4a70      	ldr	r2, [pc, #448]	; (8005f20 <HAL_TIM_PWM_Start_DMA+0x418>)
 8005d5e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8005d64:	6879      	ldr	r1, [r7, #4]
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	3338      	adds	r3, #56	; 0x38
 8005d6c:	461a      	mov	r2, r3
 8005d6e:	887b      	ldrh	r3, [r7, #2]
 8005d70:	f7fd f96c 	bl	800304c <HAL_DMA_Start_IT>
 8005d74:	4603      	mov	r3, r0
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d001      	beq.n	8005d7e <HAL_TIM_PWM_Start_DMA+0x276>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8005d7a:	2301      	movs	r3, #1
 8005d7c:	e0c7      	b.n	8005f0e <HAL_TIM_PWM_Start_DMA+0x406>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	68da      	ldr	r2, [r3, #12]
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005d8c:	60da      	str	r2, [r3, #12]
      break;
 8005d8e:	e04a      	b.n	8005e26 <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d94:	4a60      	ldr	r2, [pc, #384]	; (8005f18 <HAL_TIM_PWM_Start_DMA+0x410>)
 8005d96:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d9c:	4a5f      	ldr	r2, [pc, #380]	; (8005f1c <HAL_TIM_PWM_Start_DMA+0x414>)
 8005d9e:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005da4:	4a5e      	ldr	r2, [pc, #376]	; (8005f20 <HAL_TIM_PWM_Start_DMA+0x418>)
 8005da6:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8005dac:	6879      	ldr	r1, [r7, #4]
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	333c      	adds	r3, #60	; 0x3c
 8005db4:	461a      	mov	r2, r3
 8005db6:	887b      	ldrh	r3, [r7, #2]
 8005db8:	f7fd f948 	bl	800304c <HAL_DMA_Start_IT>
 8005dbc:	4603      	mov	r3, r0
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d001      	beq.n	8005dc6 <HAL_TIM_PWM_Start_DMA+0x2be>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8005dc2:	2301      	movs	r3, #1
 8005dc4:	e0a3      	b.n	8005f0e <HAL_TIM_PWM_Start_DMA+0x406>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	68da      	ldr	r2, [r3, #12]
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005dd4:	60da      	str	r2, [r3, #12]
      break;
 8005dd6:	e026      	b.n	8005e26 <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ddc:	4a4e      	ldr	r2, [pc, #312]	; (8005f18 <HAL_TIM_PWM_Start_DMA+0x410>)
 8005dde:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005de4:	4a4d      	ldr	r2, [pc, #308]	; (8005f1c <HAL_TIM_PWM_Start_DMA+0x414>)
 8005de6:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005dec:	4a4c      	ldr	r2, [pc, #304]	; (8005f20 <HAL_TIM_PWM_Start_DMA+0x418>)
 8005dee:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8005df4:	6879      	ldr	r1, [r7, #4]
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	3340      	adds	r3, #64	; 0x40
 8005dfc:	461a      	mov	r2, r3
 8005dfe:	887b      	ldrh	r3, [r7, #2]
 8005e00:	f7fd f924 	bl	800304c <HAL_DMA_Start_IT>
 8005e04:	4603      	mov	r3, r0
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d001      	beq.n	8005e0e <HAL_TIM_PWM_Start_DMA+0x306>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8005e0a:	2301      	movs	r3, #1
 8005e0c:	e07f      	b.n	8005f0e <HAL_TIM_PWM_Start_DMA+0x406>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	68da      	ldr	r2, [r3, #12]
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005e1c:	60da      	str	r2, [r3, #12]
      break;
 8005e1e:	e002      	b.n	8005e26 <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    default:
      status = HAL_ERROR;
 8005e20:	2301      	movs	r3, #1
 8005e22:	75fb      	strb	r3, [r7, #23]
      break;
 8005e24:	bf00      	nop
  }

  if (status == HAL_OK)
 8005e26:	7dfb      	ldrb	r3, [r7, #23]
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d16f      	bne.n	8005f0c <HAL_TIM_PWM_Start_DMA+0x404>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	2201      	movs	r2, #1
 8005e32:	68b9      	ldr	r1, [r7, #8]
 8005e34:	4618      	mov	r0, r3
 8005e36:	f001 fbe1 	bl	80075fc <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	4a39      	ldr	r2, [pc, #228]	; (8005f24 <HAL_TIM_PWM_Start_DMA+0x41c>)
 8005e40:	4293      	cmp	r3, r2
 8005e42:	d013      	beq.n	8005e6c <HAL_TIM_PWM_Start_DMA+0x364>
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	4a37      	ldr	r2, [pc, #220]	; (8005f28 <HAL_TIM_PWM_Start_DMA+0x420>)
 8005e4a:	4293      	cmp	r3, r2
 8005e4c:	d00e      	beq.n	8005e6c <HAL_TIM_PWM_Start_DMA+0x364>
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	4a36      	ldr	r2, [pc, #216]	; (8005f2c <HAL_TIM_PWM_Start_DMA+0x424>)
 8005e54:	4293      	cmp	r3, r2
 8005e56:	d009      	beq.n	8005e6c <HAL_TIM_PWM_Start_DMA+0x364>
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	4a34      	ldr	r2, [pc, #208]	; (8005f30 <HAL_TIM_PWM_Start_DMA+0x428>)
 8005e5e:	4293      	cmp	r3, r2
 8005e60:	d004      	beq.n	8005e6c <HAL_TIM_PWM_Start_DMA+0x364>
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	4a33      	ldr	r2, [pc, #204]	; (8005f34 <HAL_TIM_PWM_Start_DMA+0x42c>)
 8005e68:	4293      	cmp	r3, r2
 8005e6a:	d101      	bne.n	8005e70 <HAL_TIM_PWM_Start_DMA+0x368>
 8005e6c:	2301      	movs	r3, #1
 8005e6e:	e000      	b.n	8005e72 <HAL_TIM_PWM_Start_DMA+0x36a>
 8005e70:	2300      	movs	r3, #0
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d007      	beq.n	8005e86 <HAL_TIM_PWM_Start_DMA+0x37e>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005e84:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	4a26      	ldr	r2, [pc, #152]	; (8005f24 <HAL_TIM_PWM_Start_DMA+0x41c>)
 8005e8c:	4293      	cmp	r3, r2
 8005e8e:	d01d      	beq.n	8005ecc <HAL_TIM_PWM_Start_DMA+0x3c4>
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005e98:	d018      	beq.n	8005ecc <HAL_TIM_PWM_Start_DMA+0x3c4>
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	4a26      	ldr	r2, [pc, #152]	; (8005f38 <HAL_TIM_PWM_Start_DMA+0x430>)
 8005ea0:	4293      	cmp	r3, r2
 8005ea2:	d013      	beq.n	8005ecc <HAL_TIM_PWM_Start_DMA+0x3c4>
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	4a24      	ldr	r2, [pc, #144]	; (8005f3c <HAL_TIM_PWM_Start_DMA+0x434>)
 8005eaa:	4293      	cmp	r3, r2
 8005eac:	d00e      	beq.n	8005ecc <HAL_TIM_PWM_Start_DMA+0x3c4>
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	4a23      	ldr	r2, [pc, #140]	; (8005f40 <HAL_TIM_PWM_Start_DMA+0x438>)
 8005eb4:	4293      	cmp	r3, r2
 8005eb6:	d009      	beq.n	8005ecc <HAL_TIM_PWM_Start_DMA+0x3c4>
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	4a1a      	ldr	r2, [pc, #104]	; (8005f28 <HAL_TIM_PWM_Start_DMA+0x420>)
 8005ebe:	4293      	cmp	r3, r2
 8005ec0:	d004      	beq.n	8005ecc <HAL_TIM_PWM_Start_DMA+0x3c4>
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	4a19      	ldr	r2, [pc, #100]	; (8005f2c <HAL_TIM_PWM_Start_DMA+0x424>)
 8005ec8:	4293      	cmp	r3, r2
 8005eca:	d115      	bne.n	8005ef8 <HAL_TIM_PWM_Start_DMA+0x3f0>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	689a      	ldr	r2, [r3, #8]
 8005ed2:	4b1c      	ldr	r3, [pc, #112]	; (8005f44 <HAL_TIM_PWM_Start_DMA+0x43c>)
 8005ed4:	4013      	ands	r3, r2
 8005ed6:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005ed8:	693b      	ldr	r3, [r7, #16]
 8005eda:	2b06      	cmp	r3, #6
 8005edc:	d015      	beq.n	8005f0a <HAL_TIM_PWM_Start_DMA+0x402>
 8005ede:	693b      	ldr	r3, [r7, #16]
 8005ee0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005ee4:	d011      	beq.n	8005f0a <HAL_TIM_PWM_Start_DMA+0x402>
      {
        __HAL_TIM_ENABLE(htim);
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	681a      	ldr	r2, [r3, #0]
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	f042 0201 	orr.w	r2, r2, #1
 8005ef4:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005ef6:	e008      	b.n	8005f0a <HAL_TIM_PWM_Start_DMA+0x402>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	681a      	ldr	r2, [r3, #0]
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	f042 0201 	orr.w	r2, r2, #1
 8005f06:	601a      	str	r2, [r3, #0]
 8005f08:	e000      	b.n	8005f0c <HAL_TIM_PWM_Start_DMA+0x404>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005f0a:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 8005f0c:	7dfb      	ldrb	r3, [r7, #23]
}
 8005f0e:	4618      	mov	r0, r3
 8005f10:	3718      	adds	r7, #24
 8005f12:	46bd      	mov	sp, r7
 8005f14:	bd80      	pop	{r7, pc}
 8005f16:	bf00      	nop
 8005f18:	08006a8f 	.word	0x08006a8f
 8005f1c:	08006b37 	.word	0x08006b37
 8005f20:	080069fd 	.word	0x080069fd
 8005f24:	40012c00 	.word	0x40012c00
 8005f28:	40013400 	.word	0x40013400
 8005f2c:	40014000 	.word	0x40014000
 8005f30:	40014400 	.word	0x40014400
 8005f34:	40014800 	.word	0x40014800
 8005f38:	40000400 	.word	0x40000400
 8005f3c:	40000800 	.word	0x40000800
 8005f40:	40000c00 	.word	0x40000c00
 8005f44:	00010007 	.word	0x00010007

08005f48 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8005f48:	b580      	push	{r7, lr}
 8005f4a:	b082      	sub	sp, #8
 8005f4c:	af00      	add	r7, sp, #0
 8005f4e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d101      	bne.n	8005f5a <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8005f56:	2301      	movs	r3, #1
 8005f58:	e049      	b.n	8005fee <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005f60:	b2db      	uxtb	r3, r3
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d106      	bne.n	8005f74 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	2200      	movs	r2, #0
 8005f6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8005f6e:	6878      	ldr	r0, [r7, #4]
 8005f70:	f000 f841 	bl	8005ff6 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	2202      	movs	r2, #2
 8005f78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	681a      	ldr	r2, [r3, #0]
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	3304      	adds	r3, #4
 8005f84:	4619      	mov	r1, r3
 8005f86:	4610      	mov	r0, r2
 8005f88:	f000 fe0a 	bl	8006ba0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	2201      	movs	r2, #1
 8005f90:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	2201      	movs	r2, #1
 8005f98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	2201      	movs	r2, #1
 8005fa0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	2201      	movs	r2, #1
 8005fa8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	2201      	movs	r2, #1
 8005fb0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	2201      	movs	r2, #1
 8005fb8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	2201      	movs	r2, #1
 8005fc0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	2201      	movs	r2, #1
 8005fc8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	2201      	movs	r2, #1
 8005fd0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	2201      	movs	r2, #1
 8005fd8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	2201      	movs	r2, #1
 8005fe0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	2201      	movs	r2, #1
 8005fe8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005fec:	2300      	movs	r3, #0
}
 8005fee:	4618      	mov	r0, r3
 8005ff0:	3708      	adds	r7, #8
 8005ff2:	46bd      	mov	sp, r7
 8005ff4:	bd80      	pop	{r7, pc}

08005ff6 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8005ff6:	b480      	push	{r7}
 8005ff8:	b083      	sub	sp, #12
 8005ffa:	af00      	add	r7, sp, #0
 8005ffc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8005ffe:	bf00      	nop
 8006000:	370c      	adds	r7, #12
 8006002:	46bd      	mov	sp, r7
 8006004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006008:	4770      	bx	lr
	...

0800600c <HAL_TIM_IC_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800600c:	b580      	push	{r7, lr}
 800600e:	b084      	sub	sp, #16
 8006010:	af00      	add	r7, sp, #0
 8006012:	6078      	str	r0, [r7, #4]
 8006014:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8006016:	683b      	ldr	r3, [r7, #0]
 8006018:	2b00      	cmp	r3, #0
 800601a:	d104      	bne.n	8006026 <HAL_TIM_IC_Start+0x1a>
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006022:	b2db      	uxtb	r3, r3
 8006024:	e023      	b.n	800606e <HAL_TIM_IC_Start+0x62>
 8006026:	683b      	ldr	r3, [r7, #0]
 8006028:	2b04      	cmp	r3, #4
 800602a:	d104      	bne.n	8006036 <HAL_TIM_IC_Start+0x2a>
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006032:	b2db      	uxtb	r3, r3
 8006034:	e01b      	b.n	800606e <HAL_TIM_IC_Start+0x62>
 8006036:	683b      	ldr	r3, [r7, #0]
 8006038:	2b08      	cmp	r3, #8
 800603a:	d104      	bne.n	8006046 <HAL_TIM_IC_Start+0x3a>
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006042:	b2db      	uxtb	r3, r3
 8006044:	e013      	b.n	800606e <HAL_TIM_IC_Start+0x62>
 8006046:	683b      	ldr	r3, [r7, #0]
 8006048:	2b0c      	cmp	r3, #12
 800604a:	d104      	bne.n	8006056 <HAL_TIM_IC_Start+0x4a>
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006052:	b2db      	uxtb	r3, r3
 8006054:	e00b      	b.n	800606e <HAL_TIM_IC_Start+0x62>
 8006056:	683b      	ldr	r3, [r7, #0]
 8006058:	2b10      	cmp	r3, #16
 800605a:	d104      	bne.n	8006066 <HAL_TIM_IC_Start+0x5a>
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006062:	b2db      	uxtb	r3, r3
 8006064:	e003      	b.n	800606e <HAL_TIM_IC_Start+0x62>
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800606c:	b2db      	uxtb	r3, r3
 800606e:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8006070:	683b      	ldr	r3, [r7, #0]
 8006072:	2b00      	cmp	r3, #0
 8006074:	d104      	bne.n	8006080 <HAL_TIM_IC_Start+0x74>
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800607c:	b2db      	uxtb	r3, r3
 800607e:	e013      	b.n	80060a8 <HAL_TIM_IC_Start+0x9c>
 8006080:	683b      	ldr	r3, [r7, #0]
 8006082:	2b04      	cmp	r3, #4
 8006084:	d104      	bne.n	8006090 <HAL_TIM_IC_Start+0x84>
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800608c:	b2db      	uxtb	r3, r3
 800608e:	e00b      	b.n	80060a8 <HAL_TIM_IC_Start+0x9c>
 8006090:	683b      	ldr	r3, [r7, #0]
 8006092:	2b08      	cmp	r3, #8
 8006094:	d104      	bne.n	80060a0 <HAL_TIM_IC_Start+0x94>
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800609c:	b2db      	uxtb	r3, r3
 800609e:	e003      	b.n	80060a8 <HAL_TIM_IC_Start+0x9c>
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 80060a6:	b2db      	uxtb	r3, r3
 80060a8:	73bb      	strb	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 80060aa:	7bfb      	ldrb	r3, [r7, #15]
 80060ac:	2b01      	cmp	r3, #1
 80060ae:	d102      	bne.n	80060b6 <HAL_TIM_IC_Start+0xaa>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 80060b0:	7bbb      	ldrb	r3, [r7, #14]
 80060b2:	2b01      	cmp	r3, #1
 80060b4:	d001      	beq.n	80060ba <HAL_TIM_IC_Start+0xae>
  {
    return HAL_ERROR;
 80060b6:	2301      	movs	r3, #1
 80060b8:	e092      	b.n	80061e0 <HAL_TIM_IC_Start+0x1d4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80060ba:	683b      	ldr	r3, [r7, #0]
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d104      	bne.n	80060ca <HAL_TIM_IC_Start+0xbe>
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	2202      	movs	r2, #2
 80060c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80060c8:	e023      	b.n	8006112 <HAL_TIM_IC_Start+0x106>
 80060ca:	683b      	ldr	r3, [r7, #0]
 80060cc:	2b04      	cmp	r3, #4
 80060ce:	d104      	bne.n	80060da <HAL_TIM_IC_Start+0xce>
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	2202      	movs	r2, #2
 80060d4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80060d8:	e01b      	b.n	8006112 <HAL_TIM_IC_Start+0x106>
 80060da:	683b      	ldr	r3, [r7, #0]
 80060dc:	2b08      	cmp	r3, #8
 80060de:	d104      	bne.n	80060ea <HAL_TIM_IC_Start+0xde>
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	2202      	movs	r2, #2
 80060e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80060e8:	e013      	b.n	8006112 <HAL_TIM_IC_Start+0x106>
 80060ea:	683b      	ldr	r3, [r7, #0]
 80060ec:	2b0c      	cmp	r3, #12
 80060ee:	d104      	bne.n	80060fa <HAL_TIM_IC_Start+0xee>
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	2202      	movs	r2, #2
 80060f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80060f8:	e00b      	b.n	8006112 <HAL_TIM_IC_Start+0x106>
 80060fa:	683b      	ldr	r3, [r7, #0]
 80060fc:	2b10      	cmp	r3, #16
 80060fe:	d104      	bne.n	800610a <HAL_TIM_IC_Start+0xfe>
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	2202      	movs	r2, #2
 8006104:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006108:	e003      	b.n	8006112 <HAL_TIM_IC_Start+0x106>
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	2202      	movs	r2, #2
 800610e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006112:	683b      	ldr	r3, [r7, #0]
 8006114:	2b00      	cmp	r3, #0
 8006116:	d104      	bne.n	8006122 <HAL_TIM_IC_Start+0x116>
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	2202      	movs	r2, #2
 800611c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006120:	e013      	b.n	800614a <HAL_TIM_IC_Start+0x13e>
 8006122:	683b      	ldr	r3, [r7, #0]
 8006124:	2b04      	cmp	r3, #4
 8006126:	d104      	bne.n	8006132 <HAL_TIM_IC_Start+0x126>
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	2202      	movs	r2, #2
 800612c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006130:	e00b      	b.n	800614a <HAL_TIM_IC_Start+0x13e>
 8006132:	683b      	ldr	r3, [r7, #0]
 8006134:	2b08      	cmp	r3, #8
 8006136:	d104      	bne.n	8006142 <HAL_TIM_IC_Start+0x136>
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	2202      	movs	r2, #2
 800613c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006140:	e003      	b.n	800614a <HAL_TIM_IC_Start+0x13e>
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	2202      	movs	r2, #2
 8006146:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	2201      	movs	r2, #1
 8006150:	6839      	ldr	r1, [r7, #0]
 8006152:	4618      	mov	r0, r3
 8006154:	f001 fa52 	bl	80075fc <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	4a22      	ldr	r2, [pc, #136]	; (80061e8 <HAL_TIM_IC_Start+0x1dc>)
 800615e:	4293      	cmp	r3, r2
 8006160:	d01d      	beq.n	800619e <HAL_TIM_IC_Start+0x192>
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800616a:	d018      	beq.n	800619e <HAL_TIM_IC_Start+0x192>
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	4a1e      	ldr	r2, [pc, #120]	; (80061ec <HAL_TIM_IC_Start+0x1e0>)
 8006172:	4293      	cmp	r3, r2
 8006174:	d013      	beq.n	800619e <HAL_TIM_IC_Start+0x192>
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	4a1d      	ldr	r2, [pc, #116]	; (80061f0 <HAL_TIM_IC_Start+0x1e4>)
 800617c:	4293      	cmp	r3, r2
 800617e:	d00e      	beq.n	800619e <HAL_TIM_IC_Start+0x192>
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	4a1b      	ldr	r2, [pc, #108]	; (80061f4 <HAL_TIM_IC_Start+0x1e8>)
 8006186:	4293      	cmp	r3, r2
 8006188:	d009      	beq.n	800619e <HAL_TIM_IC_Start+0x192>
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	4a1a      	ldr	r2, [pc, #104]	; (80061f8 <HAL_TIM_IC_Start+0x1ec>)
 8006190:	4293      	cmp	r3, r2
 8006192:	d004      	beq.n	800619e <HAL_TIM_IC_Start+0x192>
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	4a18      	ldr	r2, [pc, #96]	; (80061fc <HAL_TIM_IC_Start+0x1f0>)
 800619a:	4293      	cmp	r3, r2
 800619c:	d115      	bne.n	80061ca <HAL_TIM_IC_Start+0x1be>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	689a      	ldr	r2, [r3, #8]
 80061a4:	4b16      	ldr	r3, [pc, #88]	; (8006200 <HAL_TIM_IC_Start+0x1f4>)
 80061a6:	4013      	ands	r3, r2
 80061a8:	60bb      	str	r3, [r7, #8]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80061aa:	68bb      	ldr	r3, [r7, #8]
 80061ac:	2b06      	cmp	r3, #6
 80061ae:	d015      	beq.n	80061dc <HAL_TIM_IC_Start+0x1d0>
 80061b0:	68bb      	ldr	r3, [r7, #8]
 80061b2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80061b6:	d011      	beq.n	80061dc <HAL_TIM_IC_Start+0x1d0>
    {
      __HAL_TIM_ENABLE(htim);
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	681a      	ldr	r2, [r3, #0]
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	f042 0201 	orr.w	r2, r2, #1
 80061c6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80061c8:	e008      	b.n	80061dc <HAL_TIM_IC_Start+0x1d0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	681a      	ldr	r2, [r3, #0]
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	f042 0201 	orr.w	r2, r2, #1
 80061d8:	601a      	str	r2, [r3, #0]
 80061da:	e000      	b.n	80061de <HAL_TIM_IC_Start+0x1d2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80061dc:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80061de:	2300      	movs	r3, #0
}
 80061e0:	4618      	mov	r0, r3
 80061e2:	3710      	adds	r7, #16
 80061e4:	46bd      	mov	sp, r7
 80061e6:	bd80      	pop	{r7, pc}
 80061e8:	40012c00 	.word	0x40012c00
 80061ec:	40000400 	.word	0x40000400
 80061f0:	40000800 	.word	0x40000800
 80061f4:	40000c00 	.word	0x40000c00
 80061f8:	40013400 	.word	0x40013400
 80061fc:	40014000 	.word	0x40014000
 8006200:	00010007 	.word	0x00010007

08006204 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006204:	b580      	push	{r7, lr}
 8006206:	b084      	sub	sp, #16
 8006208:	af00      	add	r7, sp, #0
 800620a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	68db      	ldr	r3, [r3, #12]
 8006212:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	691b      	ldr	r3, [r3, #16]
 800621a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800621c:	68bb      	ldr	r3, [r7, #8]
 800621e:	f003 0302 	and.w	r3, r3, #2
 8006222:	2b00      	cmp	r3, #0
 8006224:	d020      	beq.n	8006268 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	f003 0302 	and.w	r3, r3, #2
 800622c:	2b00      	cmp	r3, #0
 800622e:	d01b      	beq.n	8006268 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	f06f 0202 	mvn.w	r2, #2
 8006238:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	2201      	movs	r2, #1
 800623e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	699b      	ldr	r3, [r3, #24]
 8006246:	f003 0303 	and.w	r3, r3, #3
 800624a:	2b00      	cmp	r3, #0
 800624c:	d003      	beq.n	8006256 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800624e:	6878      	ldr	r0, [r7, #4]
 8006250:	f000 fba2 	bl	8006998 <HAL_TIM_IC_CaptureCallback>
 8006254:	e005      	b.n	8006262 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006256:	6878      	ldr	r0, [r7, #4]
 8006258:	f000 fb94 	bl	8006984 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800625c:	6878      	ldr	r0, [r7, #4]
 800625e:	f000 fba5 	bl	80069ac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	2200      	movs	r2, #0
 8006266:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8006268:	68bb      	ldr	r3, [r7, #8]
 800626a:	f003 0304 	and.w	r3, r3, #4
 800626e:	2b00      	cmp	r3, #0
 8006270:	d020      	beq.n	80062b4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	f003 0304 	and.w	r3, r3, #4
 8006278:	2b00      	cmp	r3, #0
 800627a:	d01b      	beq.n	80062b4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	f06f 0204 	mvn.w	r2, #4
 8006284:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	2202      	movs	r2, #2
 800628a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	699b      	ldr	r3, [r3, #24]
 8006292:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006296:	2b00      	cmp	r3, #0
 8006298:	d003      	beq.n	80062a2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800629a:	6878      	ldr	r0, [r7, #4]
 800629c:	f000 fb7c 	bl	8006998 <HAL_TIM_IC_CaptureCallback>
 80062a0:	e005      	b.n	80062ae <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80062a2:	6878      	ldr	r0, [r7, #4]
 80062a4:	f000 fb6e 	bl	8006984 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80062a8:	6878      	ldr	r0, [r7, #4]
 80062aa:	f000 fb7f 	bl	80069ac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	2200      	movs	r2, #0
 80062b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80062b4:	68bb      	ldr	r3, [r7, #8]
 80062b6:	f003 0308 	and.w	r3, r3, #8
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d020      	beq.n	8006300 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	f003 0308 	and.w	r3, r3, #8
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d01b      	beq.n	8006300 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	f06f 0208 	mvn.w	r2, #8
 80062d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	2204      	movs	r2, #4
 80062d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	69db      	ldr	r3, [r3, #28]
 80062de:	f003 0303 	and.w	r3, r3, #3
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d003      	beq.n	80062ee <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80062e6:	6878      	ldr	r0, [r7, #4]
 80062e8:	f000 fb56 	bl	8006998 <HAL_TIM_IC_CaptureCallback>
 80062ec:	e005      	b.n	80062fa <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80062ee:	6878      	ldr	r0, [r7, #4]
 80062f0:	f000 fb48 	bl	8006984 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80062f4:	6878      	ldr	r0, [r7, #4]
 80062f6:	f000 fb59 	bl	80069ac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	2200      	movs	r2, #0
 80062fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8006300:	68bb      	ldr	r3, [r7, #8]
 8006302:	f003 0310 	and.w	r3, r3, #16
 8006306:	2b00      	cmp	r3, #0
 8006308:	d020      	beq.n	800634c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	f003 0310 	and.w	r3, r3, #16
 8006310:	2b00      	cmp	r3, #0
 8006312:	d01b      	beq.n	800634c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	f06f 0210 	mvn.w	r2, #16
 800631c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	2208      	movs	r2, #8
 8006322:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	69db      	ldr	r3, [r3, #28]
 800632a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800632e:	2b00      	cmp	r3, #0
 8006330:	d003      	beq.n	800633a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006332:	6878      	ldr	r0, [r7, #4]
 8006334:	f000 fb30 	bl	8006998 <HAL_TIM_IC_CaptureCallback>
 8006338:	e005      	b.n	8006346 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800633a:	6878      	ldr	r0, [r7, #4]
 800633c:	f000 fb22 	bl	8006984 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006340:	6878      	ldr	r0, [r7, #4]
 8006342:	f000 fb33 	bl	80069ac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	2200      	movs	r2, #0
 800634a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800634c:	68bb      	ldr	r3, [r7, #8]
 800634e:	f003 0301 	and.w	r3, r3, #1
 8006352:	2b00      	cmp	r3, #0
 8006354:	d00c      	beq.n	8006370 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	f003 0301 	and.w	r3, r3, #1
 800635c:	2b00      	cmp	r3, #0
 800635e:	d007      	beq.n	8006370 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	f06f 0201 	mvn.w	r2, #1
 8006368:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800636a:	6878      	ldr	r0, [r7, #4]
 800636c:	f7fb f8a6 	bl	80014bc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8006370:	68bb      	ldr	r3, [r7, #8]
 8006372:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006376:	2b00      	cmp	r3, #0
 8006378:	d00c      	beq.n	8006394 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006380:	2b00      	cmp	r3, #0
 8006382:	d007      	beq.n	8006394 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800638c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800638e:	6878      	ldr	r0, [r7, #4]
 8006390:	f001 f9ec 	bl	800776c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8006394:	68bb      	ldr	r3, [r7, #8]
 8006396:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800639a:	2b00      	cmp	r3, #0
 800639c:	d00c      	beq.n	80063b8 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d007      	beq.n	80063b8 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80063b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80063b2:	6878      	ldr	r0, [r7, #4]
 80063b4:	f001 f9e4 	bl	8007780 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80063b8:	68bb      	ldr	r3, [r7, #8]
 80063ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d00c      	beq.n	80063dc <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	d007      	beq.n	80063dc <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80063d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80063d6:	6878      	ldr	r0, [r7, #4]
 80063d8:	f000 fafc 	bl	80069d4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80063dc:	68bb      	ldr	r3, [r7, #8]
 80063de:	f003 0320 	and.w	r3, r3, #32
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d00c      	beq.n	8006400 <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	f003 0320 	and.w	r3, r3, #32
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d007      	beq.n	8006400 <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	f06f 0220 	mvn.w	r2, #32
 80063f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80063fa:	6878      	ldr	r0, [r7, #4]
 80063fc:	f001 f9ac 	bl	8007758 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006400:	bf00      	nop
 8006402:	3710      	adds	r7, #16
 8006404:	46bd      	mov	sp, r7
 8006406:	bd80      	pop	{r7, pc}

08006408 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8006408:	b580      	push	{r7, lr}
 800640a:	b086      	sub	sp, #24
 800640c:	af00      	add	r7, sp, #0
 800640e:	60f8      	str	r0, [r7, #12]
 8006410:	60b9      	str	r1, [r7, #8]
 8006412:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006414:	2300      	movs	r3, #0
 8006416:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800641e:	2b01      	cmp	r3, #1
 8006420:	d101      	bne.n	8006426 <HAL_TIM_IC_ConfigChannel+0x1e>
 8006422:	2302      	movs	r3, #2
 8006424:	e088      	b.n	8006538 <HAL_TIM_IC_ConfigChannel+0x130>
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	2201      	movs	r2, #1
 800642a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	2b00      	cmp	r3, #0
 8006432:	d11b      	bne.n	800646c <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8006438:	68bb      	ldr	r3, [r7, #8]
 800643a:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800643c:	68bb      	ldr	r3, [r7, #8]
 800643e:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8006440:	68bb      	ldr	r3, [r7, #8]
 8006442:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8006444:	f000 ff1c 	bl	8007280 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	699a      	ldr	r2, [r3, #24]
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	f022 020c 	bic.w	r2, r2, #12
 8006456:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	6999      	ldr	r1, [r3, #24]
 800645e:	68bb      	ldr	r3, [r7, #8]
 8006460:	689a      	ldr	r2, [r3, #8]
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	430a      	orrs	r2, r1
 8006468:	619a      	str	r2, [r3, #24]
 800646a:	e060      	b.n	800652e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	2b04      	cmp	r3, #4
 8006470:	d11c      	bne.n	80064ac <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8006476:	68bb      	ldr	r3, [r7, #8]
 8006478:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800647a:	68bb      	ldr	r3, [r7, #8]
 800647c:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800647e:	68bb      	ldr	r3, [r7, #8]
 8006480:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8006482:	f000 ff9a 	bl	80073ba <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	699a      	ldr	r2, [r3, #24]
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8006494:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	6999      	ldr	r1, [r3, #24]
 800649c:	68bb      	ldr	r3, [r7, #8]
 800649e:	689b      	ldr	r3, [r3, #8]
 80064a0:	021a      	lsls	r2, r3, #8
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	430a      	orrs	r2, r1
 80064a8:	619a      	str	r2, [r3, #24]
 80064aa:	e040      	b.n	800652e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	2b08      	cmp	r3, #8
 80064b0:	d11b      	bne.n	80064ea <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80064b6:	68bb      	ldr	r3, [r7, #8]
 80064b8:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80064ba:	68bb      	ldr	r3, [r7, #8]
 80064bc:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80064be:	68bb      	ldr	r3, [r7, #8]
 80064c0:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 80064c2:	f000 ffe7 	bl	8007494 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	69da      	ldr	r2, [r3, #28]
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	f022 020c 	bic.w	r2, r2, #12
 80064d4:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	69d9      	ldr	r1, [r3, #28]
 80064dc:	68bb      	ldr	r3, [r7, #8]
 80064de:	689a      	ldr	r2, [r3, #8]
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	430a      	orrs	r2, r1
 80064e6:	61da      	str	r2, [r3, #28]
 80064e8:	e021      	b.n	800652e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	2b0c      	cmp	r3, #12
 80064ee:	d11c      	bne.n	800652a <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80064f4:	68bb      	ldr	r3, [r7, #8]
 80064f6:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80064f8:	68bb      	ldr	r3, [r7, #8]
 80064fa:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80064fc:	68bb      	ldr	r3, [r7, #8]
 80064fe:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8006500:	f001 f804 	bl	800750c <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	69da      	ldr	r2, [r3, #28]
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8006512:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	69d9      	ldr	r1, [r3, #28]
 800651a:	68bb      	ldr	r3, [r7, #8]
 800651c:	689b      	ldr	r3, [r3, #8]
 800651e:	021a      	lsls	r2, r3, #8
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	430a      	orrs	r2, r1
 8006526:	61da      	str	r2, [r3, #28]
 8006528:	e001      	b.n	800652e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 800652a:	2301      	movs	r3, #1
 800652c:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	2200      	movs	r2, #0
 8006532:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006536:	7dfb      	ldrb	r3, [r7, #23]
}
 8006538:	4618      	mov	r0, r3
 800653a:	3718      	adds	r7, #24
 800653c:	46bd      	mov	sp, r7
 800653e:	bd80      	pop	{r7, pc}

08006540 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006540:	b580      	push	{r7, lr}
 8006542:	b086      	sub	sp, #24
 8006544:	af00      	add	r7, sp, #0
 8006546:	60f8      	str	r0, [r7, #12]
 8006548:	60b9      	str	r1, [r7, #8]
 800654a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800654c:	2300      	movs	r3, #0
 800654e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006556:	2b01      	cmp	r3, #1
 8006558:	d101      	bne.n	800655e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800655a:	2302      	movs	r3, #2
 800655c:	e0ff      	b.n	800675e <HAL_TIM_PWM_ConfigChannel+0x21e>
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	2201      	movs	r2, #1
 8006562:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	2b14      	cmp	r3, #20
 800656a:	f200 80f0 	bhi.w	800674e <HAL_TIM_PWM_ConfigChannel+0x20e>
 800656e:	a201      	add	r2, pc, #4	; (adr r2, 8006574 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006570:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006574:	080065c9 	.word	0x080065c9
 8006578:	0800674f 	.word	0x0800674f
 800657c:	0800674f 	.word	0x0800674f
 8006580:	0800674f 	.word	0x0800674f
 8006584:	08006609 	.word	0x08006609
 8006588:	0800674f 	.word	0x0800674f
 800658c:	0800674f 	.word	0x0800674f
 8006590:	0800674f 	.word	0x0800674f
 8006594:	0800664b 	.word	0x0800664b
 8006598:	0800674f 	.word	0x0800674f
 800659c:	0800674f 	.word	0x0800674f
 80065a0:	0800674f 	.word	0x0800674f
 80065a4:	0800668b 	.word	0x0800668b
 80065a8:	0800674f 	.word	0x0800674f
 80065ac:	0800674f 	.word	0x0800674f
 80065b0:	0800674f 	.word	0x0800674f
 80065b4:	080066cd 	.word	0x080066cd
 80065b8:	0800674f 	.word	0x0800674f
 80065bc:	0800674f 	.word	0x0800674f
 80065c0:	0800674f 	.word	0x0800674f
 80065c4:	0800670d 	.word	0x0800670d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	68b9      	ldr	r1, [r7, #8]
 80065ce:	4618      	mov	r0, r3
 80065d0:	f000 fb80 	bl	8006cd4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	699a      	ldr	r2, [r3, #24]
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	f042 0208 	orr.w	r2, r2, #8
 80065e2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	699a      	ldr	r2, [r3, #24]
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	f022 0204 	bic.w	r2, r2, #4
 80065f2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	6999      	ldr	r1, [r3, #24]
 80065fa:	68bb      	ldr	r3, [r7, #8]
 80065fc:	691a      	ldr	r2, [r3, #16]
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	430a      	orrs	r2, r1
 8006604:	619a      	str	r2, [r3, #24]
      break;
 8006606:	e0a5      	b.n	8006754 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	68b9      	ldr	r1, [r7, #8]
 800660e:	4618      	mov	r0, r3
 8006610:	f000 fbf0 	bl	8006df4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	699a      	ldr	r2, [r3, #24]
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006622:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	699a      	ldr	r2, [r3, #24]
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006632:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	6999      	ldr	r1, [r3, #24]
 800663a:	68bb      	ldr	r3, [r7, #8]
 800663c:	691b      	ldr	r3, [r3, #16]
 800663e:	021a      	lsls	r2, r3, #8
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	430a      	orrs	r2, r1
 8006646:	619a      	str	r2, [r3, #24]
      break;
 8006648:	e084      	b.n	8006754 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	68b9      	ldr	r1, [r7, #8]
 8006650:	4618      	mov	r0, r3
 8006652:	f000 fc59 	bl	8006f08 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	69da      	ldr	r2, [r3, #28]
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	f042 0208 	orr.w	r2, r2, #8
 8006664:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	69da      	ldr	r2, [r3, #28]
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	f022 0204 	bic.w	r2, r2, #4
 8006674:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	69d9      	ldr	r1, [r3, #28]
 800667c:	68bb      	ldr	r3, [r7, #8]
 800667e:	691a      	ldr	r2, [r3, #16]
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	430a      	orrs	r2, r1
 8006686:	61da      	str	r2, [r3, #28]
      break;
 8006688:	e064      	b.n	8006754 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	68b9      	ldr	r1, [r7, #8]
 8006690:	4618      	mov	r0, r3
 8006692:	f000 fcc1 	bl	8007018 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	69da      	ldr	r2, [r3, #28]
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80066a4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	69da      	ldr	r2, [r3, #28]
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80066b4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	69d9      	ldr	r1, [r3, #28]
 80066bc:	68bb      	ldr	r3, [r7, #8]
 80066be:	691b      	ldr	r3, [r3, #16]
 80066c0:	021a      	lsls	r2, r3, #8
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	430a      	orrs	r2, r1
 80066c8:	61da      	str	r2, [r3, #28]
      break;
 80066ca:	e043      	b.n	8006754 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	68b9      	ldr	r1, [r7, #8]
 80066d2:	4618      	mov	r0, r3
 80066d4:	f000 fd0a 	bl	80070ec <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	f042 0208 	orr.w	r2, r2, #8
 80066e6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	f022 0204 	bic.w	r2, r2, #4
 80066f6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80066fe:	68bb      	ldr	r3, [r7, #8]
 8006700:	691a      	ldr	r2, [r3, #16]
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	430a      	orrs	r2, r1
 8006708:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800670a:	e023      	b.n	8006754 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	68b9      	ldr	r1, [r7, #8]
 8006712:	4618      	mov	r0, r3
 8006714:	f000 fd4e 	bl	80071b4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006726:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006736:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800673e:	68bb      	ldr	r3, [r7, #8]
 8006740:	691b      	ldr	r3, [r3, #16]
 8006742:	021a      	lsls	r2, r3, #8
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	430a      	orrs	r2, r1
 800674a:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800674c:	e002      	b.n	8006754 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800674e:	2301      	movs	r3, #1
 8006750:	75fb      	strb	r3, [r7, #23]
      break;
 8006752:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	2200      	movs	r2, #0
 8006758:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800675c:	7dfb      	ldrb	r3, [r7, #23]
}
 800675e:	4618      	mov	r0, r3
 8006760:	3718      	adds	r7, #24
 8006762:	46bd      	mov	sp, r7
 8006764:	bd80      	pop	{r7, pc}
 8006766:	bf00      	nop

08006768 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006768:	b580      	push	{r7, lr}
 800676a:	b084      	sub	sp, #16
 800676c:	af00      	add	r7, sp, #0
 800676e:	6078      	str	r0, [r7, #4]
 8006770:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006772:	2300      	movs	r3, #0
 8006774:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800677c:	2b01      	cmp	r3, #1
 800677e:	d101      	bne.n	8006784 <HAL_TIM_ConfigClockSource+0x1c>
 8006780:	2302      	movs	r3, #2
 8006782:	e0b6      	b.n	80068f2 <HAL_TIM_ConfigClockSource+0x18a>
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	2201      	movs	r2, #1
 8006788:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	2202      	movs	r2, #2
 8006790:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	689b      	ldr	r3, [r3, #8]
 800679a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800679c:	68bb      	ldr	r3, [r7, #8]
 800679e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80067a2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80067a6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80067a8:	68bb      	ldr	r3, [r7, #8]
 80067aa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80067ae:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	68ba      	ldr	r2, [r7, #8]
 80067b6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80067b8:	683b      	ldr	r3, [r7, #0]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80067c0:	d03e      	beq.n	8006840 <HAL_TIM_ConfigClockSource+0xd8>
 80067c2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80067c6:	f200 8087 	bhi.w	80068d8 <HAL_TIM_ConfigClockSource+0x170>
 80067ca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80067ce:	f000 8086 	beq.w	80068de <HAL_TIM_ConfigClockSource+0x176>
 80067d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80067d6:	d87f      	bhi.n	80068d8 <HAL_TIM_ConfigClockSource+0x170>
 80067d8:	2b70      	cmp	r3, #112	; 0x70
 80067da:	d01a      	beq.n	8006812 <HAL_TIM_ConfigClockSource+0xaa>
 80067dc:	2b70      	cmp	r3, #112	; 0x70
 80067de:	d87b      	bhi.n	80068d8 <HAL_TIM_ConfigClockSource+0x170>
 80067e0:	2b60      	cmp	r3, #96	; 0x60
 80067e2:	d050      	beq.n	8006886 <HAL_TIM_ConfigClockSource+0x11e>
 80067e4:	2b60      	cmp	r3, #96	; 0x60
 80067e6:	d877      	bhi.n	80068d8 <HAL_TIM_ConfigClockSource+0x170>
 80067e8:	2b50      	cmp	r3, #80	; 0x50
 80067ea:	d03c      	beq.n	8006866 <HAL_TIM_ConfigClockSource+0xfe>
 80067ec:	2b50      	cmp	r3, #80	; 0x50
 80067ee:	d873      	bhi.n	80068d8 <HAL_TIM_ConfigClockSource+0x170>
 80067f0:	2b40      	cmp	r3, #64	; 0x40
 80067f2:	d058      	beq.n	80068a6 <HAL_TIM_ConfigClockSource+0x13e>
 80067f4:	2b40      	cmp	r3, #64	; 0x40
 80067f6:	d86f      	bhi.n	80068d8 <HAL_TIM_ConfigClockSource+0x170>
 80067f8:	2b30      	cmp	r3, #48	; 0x30
 80067fa:	d064      	beq.n	80068c6 <HAL_TIM_ConfigClockSource+0x15e>
 80067fc:	2b30      	cmp	r3, #48	; 0x30
 80067fe:	d86b      	bhi.n	80068d8 <HAL_TIM_ConfigClockSource+0x170>
 8006800:	2b20      	cmp	r3, #32
 8006802:	d060      	beq.n	80068c6 <HAL_TIM_ConfigClockSource+0x15e>
 8006804:	2b20      	cmp	r3, #32
 8006806:	d867      	bhi.n	80068d8 <HAL_TIM_ConfigClockSource+0x170>
 8006808:	2b00      	cmp	r3, #0
 800680a:	d05c      	beq.n	80068c6 <HAL_TIM_ConfigClockSource+0x15e>
 800680c:	2b10      	cmp	r3, #16
 800680e:	d05a      	beq.n	80068c6 <HAL_TIM_ConfigClockSource+0x15e>
 8006810:	e062      	b.n	80068d8 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006816:	683b      	ldr	r3, [r7, #0]
 8006818:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800681a:	683b      	ldr	r3, [r7, #0]
 800681c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800681e:	683b      	ldr	r3, [r7, #0]
 8006820:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006822:	f000 fecb 	bl	80075bc <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	689b      	ldr	r3, [r3, #8]
 800682c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800682e:	68bb      	ldr	r3, [r7, #8]
 8006830:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006834:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	68ba      	ldr	r2, [r7, #8]
 800683c:	609a      	str	r2, [r3, #8]
      break;
 800683e:	e04f      	b.n	80068e0 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006844:	683b      	ldr	r3, [r7, #0]
 8006846:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006848:	683b      	ldr	r3, [r7, #0]
 800684a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800684c:	683b      	ldr	r3, [r7, #0]
 800684e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006850:	f000 feb4 	bl	80075bc <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	689a      	ldr	r2, [r3, #8]
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006862:	609a      	str	r2, [r3, #8]
      break;
 8006864:	e03c      	b.n	80068e0 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800686a:	683b      	ldr	r3, [r7, #0]
 800686c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800686e:	683b      	ldr	r3, [r7, #0]
 8006870:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006872:	461a      	mov	r2, r3
 8006874:	f000 fd72 	bl	800735c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	2150      	movs	r1, #80	; 0x50
 800687e:	4618      	mov	r0, r3
 8006880:	f000 fe81 	bl	8007586 <TIM_ITRx_SetConfig>
      break;
 8006884:	e02c      	b.n	80068e0 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800688a:	683b      	ldr	r3, [r7, #0]
 800688c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800688e:	683b      	ldr	r3, [r7, #0]
 8006890:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006892:	461a      	mov	r2, r3
 8006894:	f000 fdce 	bl	8007434 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	2160      	movs	r1, #96	; 0x60
 800689e:	4618      	mov	r0, r3
 80068a0:	f000 fe71 	bl	8007586 <TIM_ITRx_SetConfig>
      break;
 80068a4:	e01c      	b.n	80068e0 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80068aa:	683b      	ldr	r3, [r7, #0]
 80068ac:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80068ae:	683b      	ldr	r3, [r7, #0]
 80068b0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80068b2:	461a      	mov	r2, r3
 80068b4:	f000 fd52 	bl	800735c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	2140      	movs	r1, #64	; 0x40
 80068be:	4618      	mov	r0, r3
 80068c0:	f000 fe61 	bl	8007586 <TIM_ITRx_SetConfig>
      break;
 80068c4:	e00c      	b.n	80068e0 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	681a      	ldr	r2, [r3, #0]
 80068ca:	683b      	ldr	r3, [r7, #0]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	4619      	mov	r1, r3
 80068d0:	4610      	mov	r0, r2
 80068d2:	f000 fe58 	bl	8007586 <TIM_ITRx_SetConfig>
      break;
 80068d6:	e003      	b.n	80068e0 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 80068d8:	2301      	movs	r3, #1
 80068da:	73fb      	strb	r3, [r7, #15]
      break;
 80068dc:	e000      	b.n	80068e0 <HAL_TIM_ConfigClockSource+0x178>
      break;
 80068de:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	2201      	movs	r2, #1
 80068e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	2200      	movs	r2, #0
 80068ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80068f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80068f2:	4618      	mov	r0, r3
 80068f4:	3710      	adds	r7, #16
 80068f6:	46bd      	mov	sp, r7
 80068f8:	bd80      	pop	{r7, pc}
	...

080068fc <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80068fc:	b480      	push	{r7}
 80068fe:	b085      	sub	sp, #20
 8006900:	af00      	add	r7, sp, #0
 8006902:	6078      	str	r0, [r7, #4]
 8006904:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8006906:	2300      	movs	r3, #0
 8006908:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 800690a:	683b      	ldr	r3, [r7, #0]
 800690c:	2b0c      	cmp	r3, #12
 800690e:	d831      	bhi.n	8006974 <HAL_TIM_ReadCapturedValue+0x78>
 8006910:	a201      	add	r2, pc, #4	; (adr r2, 8006918 <HAL_TIM_ReadCapturedValue+0x1c>)
 8006912:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006916:	bf00      	nop
 8006918:	0800694d 	.word	0x0800694d
 800691c:	08006975 	.word	0x08006975
 8006920:	08006975 	.word	0x08006975
 8006924:	08006975 	.word	0x08006975
 8006928:	08006957 	.word	0x08006957
 800692c:	08006975 	.word	0x08006975
 8006930:	08006975 	.word	0x08006975
 8006934:	08006975 	.word	0x08006975
 8006938:	08006961 	.word	0x08006961
 800693c:	08006975 	.word	0x08006975
 8006940:	08006975 	.word	0x08006975
 8006944:	08006975 	.word	0x08006975
 8006948:	0800696b 	.word	0x0800696b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006952:	60fb      	str	r3, [r7, #12]

      break;
 8006954:	e00f      	b.n	8006976 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800695c:	60fb      	str	r3, [r7, #12]

      break;
 800695e:	e00a      	b.n	8006976 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006966:	60fb      	str	r3, [r7, #12]

      break;
 8006968:	e005      	b.n	8006976 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006970:	60fb      	str	r3, [r7, #12]

      break;
 8006972:	e000      	b.n	8006976 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8006974:	bf00      	nop
  }

  return tmpreg;
 8006976:	68fb      	ldr	r3, [r7, #12]
}
 8006978:	4618      	mov	r0, r3
 800697a:	3714      	adds	r7, #20
 800697c:	46bd      	mov	sp, r7
 800697e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006982:	4770      	bx	lr

08006984 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006984:	b480      	push	{r7}
 8006986:	b083      	sub	sp, #12
 8006988:	af00      	add	r7, sp, #0
 800698a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800698c:	bf00      	nop
 800698e:	370c      	adds	r7, #12
 8006990:	46bd      	mov	sp, r7
 8006992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006996:	4770      	bx	lr

08006998 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006998:	b480      	push	{r7}
 800699a:	b083      	sub	sp, #12
 800699c:	af00      	add	r7, sp, #0
 800699e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80069a0:	bf00      	nop
 80069a2:	370c      	adds	r7, #12
 80069a4:	46bd      	mov	sp, r7
 80069a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069aa:	4770      	bx	lr

080069ac <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80069ac:	b480      	push	{r7}
 80069ae:	b083      	sub	sp, #12
 80069b0:	af00      	add	r7, sp, #0
 80069b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80069b4:	bf00      	nop
 80069b6:	370c      	adds	r7, #12
 80069b8:	46bd      	mov	sp, r7
 80069ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069be:	4770      	bx	lr

080069c0 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 80069c0:	b480      	push	{r7}
 80069c2:	b083      	sub	sp, #12
 80069c4:	af00      	add	r7, sp, #0
 80069c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 80069c8:	bf00      	nop
 80069ca:	370c      	adds	r7, #12
 80069cc:	46bd      	mov	sp, r7
 80069ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069d2:	4770      	bx	lr

080069d4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80069d4:	b480      	push	{r7}
 80069d6:	b083      	sub	sp, #12
 80069d8:	af00      	add	r7, sp, #0
 80069da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80069dc:	bf00      	nop
 80069de:	370c      	adds	r7, #12
 80069e0:	46bd      	mov	sp, r7
 80069e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069e6:	4770      	bx	lr

080069e8 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 80069e8:	b480      	push	{r7}
 80069ea:	b083      	sub	sp, #12
 80069ec:	af00      	add	r7, sp, #0
 80069ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 80069f0:	bf00      	nop
 80069f2:	370c      	adds	r7, #12
 80069f4:	46bd      	mov	sp, r7
 80069f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069fa:	4770      	bx	lr

080069fc <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 80069fc:	b580      	push	{r7, lr}
 80069fe:	b084      	sub	sp, #16
 8006a00:	af00      	add	r7, sp, #0
 8006a02:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a08:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a0e:	687a      	ldr	r2, [r7, #4]
 8006a10:	429a      	cmp	r2, r3
 8006a12:	d107      	bne.n	8006a24 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	2201      	movs	r2, #1
 8006a18:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	2201      	movs	r2, #1
 8006a1e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006a22:	e02a      	b.n	8006a7a <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a28:	687a      	ldr	r2, [r7, #4]
 8006a2a:	429a      	cmp	r2, r3
 8006a2c:	d107      	bne.n	8006a3e <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	2202      	movs	r2, #2
 8006a32:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	2201      	movs	r2, #1
 8006a38:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006a3c:	e01d      	b.n	8006a7a <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a42:	687a      	ldr	r2, [r7, #4]
 8006a44:	429a      	cmp	r2, r3
 8006a46:	d107      	bne.n	8006a58 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	2204      	movs	r2, #4
 8006a4c:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	2201      	movs	r2, #1
 8006a52:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006a56:	e010      	b.n	8006a7a <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a5c:	687a      	ldr	r2, [r7, #4]
 8006a5e:	429a      	cmp	r2, r3
 8006a60:	d107      	bne.n	8006a72 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	2208      	movs	r2, #8
 8006a66:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	2201      	movs	r2, #1
 8006a6c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006a70:	e003      	b.n	8006a7a <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	2201      	movs	r2, #1
 8006a76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 8006a7a:	68f8      	ldr	r0, [r7, #12]
 8006a7c:	f7ff ffb4 	bl	80069e8 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	2200      	movs	r2, #0
 8006a84:	771a      	strb	r2, [r3, #28]
}
 8006a86:	bf00      	nop
 8006a88:	3710      	adds	r7, #16
 8006a8a:	46bd      	mov	sp, r7
 8006a8c:	bd80      	pop	{r7, pc}

08006a8e <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 8006a8e:	b580      	push	{r7, lr}
 8006a90:	b084      	sub	sp, #16
 8006a92:	af00      	add	r7, sp, #0
 8006a94:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a9a:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006aa0:	687a      	ldr	r2, [r7, #4]
 8006aa2:	429a      	cmp	r2, r3
 8006aa4:	d10b      	bne.n	8006abe <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	2201      	movs	r2, #1
 8006aaa:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	69db      	ldr	r3, [r3, #28]
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	d136      	bne.n	8006b22 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	2201      	movs	r2, #1
 8006ab8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006abc:	e031      	b.n	8006b22 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ac2:	687a      	ldr	r2, [r7, #4]
 8006ac4:	429a      	cmp	r2, r3
 8006ac6:	d10b      	bne.n	8006ae0 <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	2202      	movs	r2, #2
 8006acc:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	69db      	ldr	r3, [r3, #28]
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d125      	bne.n	8006b22 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	2201      	movs	r2, #1
 8006ada:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006ade:	e020      	b.n	8006b22 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ae4:	687a      	ldr	r2, [r7, #4]
 8006ae6:	429a      	cmp	r2, r3
 8006ae8:	d10b      	bne.n	8006b02 <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	2204      	movs	r2, #4
 8006aee:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	69db      	ldr	r3, [r3, #28]
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	d114      	bne.n	8006b22 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	2201      	movs	r2, #1
 8006afc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006b00:	e00f      	b.n	8006b22 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b06:	687a      	ldr	r2, [r7, #4]
 8006b08:	429a      	cmp	r2, r3
 8006b0a:	d10a      	bne.n	8006b22 <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	2208      	movs	r2, #8
 8006b10:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	69db      	ldr	r3, [r3, #28]
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	d103      	bne.n	8006b22 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	2201      	movs	r2, #1
 8006b1e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006b22:	68f8      	ldr	r0, [r7, #12]
 8006b24:	f7ff ff42 	bl	80069ac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	2200      	movs	r2, #0
 8006b2c:	771a      	strb	r2, [r3, #28]
}
 8006b2e:	bf00      	nop
 8006b30:	3710      	adds	r7, #16
 8006b32:	46bd      	mov	sp, r7
 8006b34:	bd80      	pop	{r7, pc}

08006b36 <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006b36:	b580      	push	{r7, lr}
 8006b38:	b084      	sub	sp, #16
 8006b3a:	af00      	add	r7, sp, #0
 8006b3c:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b42:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b48:	687a      	ldr	r2, [r7, #4]
 8006b4a:	429a      	cmp	r2, r3
 8006b4c:	d103      	bne.n	8006b56 <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	2201      	movs	r2, #1
 8006b52:	771a      	strb	r2, [r3, #28]
 8006b54:	e019      	b.n	8006b8a <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b5a:	687a      	ldr	r2, [r7, #4]
 8006b5c:	429a      	cmp	r2, r3
 8006b5e:	d103      	bne.n	8006b68 <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	2202      	movs	r2, #2
 8006b64:	771a      	strb	r2, [r3, #28]
 8006b66:	e010      	b.n	8006b8a <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b6c:	687a      	ldr	r2, [r7, #4]
 8006b6e:	429a      	cmp	r2, r3
 8006b70:	d103      	bne.n	8006b7a <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	2204      	movs	r2, #4
 8006b76:	771a      	strb	r2, [r3, #28]
 8006b78:	e007      	b.n	8006b8a <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b7e:	687a      	ldr	r2, [r7, #4]
 8006b80:	429a      	cmp	r2, r3
 8006b82:	d102      	bne.n	8006b8a <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	2208      	movs	r2, #8
 8006b88:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 8006b8a:	68f8      	ldr	r0, [r7, #12]
 8006b8c:	f7ff ff18 	bl	80069c0 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	2200      	movs	r2, #0
 8006b94:	771a      	strb	r2, [r3, #28]
}
 8006b96:	bf00      	nop
 8006b98:	3710      	adds	r7, #16
 8006b9a:	46bd      	mov	sp, r7
 8006b9c:	bd80      	pop	{r7, pc}
	...

08006ba0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006ba0:	b480      	push	{r7}
 8006ba2:	b085      	sub	sp, #20
 8006ba4:	af00      	add	r7, sp, #0
 8006ba6:	6078      	str	r0, [r7, #4]
 8006ba8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	4a40      	ldr	r2, [pc, #256]	; (8006cb4 <TIM_Base_SetConfig+0x114>)
 8006bb4:	4293      	cmp	r3, r2
 8006bb6:	d013      	beq.n	8006be0 <TIM_Base_SetConfig+0x40>
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006bbe:	d00f      	beq.n	8006be0 <TIM_Base_SetConfig+0x40>
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	4a3d      	ldr	r2, [pc, #244]	; (8006cb8 <TIM_Base_SetConfig+0x118>)
 8006bc4:	4293      	cmp	r3, r2
 8006bc6:	d00b      	beq.n	8006be0 <TIM_Base_SetConfig+0x40>
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	4a3c      	ldr	r2, [pc, #240]	; (8006cbc <TIM_Base_SetConfig+0x11c>)
 8006bcc:	4293      	cmp	r3, r2
 8006bce:	d007      	beq.n	8006be0 <TIM_Base_SetConfig+0x40>
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	4a3b      	ldr	r2, [pc, #236]	; (8006cc0 <TIM_Base_SetConfig+0x120>)
 8006bd4:	4293      	cmp	r3, r2
 8006bd6:	d003      	beq.n	8006be0 <TIM_Base_SetConfig+0x40>
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	4a3a      	ldr	r2, [pc, #232]	; (8006cc4 <TIM_Base_SetConfig+0x124>)
 8006bdc:	4293      	cmp	r3, r2
 8006bde:	d108      	bne.n	8006bf2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006be6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006be8:	683b      	ldr	r3, [r7, #0]
 8006bea:	685b      	ldr	r3, [r3, #4]
 8006bec:	68fa      	ldr	r2, [r7, #12]
 8006bee:	4313      	orrs	r3, r2
 8006bf0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	4a2f      	ldr	r2, [pc, #188]	; (8006cb4 <TIM_Base_SetConfig+0x114>)
 8006bf6:	4293      	cmp	r3, r2
 8006bf8:	d01f      	beq.n	8006c3a <TIM_Base_SetConfig+0x9a>
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006c00:	d01b      	beq.n	8006c3a <TIM_Base_SetConfig+0x9a>
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	4a2c      	ldr	r2, [pc, #176]	; (8006cb8 <TIM_Base_SetConfig+0x118>)
 8006c06:	4293      	cmp	r3, r2
 8006c08:	d017      	beq.n	8006c3a <TIM_Base_SetConfig+0x9a>
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	4a2b      	ldr	r2, [pc, #172]	; (8006cbc <TIM_Base_SetConfig+0x11c>)
 8006c0e:	4293      	cmp	r3, r2
 8006c10:	d013      	beq.n	8006c3a <TIM_Base_SetConfig+0x9a>
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	4a2a      	ldr	r2, [pc, #168]	; (8006cc0 <TIM_Base_SetConfig+0x120>)
 8006c16:	4293      	cmp	r3, r2
 8006c18:	d00f      	beq.n	8006c3a <TIM_Base_SetConfig+0x9a>
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	4a29      	ldr	r2, [pc, #164]	; (8006cc4 <TIM_Base_SetConfig+0x124>)
 8006c1e:	4293      	cmp	r3, r2
 8006c20:	d00b      	beq.n	8006c3a <TIM_Base_SetConfig+0x9a>
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	4a28      	ldr	r2, [pc, #160]	; (8006cc8 <TIM_Base_SetConfig+0x128>)
 8006c26:	4293      	cmp	r3, r2
 8006c28:	d007      	beq.n	8006c3a <TIM_Base_SetConfig+0x9a>
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	4a27      	ldr	r2, [pc, #156]	; (8006ccc <TIM_Base_SetConfig+0x12c>)
 8006c2e:	4293      	cmp	r3, r2
 8006c30:	d003      	beq.n	8006c3a <TIM_Base_SetConfig+0x9a>
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	4a26      	ldr	r2, [pc, #152]	; (8006cd0 <TIM_Base_SetConfig+0x130>)
 8006c36:	4293      	cmp	r3, r2
 8006c38:	d108      	bne.n	8006c4c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006c40:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006c42:	683b      	ldr	r3, [r7, #0]
 8006c44:	68db      	ldr	r3, [r3, #12]
 8006c46:	68fa      	ldr	r2, [r7, #12]
 8006c48:	4313      	orrs	r3, r2
 8006c4a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006c52:	683b      	ldr	r3, [r7, #0]
 8006c54:	695b      	ldr	r3, [r3, #20]
 8006c56:	4313      	orrs	r3, r2
 8006c58:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	68fa      	ldr	r2, [r7, #12]
 8006c5e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006c60:	683b      	ldr	r3, [r7, #0]
 8006c62:	689a      	ldr	r2, [r3, #8]
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006c68:	683b      	ldr	r3, [r7, #0]
 8006c6a:	681a      	ldr	r2, [r3, #0]
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	4a10      	ldr	r2, [pc, #64]	; (8006cb4 <TIM_Base_SetConfig+0x114>)
 8006c74:	4293      	cmp	r3, r2
 8006c76:	d00f      	beq.n	8006c98 <TIM_Base_SetConfig+0xf8>
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	4a12      	ldr	r2, [pc, #72]	; (8006cc4 <TIM_Base_SetConfig+0x124>)
 8006c7c:	4293      	cmp	r3, r2
 8006c7e:	d00b      	beq.n	8006c98 <TIM_Base_SetConfig+0xf8>
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	4a11      	ldr	r2, [pc, #68]	; (8006cc8 <TIM_Base_SetConfig+0x128>)
 8006c84:	4293      	cmp	r3, r2
 8006c86:	d007      	beq.n	8006c98 <TIM_Base_SetConfig+0xf8>
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	4a10      	ldr	r2, [pc, #64]	; (8006ccc <TIM_Base_SetConfig+0x12c>)
 8006c8c:	4293      	cmp	r3, r2
 8006c8e:	d003      	beq.n	8006c98 <TIM_Base_SetConfig+0xf8>
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	4a0f      	ldr	r2, [pc, #60]	; (8006cd0 <TIM_Base_SetConfig+0x130>)
 8006c94:	4293      	cmp	r3, r2
 8006c96:	d103      	bne.n	8006ca0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006c98:	683b      	ldr	r3, [r7, #0]
 8006c9a:	691a      	ldr	r2, [r3, #16]
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	2201      	movs	r2, #1
 8006ca4:	615a      	str	r2, [r3, #20]
}
 8006ca6:	bf00      	nop
 8006ca8:	3714      	adds	r7, #20
 8006caa:	46bd      	mov	sp, r7
 8006cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cb0:	4770      	bx	lr
 8006cb2:	bf00      	nop
 8006cb4:	40012c00 	.word	0x40012c00
 8006cb8:	40000400 	.word	0x40000400
 8006cbc:	40000800 	.word	0x40000800
 8006cc0:	40000c00 	.word	0x40000c00
 8006cc4:	40013400 	.word	0x40013400
 8006cc8:	40014000 	.word	0x40014000
 8006ccc:	40014400 	.word	0x40014400
 8006cd0:	40014800 	.word	0x40014800

08006cd4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006cd4:	b480      	push	{r7}
 8006cd6:	b087      	sub	sp, #28
 8006cd8:	af00      	add	r7, sp, #0
 8006cda:	6078      	str	r0, [r7, #4]
 8006cdc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	6a1b      	ldr	r3, [r3, #32]
 8006ce2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	6a1b      	ldr	r3, [r3, #32]
 8006ce8:	f023 0201 	bic.w	r2, r3, #1
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	685b      	ldr	r3, [r3, #4]
 8006cf4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	699b      	ldr	r3, [r3, #24]
 8006cfa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006d02:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d06:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	f023 0303 	bic.w	r3, r3, #3
 8006d0e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006d10:	683b      	ldr	r3, [r7, #0]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	68fa      	ldr	r2, [r7, #12]
 8006d16:	4313      	orrs	r3, r2
 8006d18:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006d1a:	697b      	ldr	r3, [r7, #20]
 8006d1c:	f023 0302 	bic.w	r3, r3, #2
 8006d20:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006d22:	683b      	ldr	r3, [r7, #0]
 8006d24:	689b      	ldr	r3, [r3, #8]
 8006d26:	697a      	ldr	r2, [r7, #20]
 8006d28:	4313      	orrs	r3, r2
 8006d2a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	4a2c      	ldr	r2, [pc, #176]	; (8006de0 <TIM_OC1_SetConfig+0x10c>)
 8006d30:	4293      	cmp	r3, r2
 8006d32:	d00f      	beq.n	8006d54 <TIM_OC1_SetConfig+0x80>
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	4a2b      	ldr	r2, [pc, #172]	; (8006de4 <TIM_OC1_SetConfig+0x110>)
 8006d38:	4293      	cmp	r3, r2
 8006d3a:	d00b      	beq.n	8006d54 <TIM_OC1_SetConfig+0x80>
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	4a2a      	ldr	r2, [pc, #168]	; (8006de8 <TIM_OC1_SetConfig+0x114>)
 8006d40:	4293      	cmp	r3, r2
 8006d42:	d007      	beq.n	8006d54 <TIM_OC1_SetConfig+0x80>
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	4a29      	ldr	r2, [pc, #164]	; (8006dec <TIM_OC1_SetConfig+0x118>)
 8006d48:	4293      	cmp	r3, r2
 8006d4a:	d003      	beq.n	8006d54 <TIM_OC1_SetConfig+0x80>
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	4a28      	ldr	r2, [pc, #160]	; (8006df0 <TIM_OC1_SetConfig+0x11c>)
 8006d50:	4293      	cmp	r3, r2
 8006d52:	d10c      	bne.n	8006d6e <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006d54:	697b      	ldr	r3, [r7, #20]
 8006d56:	f023 0308 	bic.w	r3, r3, #8
 8006d5a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006d5c:	683b      	ldr	r3, [r7, #0]
 8006d5e:	68db      	ldr	r3, [r3, #12]
 8006d60:	697a      	ldr	r2, [r7, #20]
 8006d62:	4313      	orrs	r3, r2
 8006d64:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006d66:	697b      	ldr	r3, [r7, #20]
 8006d68:	f023 0304 	bic.w	r3, r3, #4
 8006d6c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	4a1b      	ldr	r2, [pc, #108]	; (8006de0 <TIM_OC1_SetConfig+0x10c>)
 8006d72:	4293      	cmp	r3, r2
 8006d74:	d00f      	beq.n	8006d96 <TIM_OC1_SetConfig+0xc2>
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	4a1a      	ldr	r2, [pc, #104]	; (8006de4 <TIM_OC1_SetConfig+0x110>)
 8006d7a:	4293      	cmp	r3, r2
 8006d7c:	d00b      	beq.n	8006d96 <TIM_OC1_SetConfig+0xc2>
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	4a19      	ldr	r2, [pc, #100]	; (8006de8 <TIM_OC1_SetConfig+0x114>)
 8006d82:	4293      	cmp	r3, r2
 8006d84:	d007      	beq.n	8006d96 <TIM_OC1_SetConfig+0xc2>
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	4a18      	ldr	r2, [pc, #96]	; (8006dec <TIM_OC1_SetConfig+0x118>)
 8006d8a:	4293      	cmp	r3, r2
 8006d8c:	d003      	beq.n	8006d96 <TIM_OC1_SetConfig+0xc2>
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	4a17      	ldr	r2, [pc, #92]	; (8006df0 <TIM_OC1_SetConfig+0x11c>)
 8006d92:	4293      	cmp	r3, r2
 8006d94:	d111      	bne.n	8006dba <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006d96:	693b      	ldr	r3, [r7, #16]
 8006d98:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006d9c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006d9e:	693b      	ldr	r3, [r7, #16]
 8006da0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006da4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006da6:	683b      	ldr	r3, [r7, #0]
 8006da8:	695b      	ldr	r3, [r3, #20]
 8006daa:	693a      	ldr	r2, [r7, #16]
 8006dac:	4313      	orrs	r3, r2
 8006dae:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006db0:	683b      	ldr	r3, [r7, #0]
 8006db2:	699b      	ldr	r3, [r3, #24]
 8006db4:	693a      	ldr	r2, [r7, #16]
 8006db6:	4313      	orrs	r3, r2
 8006db8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	693a      	ldr	r2, [r7, #16]
 8006dbe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	68fa      	ldr	r2, [r7, #12]
 8006dc4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006dc6:	683b      	ldr	r3, [r7, #0]
 8006dc8:	685a      	ldr	r2, [r3, #4]
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	697a      	ldr	r2, [r7, #20]
 8006dd2:	621a      	str	r2, [r3, #32]
}
 8006dd4:	bf00      	nop
 8006dd6:	371c      	adds	r7, #28
 8006dd8:	46bd      	mov	sp, r7
 8006dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dde:	4770      	bx	lr
 8006de0:	40012c00 	.word	0x40012c00
 8006de4:	40013400 	.word	0x40013400
 8006de8:	40014000 	.word	0x40014000
 8006dec:	40014400 	.word	0x40014400
 8006df0:	40014800 	.word	0x40014800

08006df4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006df4:	b480      	push	{r7}
 8006df6:	b087      	sub	sp, #28
 8006df8:	af00      	add	r7, sp, #0
 8006dfa:	6078      	str	r0, [r7, #4]
 8006dfc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	6a1b      	ldr	r3, [r3, #32]
 8006e02:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	6a1b      	ldr	r3, [r3, #32]
 8006e08:	f023 0210 	bic.w	r2, r3, #16
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	685b      	ldr	r3, [r3, #4]
 8006e14:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	699b      	ldr	r3, [r3, #24]
 8006e1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006e22:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006e26:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006e2e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006e30:	683b      	ldr	r3, [r7, #0]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	021b      	lsls	r3, r3, #8
 8006e36:	68fa      	ldr	r2, [r7, #12]
 8006e38:	4313      	orrs	r3, r2
 8006e3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006e3c:	697b      	ldr	r3, [r7, #20]
 8006e3e:	f023 0320 	bic.w	r3, r3, #32
 8006e42:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006e44:	683b      	ldr	r3, [r7, #0]
 8006e46:	689b      	ldr	r3, [r3, #8]
 8006e48:	011b      	lsls	r3, r3, #4
 8006e4a:	697a      	ldr	r2, [r7, #20]
 8006e4c:	4313      	orrs	r3, r2
 8006e4e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	4a28      	ldr	r2, [pc, #160]	; (8006ef4 <TIM_OC2_SetConfig+0x100>)
 8006e54:	4293      	cmp	r3, r2
 8006e56:	d003      	beq.n	8006e60 <TIM_OC2_SetConfig+0x6c>
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	4a27      	ldr	r2, [pc, #156]	; (8006ef8 <TIM_OC2_SetConfig+0x104>)
 8006e5c:	4293      	cmp	r3, r2
 8006e5e:	d10d      	bne.n	8006e7c <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006e60:	697b      	ldr	r3, [r7, #20]
 8006e62:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006e66:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006e68:	683b      	ldr	r3, [r7, #0]
 8006e6a:	68db      	ldr	r3, [r3, #12]
 8006e6c:	011b      	lsls	r3, r3, #4
 8006e6e:	697a      	ldr	r2, [r7, #20]
 8006e70:	4313      	orrs	r3, r2
 8006e72:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006e74:	697b      	ldr	r3, [r7, #20]
 8006e76:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006e7a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	4a1d      	ldr	r2, [pc, #116]	; (8006ef4 <TIM_OC2_SetConfig+0x100>)
 8006e80:	4293      	cmp	r3, r2
 8006e82:	d00f      	beq.n	8006ea4 <TIM_OC2_SetConfig+0xb0>
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	4a1c      	ldr	r2, [pc, #112]	; (8006ef8 <TIM_OC2_SetConfig+0x104>)
 8006e88:	4293      	cmp	r3, r2
 8006e8a:	d00b      	beq.n	8006ea4 <TIM_OC2_SetConfig+0xb0>
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	4a1b      	ldr	r2, [pc, #108]	; (8006efc <TIM_OC2_SetConfig+0x108>)
 8006e90:	4293      	cmp	r3, r2
 8006e92:	d007      	beq.n	8006ea4 <TIM_OC2_SetConfig+0xb0>
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	4a1a      	ldr	r2, [pc, #104]	; (8006f00 <TIM_OC2_SetConfig+0x10c>)
 8006e98:	4293      	cmp	r3, r2
 8006e9a:	d003      	beq.n	8006ea4 <TIM_OC2_SetConfig+0xb0>
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	4a19      	ldr	r2, [pc, #100]	; (8006f04 <TIM_OC2_SetConfig+0x110>)
 8006ea0:	4293      	cmp	r3, r2
 8006ea2:	d113      	bne.n	8006ecc <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006ea4:	693b      	ldr	r3, [r7, #16]
 8006ea6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006eaa:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006eac:	693b      	ldr	r3, [r7, #16]
 8006eae:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006eb2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006eb4:	683b      	ldr	r3, [r7, #0]
 8006eb6:	695b      	ldr	r3, [r3, #20]
 8006eb8:	009b      	lsls	r3, r3, #2
 8006eba:	693a      	ldr	r2, [r7, #16]
 8006ebc:	4313      	orrs	r3, r2
 8006ebe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006ec0:	683b      	ldr	r3, [r7, #0]
 8006ec2:	699b      	ldr	r3, [r3, #24]
 8006ec4:	009b      	lsls	r3, r3, #2
 8006ec6:	693a      	ldr	r2, [r7, #16]
 8006ec8:	4313      	orrs	r3, r2
 8006eca:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	693a      	ldr	r2, [r7, #16]
 8006ed0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	68fa      	ldr	r2, [r7, #12]
 8006ed6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006ed8:	683b      	ldr	r3, [r7, #0]
 8006eda:	685a      	ldr	r2, [r3, #4]
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	697a      	ldr	r2, [r7, #20]
 8006ee4:	621a      	str	r2, [r3, #32]
}
 8006ee6:	bf00      	nop
 8006ee8:	371c      	adds	r7, #28
 8006eea:	46bd      	mov	sp, r7
 8006eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ef0:	4770      	bx	lr
 8006ef2:	bf00      	nop
 8006ef4:	40012c00 	.word	0x40012c00
 8006ef8:	40013400 	.word	0x40013400
 8006efc:	40014000 	.word	0x40014000
 8006f00:	40014400 	.word	0x40014400
 8006f04:	40014800 	.word	0x40014800

08006f08 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006f08:	b480      	push	{r7}
 8006f0a:	b087      	sub	sp, #28
 8006f0c:	af00      	add	r7, sp, #0
 8006f0e:	6078      	str	r0, [r7, #4]
 8006f10:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	6a1b      	ldr	r3, [r3, #32]
 8006f16:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	6a1b      	ldr	r3, [r3, #32]
 8006f1c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	685b      	ldr	r3, [r3, #4]
 8006f28:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	69db      	ldr	r3, [r3, #28]
 8006f2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006f36:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f3a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	f023 0303 	bic.w	r3, r3, #3
 8006f42:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006f44:	683b      	ldr	r3, [r7, #0]
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	68fa      	ldr	r2, [r7, #12]
 8006f4a:	4313      	orrs	r3, r2
 8006f4c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006f4e:	697b      	ldr	r3, [r7, #20]
 8006f50:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006f54:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006f56:	683b      	ldr	r3, [r7, #0]
 8006f58:	689b      	ldr	r3, [r3, #8]
 8006f5a:	021b      	lsls	r3, r3, #8
 8006f5c:	697a      	ldr	r2, [r7, #20]
 8006f5e:	4313      	orrs	r3, r2
 8006f60:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	4a27      	ldr	r2, [pc, #156]	; (8007004 <TIM_OC3_SetConfig+0xfc>)
 8006f66:	4293      	cmp	r3, r2
 8006f68:	d003      	beq.n	8006f72 <TIM_OC3_SetConfig+0x6a>
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	4a26      	ldr	r2, [pc, #152]	; (8007008 <TIM_OC3_SetConfig+0x100>)
 8006f6e:	4293      	cmp	r3, r2
 8006f70:	d10d      	bne.n	8006f8e <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006f72:	697b      	ldr	r3, [r7, #20]
 8006f74:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006f78:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006f7a:	683b      	ldr	r3, [r7, #0]
 8006f7c:	68db      	ldr	r3, [r3, #12]
 8006f7e:	021b      	lsls	r3, r3, #8
 8006f80:	697a      	ldr	r2, [r7, #20]
 8006f82:	4313      	orrs	r3, r2
 8006f84:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006f86:	697b      	ldr	r3, [r7, #20]
 8006f88:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006f8c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	4a1c      	ldr	r2, [pc, #112]	; (8007004 <TIM_OC3_SetConfig+0xfc>)
 8006f92:	4293      	cmp	r3, r2
 8006f94:	d00f      	beq.n	8006fb6 <TIM_OC3_SetConfig+0xae>
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	4a1b      	ldr	r2, [pc, #108]	; (8007008 <TIM_OC3_SetConfig+0x100>)
 8006f9a:	4293      	cmp	r3, r2
 8006f9c:	d00b      	beq.n	8006fb6 <TIM_OC3_SetConfig+0xae>
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	4a1a      	ldr	r2, [pc, #104]	; (800700c <TIM_OC3_SetConfig+0x104>)
 8006fa2:	4293      	cmp	r3, r2
 8006fa4:	d007      	beq.n	8006fb6 <TIM_OC3_SetConfig+0xae>
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	4a19      	ldr	r2, [pc, #100]	; (8007010 <TIM_OC3_SetConfig+0x108>)
 8006faa:	4293      	cmp	r3, r2
 8006fac:	d003      	beq.n	8006fb6 <TIM_OC3_SetConfig+0xae>
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	4a18      	ldr	r2, [pc, #96]	; (8007014 <TIM_OC3_SetConfig+0x10c>)
 8006fb2:	4293      	cmp	r3, r2
 8006fb4:	d113      	bne.n	8006fde <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006fb6:	693b      	ldr	r3, [r7, #16]
 8006fb8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006fbc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006fbe:	693b      	ldr	r3, [r7, #16]
 8006fc0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006fc4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006fc6:	683b      	ldr	r3, [r7, #0]
 8006fc8:	695b      	ldr	r3, [r3, #20]
 8006fca:	011b      	lsls	r3, r3, #4
 8006fcc:	693a      	ldr	r2, [r7, #16]
 8006fce:	4313      	orrs	r3, r2
 8006fd0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006fd2:	683b      	ldr	r3, [r7, #0]
 8006fd4:	699b      	ldr	r3, [r3, #24]
 8006fd6:	011b      	lsls	r3, r3, #4
 8006fd8:	693a      	ldr	r2, [r7, #16]
 8006fda:	4313      	orrs	r3, r2
 8006fdc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	693a      	ldr	r2, [r7, #16]
 8006fe2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	68fa      	ldr	r2, [r7, #12]
 8006fe8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006fea:	683b      	ldr	r3, [r7, #0]
 8006fec:	685a      	ldr	r2, [r3, #4]
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	697a      	ldr	r2, [r7, #20]
 8006ff6:	621a      	str	r2, [r3, #32]
}
 8006ff8:	bf00      	nop
 8006ffa:	371c      	adds	r7, #28
 8006ffc:	46bd      	mov	sp, r7
 8006ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007002:	4770      	bx	lr
 8007004:	40012c00 	.word	0x40012c00
 8007008:	40013400 	.word	0x40013400
 800700c:	40014000 	.word	0x40014000
 8007010:	40014400 	.word	0x40014400
 8007014:	40014800 	.word	0x40014800

08007018 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007018:	b480      	push	{r7}
 800701a:	b087      	sub	sp, #28
 800701c:	af00      	add	r7, sp, #0
 800701e:	6078      	str	r0, [r7, #4]
 8007020:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	6a1b      	ldr	r3, [r3, #32]
 8007026:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	6a1b      	ldr	r3, [r3, #32]
 800702c:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	685b      	ldr	r3, [r3, #4]
 8007038:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	69db      	ldr	r3, [r3, #28]
 800703e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007046:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800704a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007052:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007054:	683b      	ldr	r3, [r7, #0]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	021b      	lsls	r3, r3, #8
 800705a:	68fa      	ldr	r2, [r7, #12]
 800705c:	4313      	orrs	r3, r2
 800705e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007060:	693b      	ldr	r3, [r7, #16]
 8007062:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007066:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007068:	683b      	ldr	r3, [r7, #0]
 800706a:	689b      	ldr	r3, [r3, #8]
 800706c:	031b      	lsls	r3, r3, #12
 800706e:	693a      	ldr	r2, [r7, #16]
 8007070:	4313      	orrs	r3, r2
 8007072:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	4a18      	ldr	r2, [pc, #96]	; (80070d8 <TIM_OC4_SetConfig+0xc0>)
 8007078:	4293      	cmp	r3, r2
 800707a:	d00f      	beq.n	800709c <TIM_OC4_SetConfig+0x84>
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	4a17      	ldr	r2, [pc, #92]	; (80070dc <TIM_OC4_SetConfig+0xc4>)
 8007080:	4293      	cmp	r3, r2
 8007082:	d00b      	beq.n	800709c <TIM_OC4_SetConfig+0x84>
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	4a16      	ldr	r2, [pc, #88]	; (80070e0 <TIM_OC4_SetConfig+0xc8>)
 8007088:	4293      	cmp	r3, r2
 800708a:	d007      	beq.n	800709c <TIM_OC4_SetConfig+0x84>
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	4a15      	ldr	r2, [pc, #84]	; (80070e4 <TIM_OC4_SetConfig+0xcc>)
 8007090:	4293      	cmp	r3, r2
 8007092:	d003      	beq.n	800709c <TIM_OC4_SetConfig+0x84>
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	4a14      	ldr	r2, [pc, #80]	; (80070e8 <TIM_OC4_SetConfig+0xd0>)
 8007098:	4293      	cmp	r3, r2
 800709a:	d109      	bne.n	80070b0 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800709c:	697b      	ldr	r3, [r7, #20]
 800709e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80070a2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80070a4:	683b      	ldr	r3, [r7, #0]
 80070a6:	695b      	ldr	r3, [r3, #20]
 80070a8:	019b      	lsls	r3, r3, #6
 80070aa:	697a      	ldr	r2, [r7, #20]
 80070ac:	4313      	orrs	r3, r2
 80070ae:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	697a      	ldr	r2, [r7, #20]
 80070b4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	68fa      	ldr	r2, [r7, #12]
 80070ba:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80070bc:	683b      	ldr	r3, [r7, #0]
 80070be:	685a      	ldr	r2, [r3, #4]
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	693a      	ldr	r2, [r7, #16]
 80070c8:	621a      	str	r2, [r3, #32]
}
 80070ca:	bf00      	nop
 80070cc:	371c      	adds	r7, #28
 80070ce:	46bd      	mov	sp, r7
 80070d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070d4:	4770      	bx	lr
 80070d6:	bf00      	nop
 80070d8:	40012c00 	.word	0x40012c00
 80070dc:	40013400 	.word	0x40013400
 80070e0:	40014000 	.word	0x40014000
 80070e4:	40014400 	.word	0x40014400
 80070e8:	40014800 	.word	0x40014800

080070ec <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80070ec:	b480      	push	{r7}
 80070ee:	b087      	sub	sp, #28
 80070f0:	af00      	add	r7, sp, #0
 80070f2:	6078      	str	r0, [r7, #4]
 80070f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	6a1b      	ldr	r3, [r3, #32]
 80070fa:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	6a1b      	ldr	r3, [r3, #32]
 8007100:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	685b      	ldr	r3, [r3, #4]
 800710c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007112:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8007114:	68fb      	ldr	r3, [r7, #12]
 8007116:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800711a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800711e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007120:	683b      	ldr	r3, [r7, #0]
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	68fa      	ldr	r2, [r7, #12]
 8007126:	4313      	orrs	r3, r2
 8007128:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800712a:	693b      	ldr	r3, [r7, #16]
 800712c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8007130:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8007132:	683b      	ldr	r3, [r7, #0]
 8007134:	689b      	ldr	r3, [r3, #8]
 8007136:	041b      	lsls	r3, r3, #16
 8007138:	693a      	ldr	r2, [r7, #16]
 800713a:	4313      	orrs	r3, r2
 800713c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	4a17      	ldr	r2, [pc, #92]	; (80071a0 <TIM_OC5_SetConfig+0xb4>)
 8007142:	4293      	cmp	r3, r2
 8007144:	d00f      	beq.n	8007166 <TIM_OC5_SetConfig+0x7a>
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	4a16      	ldr	r2, [pc, #88]	; (80071a4 <TIM_OC5_SetConfig+0xb8>)
 800714a:	4293      	cmp	r3, r2
 800714c:	d00b      	beq.n	8007166 <TIM_OC5_SetConfig+0x7a>
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	4a15      	ldr	r2, [pc, #84]	; (80071a8 <TIM_OC5_SetConfig+0xbc>)
 8007152:	4293      	cmp	r3, r2
 8007154:	d007      	beq.n	8007166 <TIM_OC5_SetConfig+0x7a>
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	4a14      	ldr	r2, [pc, #80]	; (80071ac <TIM_OC5_SetConfig+0xc0>)
 800715a:	4293      	cmp	r3, r2
 800715c:	d003      	beq.n	8007166 <TIM_OC5_SetConfig+0x7a>
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	4a13      	ldr	r2, [pc, #76]	; (80071b0 <TIM_OC5_SetConfig+0xc4>)
 8007162:	4293      	cmp	r3, r2
 8007164:	d109      	bne.n	800717a <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8007166:	697b      	ldr	r3, [r7, #20]
 8007168:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800716c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800716e:	683b      	ldr	r3, [r7, #0]
 8007170:	695b      	ldr	r3, [r3, #20]
 8007172:	021b      	lsls	r3, r3, #8
 8007174:	697a      	ldr	r2, [r7, #20]
 8007176:	4313      	orrs	r3, r2
 8007178:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	697a      	ldr	r2, [r7, #20]
 800717e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	68fa      	ldr	r2, [r7, #12]
 8007184:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8007186:	683b      	ldr	r3, [r7, #0]
 8007188:	685a      	ldr	r2, [r3, #4]
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	693a      	ldr	r2, [r7, #16]
 8007192:	621a      	str	r2, [r3, #32]
}
 8007194:	bf00      	nop
 8007196:	371c      	adds	r7, #28
 8007198:	46bd      	mov	sp, r7
 800719a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800719e:	4770      	bx	lr
 80071a0:	40012c00 	.word	0x40012c00
 80071a4:	40013400 	.word	0x40013400
 80071a8:	40014000 	.word	0x40014000
 80071ac:	40014400 	.word	0x40014400
 80071b0:	40014800 	.word	0x40014800

080071b4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80071b4:	b480      	push	{r7}
 80071b6:	b087      	sub	sp, #28
 80071b8:	af00      	add	r7, sp, #0
 80071ba:	6078      	str	r0, [r7, #4]
 80071bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	6a1b      	ldr	r3, [r3, #32]
 80071c2:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	6a1b      	ldr	r3, [r3, #32]
 80071c8:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	685b      	ldr	r3, [r3, #4]
 80071d4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80071da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80071e2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80071e6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80071e8:	683b      	ldr	r3, [r7, #0]
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	021b      	lsls	r3, r3, #8
 80071ee:	68fa      	ldr	r2, [r7, #12]
 80071f0:	4313      	orrs	r3, r2
 80071f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80071f4:	693b      	ldr	r3, [r7, #16]
 80071f6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80071fa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80071fc:	683b      	ldr	r3, [r7, #0]
 80071fe:	689b      	ldr	r3, [r3, #8]
 8007200:	051b      	lsls	r3, r3, #20
 8007202:	693a      	ldr	r2, [r7, #16]
 8007204:	4313      	orrs	r3, r2
 8007206:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	4a18      	ldr	r2, [pc, #96]	; (800726c <TIM_OC6_SetConfig+0xb8>)
 800720c:	4293      	cmp	r3, r2
 800720e:	d00f      	beq.n	8007230 <TIM_OC6_SetConfig+0x7c>
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	4a17      	ldr	r2, [pc, #92]	; (8007270 <TIM_OC6_SetConfig+0xbc>)
 8007214:	4293      	cmp	r3, r2
 8007216:	d00b      	beq.n	8007230 <TIM_OC6_SetConfig+0x7c>
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	4a16      	ldr	r2, [pc, #88]	; (8007274 <TIM_OC6_SetConfig+0xc0>)
 800721c:	4293      	cmp	r3, r2
 800721e:	d007      	beq.n	8007230 <TIM_OC6_SetConfig+0x7c>
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	4a15      	ldr	r2, [pc, #84]	; (8007278 <TIM_OC6_SetConfig+0xc4>)
 8007224:	4293      	cmp	r3, r2
 8007226:	d003      	beq.n	8007230 <TIM_OC6_SetConfig+0x7c>
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	4a14      	ldr	r2, [pc, #80]	; (800727c <TIM_OC6_SetConfig+0xc8>)
 800722c:	4293      	cmp	r3, r2
 800722e:	d109      	bne.n	8007244 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8007230:	697b      	ldr	r3, [r7, #20]
 8007232:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007236:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8007238:	683b      	ldr	r3, [r7, #0]
 800723a:	695b      	ldr	r3, [r3, #20]
 800723c:	029b      	lsls	r3, r3, #10
 800723e:	697a      	ldr	r2, [r7, #20]
 8007240:	4313      	orrs	r3, r2
 8007242:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	697a      	ldr	r2, [r7, #20]
 8007248:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	68fa      	ldr	r2, [r7, #12]
 800724e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8007250:	683b      	ldr	r3, [r7, #0]
 8007252:	685a      	ldr	r2, [r3, #4]
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	693a      	ldr	r2, [r7, #16]
 800725c:	621a      	str	r2, [r3, #32]
}
 800725e:	bf00      	nop
 8007260:	371c      	adds	r7, #28
 8007262:	46bd      	mov	sp, r7
 8007264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007268:	4770      	bx	lr
 800726a:	bf00      	nop
 800726c:	40012c00 	.word	0x40012c00
 8007270:	40013400 	.word	0x40013400
 8007274:	40014000 	.word	0x40014000
 8007278:	40014400 	.word	0x40014400
 800727c:	40014800 	.word	0x40014800

08007280 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8007280:	b480      	push	{r7}
 8007282:	b087      	sub	sp, #28
 8007284:	af00      	add	r7, sp, #0
 8007286:	60f8      	str	r0, [r7, #12]
 8007288:	60b9      	str	r1, [r7, #8]
 800728a:	607a      	str	r2, [r7, #4]
 800728c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800728e:	68fb      	ldr	r3, [r7, #12]
 8007290:	6a1b      	ldr	r3, [r3, #32]
 8007292:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	6a1b      	ldr	r3, [r3, #32]
 8007298:	f023 0201 	bic.w	r2, r3, #1
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	699b      	ldr	r3, [r3, #24]
 80072a4:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	4a26      	ldr	r2, [pc, #152]	; (8007344 <TIM_TI1_SetConfig+0xc4>)
 80072aa:	4293      	cmp	r3, r2
 80072ac:	d017      	beq.n	80072de <TIM_TI1_SetConfig+0x5e>
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80072b4:	d013      	beq.n	80072de <TIM_TI1_SetConfig+0x5e>
 80072b6:	68fb      	ldr	r3, [r7, #12]
 80072b8:	4a23      	ldr	r2, [pc, #140]	; (8007348 <TIM_TI1_SetConfig+0xc8>)
 80072ba:	4293      	cmp	r3, r2
 80072bc:	d00f      	beq.n	80072de <TIM_TI1_SetConfig+0x5e>
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	4a22      	ldr	r2, [pc, #136]	; (800734c <TIM_TI1_SetConfig+0xcc>)
 80072c2:	4293      	cmp	r3, r2
 80072c4:	d00b      	beq.n	80072de <TIM_TI1_SetConfig+0x5e>
 80072c6:	68fb      	ldr	r3, [r7, #12]
 80072c8:	4a21      	ldr	r2, [pc, #132]	; (8007350 <TIM_TI1_SetConfig+0xd0>)
 80072ca:	4293      	cmp	r3, r2
 80072cc:	d007      	beq.n	80072de <TIM_TI1_SetConfig+0x5e>
 80072ce:	68fb      	ldr	r3, [r7, #12]
 80072d0:	4a20      	ldr	r2, [pc, #128]	; (8007354 <TIM_TI1_SetConfig+0xd4>)
 80072d2:	4293      	cmp	r3, r2
 80072d4:	d003      	beq.n	80072de <TIM_TI1_SetConfig+0x5e>
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	4a1f      	ldr	r2, [pc, #124]	; (8007358 <TIM_TI1_SetConfig+0xd8>)
 80072da:	4293      	cmp	r3, r2
 80072dc:	d101      	bne.n	80072e2 <TIM_TI1_SetConfig+0x62>
 80072de:	2301      	movs	r3, #1
 80072e0:	e000      	b.n	80072e4 <TIM_TI1_SetConfig+0x64>
 80072e2:	2300      	movs	r3, #0
 80072e4:	2b00      	cmp	r3, #0
 80072e6:	d008      	beq.n	80072fa <TIM_TI1_SetConfig+0x7a>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80072e8:	697b      	ldr	r3, [r7, #20]
 80072ea:	f023 0303 	bic.w	r3, r3, #3
 80072ee:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 80072f0:	697a      	ldr	r2, [r7, #20]
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	4313      	orrs	r3, r2
 80072f6:	617b      	str	r3, [r7, #20]
 80072f8:	e003      	b.n	8007302 <TIM_TI1_SetConfig+0x82>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80072fa:	697b      	ldr	r3, [r7, #20]
 80072fc:	f043 0301 	orr.w	r3, r3, #1
 8007300:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007302:	697b      	ldr	r3, [r7, #20]
 8007304:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007308:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800730a:	683b      	ldr	r3, [r7, #0]
 800730c:	011b      	lsls	r3, r3, #4
 800730e:	b2db      	uxtb	r3, r3
 8007310:	697a      	ldr	r2, [r7, #20]
 8007312:	4313      	orrs	r3, r2
 8007314:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007316:	693b      	ldr	r3, [r7, #16]
 8007318:	f023 030a 	bic.w	r3, r3, #10
 800731c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800731e:	68bb      	ldr	r3, [r7, #8]
 8007320:	f003 030a 	and.w	r3, r3, #10
 8007324:	693a      	ldr	r2, [r7, #16]
 8007326:	4313      	orrs	r3, r2
 8007328:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	697a      	ldr	r2, [r7, #20]
 800732e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	693a      	ldr	r2, [r7, #16]
 8007334:	621a      	str	r2, [r3, #32]
}
 8007336:	bf00      	nop
 8007338:	371c      	adds	r7, #28
 800733a:	46bd      	mov	sp, r7
 800733c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007340:	4770      	bx	lr
 8007342:	bf00      	nop
 8007344:	40012c00 	.word	0x40012c00
 8007348:	40000400 	.word	0x40000400
 800734c:	40000800 	.word	0x40000800
 8007350:	40000c00 	.word	0x40000c00
 8007354:	40013400 	.word	0x40013400
 8007358:	40014000 	.word	0x40014000

0800735c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800735c:	b480      	push	{r7}
 800735e:	b087      	sub	sp, #28
 8007360:	af00      	add	r7, sp, #0
 8007362:	60f8      	str	r0, [r7, #12]
 8007364:	60b9      	str	r1, [r7, #8]
 8007366:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	6a1b      	ldr	r3, [r3, #32]
 800736c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	6a1b      	ldr	r3, [r3, #32]
 8007372:	f023 0201 	bic.w	r2, r3, #1
 8007376:	68fb      	ldr	r3, [r7, #12]
 8007378:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800737a:	68fb      	ldr	r3, [r7, #12]
 800737c:	699b      	ldr	r3, [r3, #24]
 800737e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007380:	693b      	ldr	r3, [r7, #16]
 8007382:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007386:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	011b      	lsls	r3, r3, #4
 800738c:	693a      	ldr	r2, [r7, #16]
 800738e:	4313      	orrs	r3, r2
 8007390:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007392:	697b      	ldr	r3, [r7, #20]
 8007394:	f023 030a 	bic.w	r3, r3, #10
 8007398:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800739a:	697a      	ldr	r2, [r7, #20]
 800739c:	68bb      	ldr	r3, [r7, #8]
 800739e:	4313      	orrs	r3, r2
 80073a0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80073a2:	68fb      	ldr	r3, [r7, #12]
 80073a4:	693a      	ldr	r2, [r7, #16]
 80073a6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80073a8:	68fb      	ldr	r3, [r7, #12]
 80073aa:	697a      	ldr	r2, [r7, #20]
 80073ac:	621a      	str	r2, [r3, #32]
}
 80073ae:	bf00      	nop
 80073b0:	371c      	adds	r7, #28
 80073b2:	46bd      	mov	sp, r7
 80073b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073b8:	4770      	bx	lr

080073ba <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80073ba:	b480      	push	{r7}
 80073bc:	b087      	sub	sp, #28
 80073be:	af00      	add	r7, sp, #0
 80073c0:	60f8      	str	r0, [r7, #12]
 80073c2:	60b9      	str	r1, [r7, #8]
 80073c4:	607a      	str	r2, [r7, #4]
 80073c6:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	6a1b      	ldr	r3, [r3, #32]
 80073cc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80073ce:	68fb      	ldr	r3, [r7, #12]
 80073d0:	6a1b      	ldr	r3, [r3, #32]
 80073d2:	f023 0210 	bic.w	r2, r3, #16
 80073d6:	68fb      	ldr	r3, [r7, #12]
 80073d8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80073da:	68fb      	ldr	r3, [r7, #12]
 80073dc:	699b      	ldr	r3, [r3, #24]
 80073de:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80073e0:	693b      	ldr	r3, [r7, #16]
 80073e2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80073e6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	021b      	lsls	r3, r3, #8
 80073ec:	693a      	ldr	r2, [r7, #16]
 80073ee:	4313      	orrs	r3, r2
 80073f0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80073f2:	693b      	ldr	r3, [r7, #16]
 80073f4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80073f8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80073fa:	683b      	ldr	r3, [r7, #0]
 80073fc:	031b      	lsls	r3, r3, #12
 80073fe:	b29b      	uxth	r3, r3
 8007400:	693a      	ldr	r2, [r7, #16]
 8007402:	4313      	orrs	r3, r2
 8007404:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007406:	697b      	ldr	r3, [r7, #20]
 8007408:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800740c:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800740e:	68bb      	ldr	r3, [r7, #8]
 8007410:	011b      	lsls	r3, r3, #4
 8007412:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8007416:	697a      	ldr	r2, [r7, #20]
 8007418:	4313      	orrs	r3, r2
 800741a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800741c:	68fb      	ldr	r3, [r7, #12]
 800741e:	693a      	ldr	r2, [r7, #16]
 8007420:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007422:	68fb      	ldr	r3, [r7, #12]
 8007424:	697a      	ldr	r2, [r7, #20]
 8007426:	621a      	str	r2, [r3, #32]
}
 8007428:	bf00      	nop
 800742a:	371c      	adds	r7, #28
 800742c:	46bd      	mov	sp, r7
 800742e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007432:	4770      	bx	lr

08007434 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007434:	b480      	push	{r7}
 8007436:	b087      	sub	sp, #28
 8007438:	af00      	add	r7, sp, #0
 800743a:	60f8      	str	r0, [r7, #12]
 800743c:	60b9      	str	r1, [r7, #8]
 800743e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8007440:	68fb      	ldr	r3, [r7, #12]
 8007442:	6a1b      	ldr	r3, [r3, #32]
 8007444:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007446:	68fb      	ldr	r3, [r7, #12]
 8007448:	6a1b      	ldr	r3, [r3, #32]
 800744a:	f023 0210 	bic.w	r2, r3, #16
 800744e:	68fb      	ldr	r3, [r7, #12]
 8007450:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007452:	68fb      	ldr	r3, [r7, #12]
 8007454:	699b      	ldr	r3, [r3, #24]
 8007456:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007458:	693b      	ldr	r3, [r7, #16]
 800745a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800745e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	031b      	lsls	r3, r3, #12
 8007464:	693a      	ldr	r2, [r7, #16]
 8007466:	4313      	orrs	r3, r2
 8007468:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800746a:	697b      	ldr	r3, [r7, #20]
 800746c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007470:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007472:	68bb      	ldr	r3, [r7, #8]
 8007474:	011b      	lsls	r3, r3, #4
 8007476:	697a      	ldr	r2, [r7, #20]
 8007478:	4313      	orrs	r3, r2
 800747a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800747c:	68fb      	ldr	r3, [r7, #12]
 800747e:	693a      	ldr	r2, [r7, #16]
 8007480:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007482:	68fb      	ldr	r3, [r7, #12]
 8007484:	697a      	ldr	r2, [r7, #20]
 8007486:	621a      	str	r2, [r3, #32]
}
 8007488:	bf00      	nop
 800748a:	371c      	adds	r7, #28
 800748c:	46bd      	mov	sp, r7
 800748e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007492:	4770      	bx	lr

08007494 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8007494:	b480      	push	{r7}
 8007496:	b087      	sub	sp, #28
 8007498:	af00      	add	r7, sp, #0
 800749a:	60f8      	str	r0, [r7, #12]
 800749c:	60b9      	str	r1, [r7, #8]
 800749e:	607a      	str	r2, [r7, #4]
 80074a0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 80074a2:	68fb      	ldr	r3, [r7, #12]
 80074a4:	6a1b      	ldr	r3, [r3, #32]
 80074a6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80074a8:	68fb      	ldr	r3, [r7, #12]
 80074aa:	6a1b      	ldr	r3, [r3, #32]
 80074ac:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80074b0:	68fb      	ldr	r3, [r7, #12]
 80074b2:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	69db      	ldr	r3, [r3, #28]
 80074b8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80074ba:	693b      	ldr	r3, [r7, #16]
 80074bc:	f023 0303 	bic.w	r3, r3, #3
 80074c0:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 80074c2:	693a      	ldr	r2, [r7, #16]
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	4313      	orrs	r3, r2
 80074c8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80074ca:	693b      	ldr	r3, [r7, #16]
 80074cc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80074d0:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80074d2:	683b      	ldr	r3, [r7, #0]
 80074d4:	011b      	lsls	r3, r3, #4
 80074d6:	b2db      	uxtb	r3, r3
 80074d8:	693a      	ldr	r2, [r7, #16]
 80074da:	4313      	orrs	r3, r2
 80074dc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 80074de:	697b      	ldr	r3, [r7, #20]
 80074e0:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 80074e4:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 80074e6:	68bb      	ldr	r3, [r7, #8]
 80074e8:	021b      	lsls	r3, r3, #8
 80074ea:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 80074ee:	697a      	ldr	r2, [r7, #20]
 80074f0:	4313      	orrs	r3, r2
 80074f2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80074f4:	68fb      	ldr	r3, [r7, #12]
 80074f6:	693a      	ldr	r2, [r7, #16]
 80074f8:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	697a      	ldr	r2, [r7, #20]
 80074fe:	621a      	str	r2, [r3, #32]
}
 8007500:	bf00      	nop
 8007502:	371c      	adds	r7, #28
 8007504:	46bd      	mov	sp, r7
 8007506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800750a:	4770      	bx	lr

0800750c <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800750c:	b480      	push	{r7}
 800750e:	b087      	sub	sp, #28
 8007510:	af00      	add	r7, sp, #0
 8007512:	60f8      	str	r0, [r7, #12]
 8007514:	60b9      	str	r1, [r7, #8]
 8007516:	607a      	str	r2, [r7, #4]
 8007518:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 800751a:	68fb      	ldr	r3, [r7, #12]
 800751c:	6a1b      	ldr	r3, [r3, #32]
 800751e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007520:	68fb      	ldr	r3, [r7, #12]
 8007522:	6a1b      	ldr	r3, [r3, #32]
 8007524:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007528:	68fb      	ldr	r3, [r7, #12]
 800752a:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	69db      	ldr	r3, [r3, #28]
 8007530:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8007532:	693b      	ldr	r3, [r7, #16]
 8007534:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007538:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	021b      	lsls	r3, r3, #8
 800753e:	693a      	ldr	r2, [r7, #16]
 8007540:	4313      	orrs	r3, r2
 8007542:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8007544:	693b      	ldr	r3, [r7, #16]
 8007546:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800754a:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800754c:	683b      	ldr	r3, [r7, #0]
 800754e:	031b      	lsls	r3, r3, #12
 8007550:	b29b      	uxth	r3, r3
 8007552:	693a      	ldr	r2, [r7, #16]
 8007554:	4313      	orrs	r3, r2
 8007556:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8007558:	697b      	ldr	r3, [r7, #20]
 800755a:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 800755e:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8007560:	68bb      	ldr	r3, [r7, #8]
 8007562:	031b      	lsls	r3, r3, #12
 8007564:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8007568:	697a      	ldr	r2, [r7, #20]
 800756a:	4313      	orrs	r3, r2
 800756c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800756e:	68fb      	ldr	r3, [r7, #12]
 8007570:	693a      	ldr	r2, [r7, #16]
 8007572:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8007574:	68fb      	ldr	r3, [r7, #12]
 8007576:	697a      	ldr	r2, [r7, #20]
 8007578:	621a      	str	r2, [r3, #32]
}
 800757a:	bf00      	nop
 800757c:	371c      	adds	r7, #28
 800757e:	46bd      	mov	sp, r7
 8007580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007584:	4770      	bx	lr

08007586 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007586:	b480      	push	{r7}
 8007588:	b085      	sub	sp, #20
 800758a:	af00      	add	r7, sp, #0
 800758c:	6078      	str	r0, [r7, #4]
 800758e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	689b      	ldr	r3, [r3, #8]
 8007594:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007596:	68fb      	ldr	r3, [r7, #12]
 8007598:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800759c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800759e:	683a      	ldr	r2, [r7, #0]
 80075a0:	68fb      	ldr	r3, [r7, #12]
 80075a2:	4313      	orrs	r3, r2
 80075a4:	f043 0307 	orr.w	r3, r3, #7
 80075a8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	68fa      	ldr	r2, [r7, #12]
 80075ae:	609a      	str	r2, [r3, #8]
}
 80075b0:	bf00      	nop
 80075b2:	3714      	adds	r7, #20
 80075b4:	46bd      	mov	sp, r7
 80075b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ba:	4770      	bx	lr

080075bc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80075bc:	b480      	push	{r7}
 80075be:	b087      	sub	sp, #28
 80075c0:	af00      	add	r7, sp, #0
 80075c2:	60f8      	str	r0, [r7, #12]
 80075c4:	60b9      	str	r1, [r7, #8]
 80075c6:	607a      	str	r2, [r7, #4]
 80075c8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80075ca:	68fb      	ldr	r3, [r7, #12]
 80075cc:	689b      	ldr	r3, [r3, #8]
 80075ce:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80075d0:	697b      	ldr	r3, [r7, #20]
 80075d2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80075d6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80075d8:	683b      	ldr	r3, [r7, #0]
 80075da:	021a      	lsls	r2, r3, #8
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	431a      	orrs	r2, r3
 80075e0:	68bb      	ldr	r3, [r7, #8]
 80075e2:	4313      	orrs	r3, r2
 80075e4:	697a      	ldr	r2, [r7, #20]
 80075e6:	4313      	orrs	r3, r2
 80075e8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80075ea:	68fb      	ldr	r3, [r7, #12]
 80075ec:	697a      	ldr	r2, [r7, #20]
 80075ee:	609a      	str	r2, [r3, #8]
}
 80075f0:	bf00      	nop
 80075f2:	371c      	adds	r7, #28
 80075f4:	46bd      	mov	sp, r7
 80075f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075fa:	4770      	bx	lr

080075fc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80075fc:	b480      	push	{r7}
 80075fe:	b087      	sub	sp, #28
 8007600:	af00      	add	r7, sp, #0
 8007602:	60f8      	str	r0, [r7, #12]
 8007604:	60b9      	str	r1, [r7, #8]
 8007606:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007608:	68bb      	ldr	r3, [r7, #8]
 800760a:	f003 031f 	and.w	r3, r3, #31
 800760e:	2201      	movs	r2, #1
 8007610:	fa02 f303 	lsl.w	r3, r2, r3
 8007614:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007616:	68fb      	ldr	r3, [r7, #12]
 8007618:	6a1a      	ldr	r2, [r3, #32]
 800761a:	697b      	ldr	r3, [r7, #20]
 800761c:	43db      	mvns	r3, r3
 800761e:	401a      	ands	r2, r3
 8007620:	68fb      	ldr	r3, [r7, #12]
 8007622:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007624:	68fb      	ldr	r3, [r7, #12]
 8007626:	6a1a      	ldr	r2, [r3, #32]
 8007628:	68bb      	ldr	r3, [r7, #8]
 800762a:	f003 031f 	and.w	r3, r3, #31
 800762e:	6879      	ldr	r1, [r7, #4]
 8007630:	fa01 f303 	lsl.w	r3, r1, r3
 8007634:	431a      	orrs	r2, r3
 8007636:	68fb      	ldr	r3, [r7, #12]
 8007638:	621a      	str	r2, [r3, #32]
}
 800763a:	bf00      	nop
 800763c:	371c      	adds	r7, #28
 800763e:	46bd      	mov	sp, r7
 8007640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007644:	4770      	bx	lr
	...

08007648 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007648:	b480      	push	{r7}
 800764a:	b085      	sub	sp, #20
 800764c:	af00      	add	r7, sp, #0
 800764e:	6078      	str	r0, [r7, #4]
 8007650:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007658:	2b01      	cmp	r3, #1
 800765a:	d101      	bne.n	8007660 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800765c:	2302      	movs	r3, #2
 800765e:	e068      	b.n	8007732 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	2201      	movs	r2, #1
 8007664:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	2202      	movs	r2, #2
 800766c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	685b      	ldr	r3, [r3, #4]
 8007676:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	689b      	ldr	r3, [r3, #8]
 800767e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	4a2e      	ldr	r2, [pc, #184]	; (8007740 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8007686:	4293      	cmp	r3, r2
 8007688:	d004      	beq.n	8007694 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	4a2d      	ldr	r2, [pc, #180]	; (8007744 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8007690:	4293      	cmp	r3, r2
 8007692:	d108      	bne.n	80076a6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007694:	68fb      	ldr	r3, [r7, #12]
 8007696:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800769a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800769c:	683b      	ldr	r3, [r7, #0]
 800769e:	685b      	ldr	r3, [r3, #4]
 80076a0:	68fa      	ldr	r2, [r7, #12]
 80076a2:	4313      	orrs	r3, r2
 80076a4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80076a6:	68fb      	ldr	r3, [r7, #12]
 80076a8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80076ac:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80076ae:	683b      	ldr	r3, [r7, #0]
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	68fa      	ldr	r2, [r7, #12]
 80076b4:	4313      	orrs	r3, r2
 80076b6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	68fa      	ldr	r2, [r7, #12]
 80076be:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	4a1e      	ldr	r2, [pc, #120]	; (8007740 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80076c6:	4293      	cmp	r3, r2
 80076c8:	d01d      	beq.n	8007706 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80076d2:	d018      	beq.n	8007706 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	4a1b      	ldr	r2, [pc, #108]	; (8007748 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80076da:	4293      	cmp	r3, r2
 80076dc:	d013      	beq.n	8007706 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	4a1a      	ldr	r2, [pc, #104]	; (800774c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80076e4:	4293      	cmp	r3, r2
 80076e6:	d00e      	beq.n	8007706 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	4a18      	ldr	r2, [pc, #96]	; (8007750 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80076ee:	4293      	cmp	r3, r2
 80076f0:	d009      	beq.n	8007706 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	4a13      	ldr	r2, [pc, #76]	; (8007744 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80076f8:	4293      	cmp	r3, r2
 80076fa:	d004      	beq.n	8007706 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	4a14      	ldr	r2, [pc, #80]	; (8007754 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8007702:	4293      	cmp	r3, r2
 8007704:	d10c      	bne.n	8007720 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007706:	68bb      	ldr	r3, [r7, #8]
 8007708:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800770c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800770e:	683b      	ldr	r3, [r7, #0]
 8007710:	689b      	ldr	r3, [r3, #8]
 8007712:	68ba      	ldr	r2, [r7, #8]
 8007714:	4313      	orrs	r3, r2
 8007716:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	68ba      	ldr	r2, [r7, #8]
 800771e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	2201      	movs	r2, #1
 8007724:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	2200      	movs	r2, #0
 800772c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007730:	2300      	movs	r3, #0
}
 8007732:	4618      	mov	r0, r3
 8007734:	3714      	adds	r7, #20
 8007736:	46bd      	mov	sp, r7
 8007738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800773c:	4770      	bx	lr
 800773e:	bf00      	nop
 8007740:	40012c00 	.word	0x40012c00
 8007744:	40013400 	.word	0x40013400
 8007748:	40000400 	.word	0x40000400
 800774c:	40000800 	.word	0x40000800
 8007750:	40000c00 	.word	0x40000c00
 8007754:	40014000 	.word	0x40014000

08007758 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007758:	b480      	push	{r7}
 800775a:	b083      	sub	sp, #12
 800775c:	af00      	add	r7, sp, #0
 800775e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007760:	bf00      	nop
 8007762:	370c      	adds	r7, #12
 8007764:	46bd      	mov	sp, r7
 8007766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800776a:	4770      	bx	lr

0800776c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800776c:	b480      	push	{r7}
 800776e:	b083      	sub	sp, #12
 8007770:	af00      	add	r7, sp, #0
 8007772:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007774:	bf00      	nop
 8007776:	370c      	adds	r7, #12
 8007778:	46bd      	mov	sp, r7
 800777a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800777e:	4770      	bx	lr

08007780 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007780:	b480      	push	{r7}
 8007782:	b083      	sub	sp, #12
 8007784:	af00      	add	r7, sp, #0
 8007786:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007788:	bf00      	nop
 800778a:	370c      	adds	r7, #12
 800778c:	46bd      	mov	sp, r7
 800778e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007792:	4770      	bx	lr

08007794 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007794:	b580      	push	{r7, lr}
 8007796:	b082      	sub	sp, #8
 8007798:	af00      	add	r7, sp, #0
 800779a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	2b00      	cmp	r3, #0
 80077a0:	d101      	bne.n	80077a6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80077a2:	2301      	movs	r3, #1
 80077a4:	e040      	b.n	8007828 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80077aa:	2b00      	cmp	r3, #0
 80077ac:	d106      	bne.n	80077bc <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	2200      	movs	r2, #0
 80077b2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80077b6:	6878      	ldr	r0, [r7, #4]
 80077b8:	f7fa fe16 	bl	80023e8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	2224      	movs	r2, #36	; 0x24
 80077c0:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	681a      	ldr	r2, [r3, #0]
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	f022 0201 	bic.w	r2, r2, #1
 80077d0:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	d002      	beq.n	80077e0 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80077da:	6878      	ldr	r0, [r7, #4]
 80077dc:	f000 fc8a 	bl	80080f4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80077e0:	6878      	ldr	r0, [r7, #4]
 80077e2:	f000 f9cf 	bl	8007b84 <UART_SetConfig>
 80077e6:	4603      	mov	r3, r0
 80077e8:	2b01      	cmp	r3, #1
 80077ea:	d101      	bne.n	80077f0 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80077ec:	2301      	movs	r3, #1
 80077ee:	e01b      	b.n	8007828 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	685a      	ldr	r2, [r3, #4]
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80077fe:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	689a      	ldr	r2, [r3, #8]
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800780e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	681a      	ldr	r2, [r3, #0]
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	f042 0201 	orr.w	r2, r2, #1
 800781e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007820:	6878      	ldr	r0, [r7, #4]
 8007822:	f000 fd09 	bl	8008238 <UART_CheckIdleState>
 8007826:	4603      	mov	r3, r0
}
 8007828:	4618      	mov	r0, r3
 800782a:	3708      	adds	r7, #8
 800782c:	46bd      	mov	sp, r7
 800782e:	bd80      	pop	{r7, pc}

08007830 <HAL_HalfDuplex_Init>:
  *        parameters in the UART_InitTypeDef and creates the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_Init(UART_HandleTypeDef *huart)
{
 8007830:	b580      	push	{r7, lr}
 8007832:	b082      	sub	sp, #8
 8007834:	af00      	add	r7, sp, #0
 8007836:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	2b00      	cmp	r3, #0
 800783c:	d101      	bne.n	8007842 <HAL_HalfDuplex_Init+0x12>
  {
    return HAL_ERROR;
 800783e:	2301      	movs	r3, #1
 8007840:	e048      	b.n	80078d4 <HAL_HalfDuplex_Init+0xa4>
  }

  /* Check UART instance */
  assert_param(IS_UART_HALFDUPLEX_INSTANCE(huart->Instance));

  if (huart->gState == HAL_UART_STATE_RESET)
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007846:	2b00      	cmp	r3, #0
 8007848:	d106      	bne.n	8007858 <HAL_HalfDuplex_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	2200      	movs	r2, #0
 800784e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007852:	6878      	ldr	r0, [r7, #4]
 8007854:	f7fa fdc8 	bl	80023e8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	2224      	movs	r2, #36	; 0x24
 800785c:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	681a      	ldr	r2, [r3, #0]
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	f022 0201 	bic.w	r2, r2, #1
 800786c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007872:	2b00      	cmp	r3, #0
 8007874:	d002      	beq.n	800787c <HAL_HalfDuplex_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8007876:	6878      	ldr	r0, [r7, #4]
 8007878:	f000 fc3c 	bl	80080f4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800787c:	6878      	ldr	r0, [r7, #4]
 800787e:	f000 f981 	bl	8007b84 <UART_SetConfig>
 8007882:	4603      	mov	r3, r0
 8007884:	2b01      	cmp	r3, #1
 8007886:	d101      	bne.n	800788c <HAL_HalfDuplex_Init+0x5c>
  {
    return HAL_ERROR;
 8007888:	2301      	movs	r3, #1
 800788a:	e023      	b.n	80078d4 <HAL_HalfDuplex_Init+0xa4>
  }

  /* In half-duplex mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN and IREN bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	685a      	ldr	r2, [r3, #4]
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800789a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_IREN | USART_CR3_SCEN));
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	689a      	ldr	r2, [r3, #8]
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	f022 0222 	bic.w	r2, r2, #34	; 0x22
 80078aa:	609a      	str	r2, [r3, #8]

  /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	689a      	ldr	r2, [r3, #8]
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	f042 0208 	orr.w	r2, r2, #8
 80078ba:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	681a      	ldr	r2, [r3, #0]
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	f042 0201 	orr.w	r2, r2, #1
 80078ca:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80078cc:	6878      	ldr	r0, [r7, #4]
 80078ce:	f000 fcb3 	bl	8008238 <UART_CheckIdleState>
 80078d2:	4603      	mov	r3, r0
}
 80078d4:	4618      	mov	r0, r3
 80078d6:	3708      	adds	r7, #8
 80078d8:	46bd      	mov	sp, r7
 80078da:	bd80      	pop	{r7, pc}

080078dc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80078dc:	b580      	push	{r7, lr}
 80078de:	b08a      	sub	sp, #40	; 0x28
 80078e0:	af02      	add	r7, sp, #8
 80078e2:	60f8      	str	r0, [r7, #12]
 80078e4:	60b9      	str	r1, [r7, #8]
 80078e6:	603b      	str	r3, [r7, #0]
 80078e8:	4613      	mov	r3, r2
 80078ea:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80078ec:	68fb      	ldr	r3, [r7, #12]
 80078ee:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80078f0:	2b20      	cmp	r3, #32
 80078f2:	d178      	bne.n	80079e6 <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 80078f4:	68bb      	ldr	r3, [r7, #8]
 80078f6:	2b00      	cmp	r3, #0
 80078f8:	d002      	beq.n	8007900 <HAL_UART_Transmit+0x24>
 80078fa:	88fb      	ldrh	r3, [r7, #6]
 80078fc:	2b00      	cmp	r3, #0
 80078fe:	d101      	bne.n	8007904 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8007900:	2301      	movs	r3, #1
 8007902:	e071      	b.n	80079e8 <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007904:	68fb      	ldr	r3, [r7, #12]
 8007906:	2200      	movs	r2, #0
 8007908:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800790c:	68fb      	ldr	r3, [r7, #12]
 800790e:	2221      	movs	r2, #33	; 0x21
 8007910:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007912:	f7fb f859 	bl	80029c8 <HAL_GetTick>
 8007916:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8007918:	68fb      	ldr	r3, [r7, #12]
 800791a:	88fa      	ldrh	r2, [r7, #6]
 800791c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8007920:	68fb      	ldr	r3, [r7, #12]
 8007922:	88fa      	ldrh	r2, [r7, #6]
 8007924:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007928:	68fb      	ldr	r3, [r7, #12]
 800792a:	689b      	ldr	r3, [r3, #8]
 800792c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007930:	d108      	bne.n	8007944 <HAL_UART_Transmit+0x68>
 8007932:	68fb      	ldr	r3, [r7, #12]
 8007934:	691b      	ldr	r3, [r3, #16]
 8007936:	2b00      	cmp	r3, #0
 8007938:	d104      	bne.n	8007944 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800793a:	2300      	movs	r3, #0
 800793c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800793e:	68bb      	ldr	r3, [r7, #8]
 8007940:	61bb      	str	r3, [r7, #24]
 8007942:	e003      	b.n	800794c <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8007944:	68bb      	ldr	r3, [r7, #8]
 8007946:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007948:	2300      	movs	r3, #0
 800794a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800794c:	e030      	b.n	80079b0 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800794e:	683b      	ldr	r3, [r7, #0]
 8007950:	9300      	str	r3, [sp, #0]
 8007952:	697b      	ldr	r3, [r7, #20]
 8007954:	2200      	movs	r2, #0
 8007956:	2180      	movs	r1, #128	; 0x80
 8007958:	68f8      	ldr	r0, [r7, #12]
 800795a:	f000 fd15 	bl	8008388 <UART_WaitOnFlagUntilTimeout>
 800795e:	4603      	mov	r3, r0
 8007960:	2b00      	cmp	r3, #0
 8007962:	d004      	beq.n	800796e <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8007964:	68fb      	ldr	r3, [r7, #12]
 8007966:	2220      	movs	r2, #32
 8007968:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 800796a:	2303      	movs	r3, #3
 800796c:	e03c      	b.n	80079e8 <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 800796e:	69fb      	ldr	r3, [r7, #28]
 8007970:	2b00      	cmp	r3, #0
 8007972:	d10b      	bne.n	800798c <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007974:	69bb      	ldr	r3, [r7, #24]
 8007976:	881a      	ldrh	r2, [r3, #0]
 8007978:	68fb      	ldr	r3, [r7, #12]
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007980:	b292      	uxth	r2, r2
 8007982:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8007984:	69bb      	ldr	r3, [r7, #24]
 8007986:	3302      	adds	r3, #2
 8007988:	61bb      	str	r3, [r7, #24]
 800798a:	e008      	b.n	800799e <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800798c:	69fb      	ldr	r3, [r7, #28]
 800798e:	781a      	ldrb	r2, [r3, #0]
 8007990:	68fb      	ldr	r3, [r7, #12]
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	b292      	uxth	r2, r2
 8007996:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8007998:	69fb      	ldr	r3, [r7, #28]
 800799a:	3301      	adds	r3, #1
 800799c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800799e:	68fb      	ldr	r3, [r7, #12]
 80079a0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80079a4:	b29b      	uxth	r3, r3
 80079a6:	3b01      	subs	r3, #1
 80079a8:	b29a      	uxth	r2, r3
 80079aa:	68fb      	ldr	r3, [r7, #12]
 80079ac:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80079b0:	68fb      	ldr	r3, [r7, #12]
 80079b2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80079b6:	b29b      	uxth	r3, r3
 80079b8:	2b00      	cmp	r3, #0
 80079ba:	d1c8      	bne.n	800794e <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80079bc:	683b      	ldr	r3, [r7, #0]
 80079be:	9300      	str	r3, [sp, #0]
 80079c0:	697b      	ldr	r3, [r7, #20]
 80079c2:	2200      	movs	r2, #0
 80079c4:	2140      	movs	r1, #64	; 0x40
 80079c6:	68f8      	ldr	r0, [r7, #12]
 80079c8:	f000 fcde 	bl	8008388 <UART_WaitOnFlagUntilTimeout>
 80079cc:	4603      	mov	r3, r0
 80079ce:	2b00      	cmp	r3, #0
 80079d0:	d004      	beq.n	80079dc <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80079d2:	68fb      	ldr	r3, [r7, #12]
 80079d4:	2220      	movs	r2, #32
 80079d6:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 80079d8:	2303      	movs	r3, #3
 80079da:	e005      	b.n	80079e8 <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80079dc:	68fb      	ldr	r3, [r7, #12]
 80079de:	2220      	movs	r2, #32
 80079e0:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80079e2:	2300      	movs	r3, #0
 80079e4:	e000      	b.n	80079e8 <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 80079e6:	2302      	movs	r3, #2
  }
}
 80079e8:	4618      	mov	r0, r3
 80079ea:	3720      	adds	r7, #32
 80079ec:	46bd      	mov	sp, r7
 80079ee:	bd80      	pop	{r7, pc}

080079f0 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80079f0:	b580      	push	{r7, lr}
 80079f2:	b08a      	sub	sp, #40	; 0x28
 80079f4:	af02      	add	r7, sp, #8
 80079f6:	60f8      	str	r0, [r7, #12]
 80079f8:	60b9      	str	r1, [r7, #8]
 80079fa:	603b      	str	r3, [r7, #0]
 80079fc:	4613      	mov	r3, r2
 80079fe:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007a00:	68fb      	ldr	r3, [r7, #12]
 8007a02:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007a06:	2b20      	cmp	r3, #32
 8007a08:	f040 80b6 	bne.w	8007b78 <HAL_UART_Receive+0x188>
  {
    if ((pData == NULL) || (Size == 0U))
 8007a0c:	68bb      	ldr	r3, [r7, #8]
 8007a0e:	2b00      	cmp	r3, #0
 8007a10:	d002      	beq.n	8007a18 <HAL_UART_Receive+0x28>
 8007a12:	88fb      	ldrh	r3, [r7, #6]
 8007a14:	2b00      	cmp	r3, #0
 8007a16:	d101      	bne.n	8007a1c <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8007a18:	2301      	movs	r3, #1
 8007a1a:	e0ae      	b.n	8007b7a <HAL_UART_Receive+0x18a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007a1c:	68fb      	ldr	r3, [r7, #12]
 8007a1e:	2200      	movs	r2, #0
 8007a20:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007a24:	68fb      	ldr	r3, [r7, #12]
 8007a26:	2222      	movs	r2, #34	; 0x22
 8007a28:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007a2c:	68fb      	ldr	r3, [r7, #12]
 8007a2e:	2200      	movs	r2, #0
 8007a30:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007a32:	f7fa ffc9 	bl	80029c8 <HAL_GetTick>
 8007a36:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8007a38:	68fb      	ldr	r3, [r7, #12]
 8007a3a:	88fa      	ldrh	r2, [r7, #6]
 8007a3c:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8007a40:	68fb      	ldr	r3, [r7, #12]
 8007a42:	88fa      	ldrh	r2, [r7, #6]
 8007a44:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8007a48:	68fb      	ldr	r3, [r7, #12]
 8007a4a:	689b      	ldr	r3, [r3, #8]
 8007a4c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007a50:	d10e      	bne.n	8007a70 <HAL_UART_Receive+0x80>
 8007a52:	68fb      	ldr	r3, [r7, #12]
 8007a54:	691b      	ldr	r3, [r3, #16]
 8007a56:	2b00      	cmp	r3, #0
 8007a58:	d105      	bne.n	8007a66 <HAL_UART_Receive+0x76>
 8007a5a:	68fb      	ldr	r3, [r7, #12]
 8007a5c:	f240 12ff 	movw	r2, #511	; 0x1ff
 8007a60:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007a64:	e02d      	b.n	8007ac2 <HAL_UART_Receive+0xd2>
 8007a66:	68fb      	ldr	r3, [r7, #12]
 8007a68:	22ff      	movs	r2, #255	; 0xff
 8007a6a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007a6e:	e028      	b.n	8007ac2 <HAL_UART_Receive+0xd2>
 8007a70:	68fb      	ldr	r3, [r7, #12]
 8007a72:	689b      	ldr	r3, [r3, #8]
 8007a74:	2b00      	cmp	r3, #0
 8007a76:	d10d      	bne.n	8007a94 <HAL_UART_Receive+0xa4>
 8007a78:	68fb      	ldr	r3, [r7, #12]
 8007a7a:	691b      	ldr	r3, [r3, #16]
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	d104      	bne.n	8007a8a <HAL_UART_Receive+0x9a>
 8007a80:	68fb      	ldr	r3, [r7, #12]
 8007a82:	22ff      	movs	r2, #255	; 0xff
 8007a84:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007a88:	e01b      	b.n	8007ac2 <HAL_UART_Receive+0xd2>
 8007a8a:	68fb      	ldr	r3, [r7, #12]
 8007a8c:	227f      	movs	r2, #127	; 0x7f
 8007a8e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007a92:	e016      	b.n	8007ac2 <HAL_UART_Receive+0xd2>
 8007a94:	68fb      	ldr	r3, [r7, #12]
 8007a96:	689b      	ldr	r3, [r3, #8]
 8007a98:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007a9c:	d10d      	bne.n	8007aba <HAL_UART_Receive+0xca>
 8007a9e:	68fb      	ldr	r3, [r7, #12]
 8007aa0:	691b      	ldr	r3, [r3, #16]
 8007aa2:	2b00      	cmp	r3, #0
 8007aa4:	d104      	bne.n	8007ab0 <HAL_UART_Receive+0xc0>
 8007aa6:	68fb      	ldr	r3, [r7, #12]
 8007aa8:	227f      	movs	r2, #127	; 0x7f
 8007aaa:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007aae:	e008      	b.n	8007ac2 <HAL_UART_Receive+0xd2>
 8007ab0:	68fb      	ldr	r3, [r7, #12]
 8007ab2:	223f      	movs	r2, #63	; 0x3f
 8007ab4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007ab8:	e003      	b.n	8007ac2 <HAL_UART_Receive+0xd2>
 8007aba:	68fb      	ldr	r3, [r7, #12]
 8007abc:	2200      	movs	r2, #0
 8007abe:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 8007ac2:	68fb      	ldr	r3, [r7, #12]
 8007ac4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007ac8:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007aca:	68fb      	ldr	r3, [r7, #12]
 8007acc:	689b      	ldr	r3, [r3, #8]
 8007ace:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007ad2:	d108      	bne.n	8007ae6 <HAL_UART_Receive+0xf6>
 8007ad4:	68fb      	ldr	r3, [r7, #12]
 8007ad6:	691b      	ldr	r3, [r3, #16]
 8007ad8:	2b00      	cmp	r3, #0
 8007ada:	d104      	bne.n	8007ae6 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 8007adc:	2300      	movs	r3, #0
 8007ade:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8007ae0:	68bb      	ldr	r3, [r7, #8]
 8007ae2:	61bb      	str	r3, [r7, #24]
 8007ae4:	e003      	b.n	8007aee <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 8007ae6:	68bb      	ldr	r3, [r7, #8]
 8007ae8:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007aea:	2300      	movs	r3, #0
 8007aec:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8007aee:	e037      	b.n	8007b60 <HAL_UART_Receive+0x170>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8007af0:	683b      	ldr	r3, [r7, #0]
 8007af2:	9300      	str	r3, [sp, #0]
 8007af4:	697b      	ldr	r3, [r7, #20]
 8007af6:	2200      	movs	r2, #0
 8007af8:	2120      	movs	r1, #32
 8007afa:	68f8      	ldr	r0, [r7, #12]
 8007afc:	f000 fc44 	bl	8008388 <UART_WaitOnFlagUntilTimeout>
 8007b00:	4603      	mov	r3, r0
 8007b02:	2b00      	cmp	r3, #0
 8007b04:	d005      	beq.n	8007b12 <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8007b06:	68fb      	ldr	r3, [r7, #12]
 8007b08:	2220      	movs	r2, #32
 8007b0a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8007b0e:	2303      	movs	r3, #3
 8007b10:	e033      	b.n	8007b7a <HAL_UART_Receive+0x18a>
      }
      if (pdata8bits == NULL)
 8007b12:	69fb      	ldr	r3, [r7, #28]
 8007b14:	2b00      	cmp	r3, #0
 8007b16:	d10c      	bne.n	8007b32 <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8007b18:	68fb      	ldr	r3, [r7, #12]
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8007b1e:	b29a      	uxth	r2, r3
 8007b20:	8a7b      	ldrh	r3, [r7, #18]
 8007b22:	4013      	ands	r3, r2
 8007b24:	b29a      	uxth	r2, r3
 8007b26:	69bb      	ldr	r3, [r7, #24]
 8007b28:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8007b2a:	69bb      	ldr	r3, [r7, #24]
 8007b2c:	3302      	adds	r3, #2
 8007b2e:	61bb      	str	r3, [r7, #24]
 8007b30:	e00d      	b.n	8007b4e <HAL_UART_Receive+0x15e>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8007b32:	68fb      	ldr	r3, [r7, #12]
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8007b38:	b29b      	uxth	r3, r3
 8007b3a:	b2da      	uxtb	r2, r3
 8007b3c:	8a7b      	ldrh	r3, [r7, #18]
 8007b3e:	b2db      	uxtb	r3, r3
 8007b40:	4013      	ands	r3, r2
 8007b42:	b2da      	uxtb	r2, r3
 8007b44:	69fb      	ldr	r3, [r7, #28]
 8007b46:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8007b48:	69fb      	ldr	r3, [r7, #28]
 8007b4a:	3301      	adds	r3, #1
 8007b4c:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8007b4e:	68fb      	ldr	r3, [r7, #12]
 8007b50:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007b54:	b29b      	uxth	r3, r3
 8007b56:	3b01      	subs	r3, #1
 8007b58:	b29a      	uxth	r2, r3
 8007b5a:	68fb      	ldr	r3, [r7, #12]
 8007b5c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 8007b60:	68fb      	ldr	r3, [r7, #12]
 8007b62:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007b66:	b29b      	uxth	r3, r3
 8007b68:	2b00      	cmp	r3, #0
 8007b6a:	d1c1      	bne.n	8007af0 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8007b6c:	68fb      	ldr	r3, [r7, #12]
 8007b6e:	2220      	movs	r2, #32
 8007b70:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    return HAL_OK;
 8007b74:	2300      	movs	r3, #0
 8007b76:	e000      	b.n	8007b7a <HAL_UART_Receive+0x18a>
  }
  else
  {
    return HAL_BUSY;
 8007b78:	2302      	movs	r3, #2
  }
}
 8007b7a:	4618      	mov	r0, r3
 8007b7c:	3720      	adds	r7, #32
 8007b7e:	46bd      	mov	sp, r7
 8007b80:	bd80      	pop	{r7, pc}
	...

08007b84 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007b84:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007b88:	b08a      	sub	sp, #40	; 0x28
 8007b8a:	af00      	add	r7, sp, #0
 8007b8c:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007b8e:	2300      	movs	r3, #0
 8007b90:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007b94:	68fb      	ldr	r3, [r7, #12]
 8007b96:	689a      	ldr	r2, [r3, #8]
 8007b98:	68fb      	ldr	r3, [r7, #12]
 8007b9a:	691b      	ldr	r3, [r3, #16]
 8007b9c:	431a      	orrs	r2, r3
 8007b9e:	68fb      	ldr	r3, [r7, #12]
 8007ba0:	695b      	ldr	r3, [r3, #20]
 8007ba2:	431a      	orrs	r2, r3
 8007ba4:	68fb      	ldr	r3, [r7, #12]
 8007ba6:	69db      	ldr	r3, [r3, #28]
 8007ba8:	4313      	orrs	r3, r2
 8007baa:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007bac:	68fb      	ldr	r3, [r7, #12]
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	681a      	ldr	r2, [r3, #0]
 8007bb2:	4ba4      	ldr	r3, [pc, #656]	; (8007e44 <UART_SetConfig+0x2c0>)
 8007bb4:	4013      	ands	r3, r2
 8007bb6:	68fa      	ldr	r2, [r7, #12]
 8007bb8:	6812      	ldr	r2, [r2, #0]
 8007bba:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007bbc:	430b      	orrs	r3, r1
 8007bbe:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007bc0:	68fb      	ldr	r3, [r7, #12]
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	685b      	ldr	r3, [r3, #4]
 8007bc6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007bca:	68fb      	ldr	r3, [r7, #12]
 8007bcc:	68da      	ldr	r2, [r3, #12]
 8007bce:	68fb      	ldr	r3, [r7, #12]
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	430a      	orrs	r2, r1
 8007bd4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007bd6:	68fb      	ldr	r3, [r7, #12]
 8007bd8:	699b      	ldr	r3, [r3, #24]
 8007bda:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007bdc:	68fb      	ldr	r3, [r7, #12]
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	4a99      	ldr	r2, [pc, #612]	; (8007e48 <UART_SetConfig+0x2c4>)
 8007be2:	4293      	cmp	r3, r2
 8007be4:	d004      	beq.n	8007bf0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007be6:	68fb      	ldr	r3, [r7, #12]
 8007be8:	6a1b      	ldr	r3, [r3, #32]
 8007bea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007bec:	4313      	orrs	r3, r2
 8007bee:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007bf0:	68fb      	ldr	r3, [r7, #12]
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	689b      	ldr	r3, [r3, #8]
 8007bf6:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8007bfa:	68fb      	ldr	r3, [r7, #12]
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007c00:	430a      	orrs	r2, r1
 8007c02:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007c04:	68fb      	ldr	r3, [r7, #12]
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	4a90      	ldr	r2, [pc, #576]	; (8007e4c <UART_SetConfig+0x2c8>)
 8007c0a:	4293      	cmp	r3, r2
 8007c0c:	d126      	bne.n	8007c5c <UART_SetConfig+0xd8>
 8007c0e:	4b90      	ldr	r3, [pc, #576]	; (8007e50 <UART_SetConfig+0x2cc>)
 8007c10:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007c14:	f003 0303 	and.w	r3, r3, #3
 8007c18:	2b03      	cmp	r3, #3
 8007c1a:	d81b      	bhi.n	8007c54 <UART_SetConfig+0xd0>
 8007c1c:	a201      	add	r2, pc, #4	; (adr r2, 8007c24 <UART_SetConfig+0xa0>)
 8007c1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c22:	bf00      	nop
 8007c24:	08007c35 	.word	0x08007c35
 8007c28:	08007c45 	.word	0x08007c45
 8007c2c:	08007c3d 	.word	0x08007c3d
 8007c30:	08007c4d 	.word	0x08007c4d
 8007c34:	2301      	movs	r3, #1
 8007c36:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007c3a:	e116      	b.n	8007e6a <UART_SetConfig+0x2e6>
 8007c3c:	2302      	movs	r3, #2
 8007c3e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007c42:	e112      	b.n	8007e6a <UART_SetConfig+0x2e6>
 8007c44:	2304      	movs	r3, #4
 8007c46:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007c4a:	e10e      	b.n	8007e6a <UART_SetConfig+0x2e6>
 8007c4c:	2308      	movs	r3, #8
 8007c4e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007c52:	e10a      	b.n	8007e6a <UART_SetConfig+0x2e6>
 8007c54:	2310      	movs	r3, #16
 8007c56:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007c5a:	e106      	b.n	8007e6a <UART_SetConfig+0x2e6>
 8007c5c:	68fb      	ldr	r3, [r7, #12]
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	4a7c      	ldr	r2, [pc, #496]	; (8007e54 <UART_SetConfig+0x2d0>)
 8007c62:	4293      	cmp	r3, r2
 8007c64:	d138      	bne.n	8007cd8 <UART_SetConfig+0x154>
 8007c66:	4b7a      	ldr	r3, [pc, #488]	; (8007e50 <UART_SetConfig+0x2cc>)
 8007c68:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007c6c:	f003 030c 	and.w	r3, r3, #12
 8007c70:	2b0c      	cmp	r3, #12
 8007c72:	d82d      	bhi.n	8007cd0 <UART_SetConfig+0x14c>
 8007c74:	a201      	add	r2, pc, #4	; (adr r2, 8007c7c <UART_SetConfig+0xf8>)
 8007c76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c7a:	bf00      	nop
 8007c7c:	08007cb1 	.word	0x08007cb1
 8007c80:	08007cd1 	.word	0x08007cd1
 8007c84:	08007cd1 	.word	0x08007cd1
 8007c88:	08007cd1 	.word	0x08007cd1
 8007c8c:	08007cc1 	.word	0x08007cc1
 8007c90:	08007cd1 	.word	0x08007cd1
 8007c94:	08007cd1 	.word	0x08007cd1
 8007c98:	08007cd1 	.word	0x08007cd1
 8007c9c:	08007cb9 	.word	0x08007cb9
 8007ca0:	08007cd1 	.word	0x08007cd1
 8007ca4:	08007cd1 	.word	0x08007cd1
 8007ca8:	08007cd1 	.word	0x08007cd1
 8007cac:	08007cc9 	.word	0x08007cc9
 8007cb0:	2300      	movs	r3, #0
 8007cb2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007cb6:	e0d8      	b.n	8007e6a <UART_SetConfig+0x2e6>
 8007cb8:	2302      	movs	r3, #2
 8007cba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007cbe:	e0d4      	b.n	8007e6a <UART_SetConfig+0x2e6>
 8007cc0:	2304      	movs	r3, #4
 8007cc2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007cc6:	e0d0      	b.n	8007e6a <UART_SetConfig+0x2e6>
 8007cc8:	2308      	movs	r3, #8
 8007cca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007cce:	e0cc      	b.n	8007e6a <UART_SetConfig+0x2e6>
 8007cd0:	2310      	movs	r3, #16
 8007cd2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007cd6:	e0c8      	b.n	8007e6a <UART_SetConfig+0x2e6>
 8007cd8:	68fb      	ldr	r3, [r7, #12]
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	4a5e      	ldr	r2, [pc, #376]	; (8007e58 <UART_SetConfig+0x2d4>)
 8007cde:	4293      	cmp	r3, r2
 8007ce0:	d125      	bne.n	8007d2e <UART_SetConfig+0x1aa>
 8007ce2:	4b5b      	ldr	r3, [pc, #364]	; (8007e50 <UART_SetConfig+0x2cc>)
 8007ce4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007ce8:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8007cec:	2b30      	cmp	r3, #48	; 0x30
 8007cee:	d016      	beq.n	8007d1e <UART_SetConfig+0x19a>
 8007cf0:	2b30      	cmp	r3, #48	; 0x30
 8007cf2:	d818      	bhi.n	8007d26 <UART_SetConfig+0x1a2>
 8007cf4:	2b20      	cmp	r3, #32
 8007cf6:	d00a      	beq.n	8007d0e <UART_SetConfig+0x18a>
 8007cf8:	2b20      	cmp	r3, #32
 8007cfa:	d814      	bhi.n	8007d26 <UART_SetConfig+0x1a2>
 8007cfc:	2b00      	cmp	r3, #0
 8007cfe:	d002      	beq.n	8007d06 <UART_SetConfig+0x182>
 8007d00:	2b10      	cmp	r3, #16
 8007d02:	d008      	beq.n	8007d16 <UART_SetConfig+0x192>
 8007d04:	e00f      	b.n	8007d26 <UART_SetConfig+0x1a2>
 8007d06:	2300      	movs	r3, #0
 8007d08:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007d0c:	e0ad      	b.n	8007e6a <UART_SetConfig+0x2e6>
 8007d0e:	2302      	movs	r3, #2
 8007d10:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007d14:	e0a9      	b.n	8007e6a <UART_SetConfig+0x2e6>
 8007d16:	2304      	movs	r3, #4
 8007d18:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007d1c:	e0a5      	b.n	8007e6a <UART_SetConfig+0x2e6>
 8007d1e:	2308      	movs	r3, #8
 8007d20:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007d24:	e0a1      	b.n	8007e6a <UART_SetConfig+0x2e6>
 8007d26:	2310      	movs	r3, #16
 8007d28:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007d2c:	e09d      	b.n	8007e6a <UART_SetConfig+0x2e6>
 8007d2e:	68fb      	ldr	r3, [r7, #12]
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	4a4a      	ldr	r2, [pc, #296]	; (8007e5c <UART_SetConfig+0x2d8>)
 8007d34:	4293      	cmp	r3, r2
 8007d36:	d125      	bne.n	8007d84 <UART_SetConfig+0x200>
 8007d38:	4b45      	ldr	r3, [pc, #276]	; (8007e50 <UART_SetConfig+0x2cc>)
 8007d3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007d3e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8007d42:	2bc0      	cmp	r3, #192	; 0xc0
 8007d44:	d016      	beq.n	8007d74 <UART_SetConfig+0x1f0>
 8007d46:	2bc0      	cmp	r3, #192	; 0xc0
 8007d48:	d818      	bhi.n	8007d7c <UART_SetConfig+0x1f8>
 8007d4a:	2b80      	cmp	r3, #128	; 0x80
 8007d4c:	d00a      	beq.n	8007d64 <UART_SetConfig+0x1e0>
 8007d4e:	2b80      	cmp	r3, #128	; 0x80
 8007d50:	d814      	bhi.n	8007d7c <UART_SetConfig+0x1f8>
 8007d52:	2b00      	cmp	r3, #0
 8007d54:	d002      	beq.n	8007d5c <UART_SetConfig+0x1d8>
 8007d56:	2b40      	cmp	r3, #64	; 0x40
 8007d58:	d008      	beq.n	8007d6c <UART_SetConfig+0x1e8>
 8007d5a:	e00f      	b.n	8007d7c <UART_SetConfig+0x1f8>
 8007d5c:	2300      	movs	r3, #0
 8007d5e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007d62:	e082      	b.n	8007e6a <UART_SetConfig+0x2e6>
 8007d64:	2302      	movs	r3, #2
 8007d66:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007d6a:	e07e      	b.n	8007e6a <UART_SetConfig+0x2e6>
 8007d6c:	2304      	movs	r3, #4
 8007d6e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007d72:	e07a      	b.n	8007e6a <UART_SetConfig+0x2e6>
 8007d74:	2308      	movs	r3, #8
 8007d76:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007d7a:	e076      	b.n	8007e6a <UART_SetConfig+0x2e6>
 8007d7c:	2310      	movs	r3, #16
 8007d7e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007d82:	e072      	b.n	8007e6a <UART_SetConfig+0x2e6>
 8007d84:	68fb      	ldr	r3, [r7, #12]
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	4a35      	ldr	r2, [pc, #212]	; (8007e60 <UART_SetConfig+0x2dc>)
 8007d8a:	4293      	cmp	r3, r2
 8007d8c:	d12a      	bne.n	8007de4 <UART_SetConfig+0x260>
 8007d8e:	4b30      	ldr	r3, [pc, #192]	; (8007e50 <UART_SetConfig+0x2cc>)
 8007d90:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007d94:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007d98:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007d9c:	d01a      	beq.n	8007dd4 <UART_SetConfig+0x250>
 8007d9e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007da2:	d81b      	bhi.n	8007ddc <UART_SetConfig+0x258>
 8007da4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007da8:	d00c      	beq.n	8007dc4 <UART_SetConfig+0x240>
 8007daa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007dae:	d815      	bhi.n	8007ddc <UART_SetConfig+0x258>
 8007db0:	2b00      	cmp	r3, #0
 8007db2:	d003      	beq.n	8007dbc <UART_SetConfig+0x238>
 8007db4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007db8:	d008      	beq.n	8007dcc <UART_SetConfig+0x248>
 8007dba:	e00f      	b.n	8007ddc <UART_SetConfig+0x258>
 8007dbc:	2300      	movs	r3, #0
 8007dbe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007dc2:	e052      	b.n	8007e6a <UART_SetConfig+0x2e6>
 8007dc4:	2302      	movs	r3, #2
 8007dc6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007dca:	e04e      	b.n	8007e6a <UART_SetConfig+0x2e6>
 8007dcc:	2304      	movs	r3, #4
 8007dce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007dd2:	e04a      	b.n	8007e6a <UART_SetConfig+0x2e6>
 8007dd4:	2308      	movs	r3, #8
 8007dd6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007dda:	e046      	b.n	8007e6a <UART_SetConfig+0x2e6>
 8007ddc:	2310      	movs	r3, #16
 8007dde:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007de2:	e042      	b.n	8007e6a <UART_SetConfig+0x2e6>
 8007de4:	68fb      	ldr	r3, [r7, #12]
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	4a17      	ldr	r2, [pc, #92]	; (8007e48 <UART_SetConfig+0x2c4>)
 8007dea:	4293      	cmp	r3, r2
 8007dec:	d13a      	bne.n	8007e64 <UART_SetConfig+0x2e0>
 8007dee:	4b18      	ldr	r3, [pc, #96]	; (8007e50 <UART_SetConfig+0x2cc>)
 8007df0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007df4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8007df8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007dfc:	d01a      	beq.n	8007e34 <UART_SetConfig+0x2b0>
 8007dfe:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007e02:	d81b      	bhi.n	8007e3c <UART_SetConfig+0x2b8>
 8007e04:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007e08:	d00c      	beq.n	8007e24 <UART_SetConfig+0x2a0>
 8007e0a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007e0e:	d815      	bhi.n	8007e3c <UART_SetConfig+0x2b8>
 8007e10:	2b00      	cmp	r3, #0
 8007e12:	d003      	beq.n	8007e1c <UART_SetConfig+0x298>
 8007e14:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007e18:	d008      	beq.n	8007e2c <UART_SetConfig+0x2a8>
 8007e1a:	e00f      	b.n	8007e3c <UART_SetConfig+0x2b8>
 8007e1c:	2300      	movs	r3, #0
 8007e1e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007e22:	e022      	b.n	8007e6a <UART_SetConfig+0x2e6>
 8007e24:	2302      	movs	r3, #2
 8007e26:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007e2a:	e01e      	b.n	8007e6a <UART_SetConfig+0x2e6>
 8007e2c:	2304      	movs	r3, #4
 8007e2e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007e32:	e01a      	b.n	8007e6a <UART_SetConfig+0x2e6>
 8007e34:	2308      	movs	r3, #8
 8007e36:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007e3a:	e016      	b.n	8007e6a <UART_SetConfig+0x2e6>
 8007e3c:	2310      	movs	r3, #16
 8007e3e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007e42:	e012      	b.n	8007e6a <UART_SetConfig+0x2e6>
 8007e44:	efff69f3 	.word	0xefff69f3
 8007e48:	40008000 	.word	0x40008000
 8007e4c:	40013800 	.word	0x40013800
 8007e50:	40021000 	.word	0x40021000
 8007e54:	40004400 	.word	0x40004400
 8007e58:	40004800 	.word	0x40004800
 8007e5c:	40004c00 	.word	0x40004c00
 8007e60:	40005000 	.word	0x40005000
 8007e64:	2310      	movs	r3, #16
 8007e66:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007e6a:	68fb      	ldr	r3, [r7, #12]
 8007e6c:	681b      	ldr	r3, [r3, #0]
 8007e6e:	4a9f      	ldr	r2, [pc, #636]	; (80080ec <UART_SetConfig+0x568>)
 8007e70:	4293      	cmp	r3, r2
 8007e72:	d17a      	bne.n	8007f6a <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007e74:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007e78:	2b08      	cmp	r3, #8
 8007e7a:	d824      	bhi.n	8007ec6 <UART_SetConfig+0x342>
 8007e7c:	a201      	add	r2, pc, #4	; (adr r2, 8007e84 <UART_SetConfig+0x300>)
 8007e7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e82:	bf00      	nop
 8007e84:	08007ea9 	.word	0x08007ea9
 8007e88:	08007ec7 	.word	0x08007ec7
 8007e8c:	08007eb1 	.word	0x08007eb1
 8007e90:	08007ec7 	.word	0x08007ec7
 8007e94:	08007eb7 	.word	0x08007eb7
 8007e98:	08007ec7 	.word	0x08007ec7
 8007e9c:	08007ec7 	.word	0x08007ec7
 8007ea0:	08007ec7 	.word	0x08007ec7
 8007ea4:	08007ebf 	.word	0x08007ebf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007ea8:	f7fc f9aa 	bl	8004200 <HAL_RCC_GetPCLK1Freq>
 8007eac:	61f8      	str	r0, [r7, #28]
        break;
 8007eae:	e010      	b.n	8007ed2 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007eb0:	4b8f      	ldr	r3, [pc, #572]	; (80080f0 <UART_SetConfig+0x56c>)
 8007eb2:	61fb      	str	r3, [r7, #28]
        break;
 8007eb4:	e00d      	b.n	8007ed2 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007eb6:	f7fc f90b 	bl	80040d0 <HAL_RCC_GetSysClockFreq>
 8007eba:	61f8      	str	r0, [r7, #28]
        break;
 8007ebc:	e009      	b.n	8007ed2 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007ebe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007ec2:	61fb      	str	r3, [r7, #28]
        break;
 8007ec4:	e005      	b.n	8007ed2 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8007ec6:	2300      	movs	r3, #0
 8007ec8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8007eca:	2301      	movs	r3, #1
 8007ecc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8007ed0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007ed2:	69fb      	ldr	r3, [r7, #28]
 8007ed4:	2b00      	cmp	r3, #0
 8007ed6:	f000 80fb 	beq.w	80080d0 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8007eda:	68fb      	ldr	r3, [r7, #12]
 8007edc:	685a      	ldr	r2, [r3, #4]
 8007ede:	4613      	mov	r3, r2
 8007ee0:	005b      	lsls	r3, r3, #1
 8007ee2:	4413      	add	r3, r2
 8007ee4:	69fa      	ldr	r2, [r7, #28]
 8007ee6:	429a      	cmp	r2, r3
 8007ee8:	d305      	bcc.n	8007ef6 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8007eea:	68fb      	ldr	r3, [r7, #12]
 8007eec:	685b      	ldr	r3, [r3, #4]
 8007eee:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8007ef0:	69fa      	ldr	r2, [r7, #28]
 8007ef2:	429a      	cmp	r2, r3
 8007ef4:	d903      	bls.n	8007efe <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8007ef6:	2301      	movs	r3, #1
 8007ef8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8007efc:	e0e8      	b.n	80080d0 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8007efe:	69fb      	ldr	r3, [r7, #28]
 8007f00:	2200      	movs	r2, #0
 8007f02:	461c      	mov	r4, r3
 8007f04:	4615      	mov	r5, r2
 8007f06:	f04f 0200 	mov.w	r2, #0
 8007f0a:	f04f 0300 	mov.w	r3, #0
 8007f0e:	022b      	lsls	r3, r5, #8
 8007f10:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8007f14:	0222      	lsls	r2, r4, #8
 8007f16:	68f9      	ldr	r1, [r7, #12]
 8007f18:	6849      	ldr	r1, [r1, #4]
 8007f1a:	0849      	lsrs	r1, r1, #1
 8007f1c:	2000      	movs	r0, #0
 8007f1e:	4688      	mov	r8, r1
 8007f20:	4681      	mov	r9, r0
 8007f22:	eb12 0a08 	adds.w	sl, r2, r8
 8007f26:	eb43 0b09 	adc.w	fp, r3, r9
 8007f2a:	68fb      	ldr	r3, [r7, #12]
 8007f2c:	685b      	ldr	r3, [r3, #4]
 8007f2e:	2200      	movs	r2, #0
 8007f30:	603b      	str	r3, [r7, #0]
 8007f32:	607a      	str	r2, [r7, #4]
 8007f34:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007f38:	4650      	mov	r0, sl
 8007f3a:	4659      	mov	r1, fp
 8007f3c:	f7f8 fe34 	bl	8000ba8 <__aeabi_uldivmod>
 8007f40:	4602      	mov	r2, r0
 8007f42:	460b      	mov	r3, r1
 8007f44:	4613      	mov	r3, r2
 8007f46:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007f48:	69bb      	ldr	r3, [r7, #24]
 8007f4a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007f4e:	d308      	bcc.n	8007f62 <UART_SetConfig+0x3de>
 8007f50:	69bb      	ldr	r3, [r7, #24]
 8007f52:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007f56:	d204      	bcs.n	8007f62 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8007f58:	68fb      	ldr	r3, [r7, #12]
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	69ba      	ldr	r2, [r7, #24]
 8007f5e:	60da      	str	r2, [r3, #12]
 8007f60:	e0b6      	b.n	80080d0 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8007f62:	2301      	movs	r3, #1
 8007f64:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8007f68:	e0b2      	b.n	80080d0 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007f6a:	68fb      	ldr	r3, [r7, #12]
 8007f6c:	69db      	ldr	r3, [r3, #28]
 8007f6e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007f72:	d15e      	bne.n	8008032 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8007f74:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007f78:	2b08      	cmp	r3, #8
 8007f7a:	d828      	bhi.n	8007fce <UART_SetConfig+0x44a>
 8007f7c:	a201      	add	r2, pc, #4	; (adr r2, 8007f84 <UART_SetConfig+0x400>)
 8007f7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f82:	bf00      	nop
 8007f84:	08007fa9 	.word	0x08007fa9
 8007f88:	08007fb1 	.word	0x08007fb1
 8007f8c:	08007fb9 	.word	0x08007fb9
 8007f90:	08007fcf 	.word	0x08007fcf
 8007f94:	08007fbf 	.word	0x08007fbf
 8007f98:	08007fcf 	.word	0x08007fcf
 8007f9c:	08007fcf 	.word	0x08007fcf
 8007fa0:	08007fcf 	.word	0x08007fcf
 8007fa4:	08007fc7 	.word	0x08007fc7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007fa8:	f7fc f92a 	bl	8004200 <HAL_RCC_GetPCLK1Freq>
 8007fac:	61f8      	str	r0, [r7, #28]
        break;
 8007fae:	e014      	b.n	8007fda <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007fb0:	f7fc f93c 	bl	800422c <HAL_RCC_GetPCLK2Freq>
 8007fb4:	61f8      	str	r0, [r7, #28]
        break;
 8007fb6:	e010      	b.n	8007fda <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007fb8:	4b4d      	ldr	r3, [pc, #308]	; (80080f0 <UART_SetConfig+0x56c>)
 8007fba:	61fb      	str	r3, [r7, #28]
        break;
 8007fbc:	e00d      	b.n	8007fda <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007fbe:	f7fc f887 	bl	80040d0 <HAL_RCC_GetSysClockFreq>
 8007fc2:	61f8      	str	r0, [r7, #28]
        break;
 8007fc4:	e009      	b.n	8007fda <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007fc6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007fca:	61fb      	str	r3, [r7, #28]
        break;
 8007fcc:	e005      	b.n	8007fda <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8007fce:	2300      	movs	r3, #0
 8007fd0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8007fd2:	2301      	movs	r3, #1
 8007fd4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8007fd8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007fda:	69fb      	ldr	r3, [r7, #28]
 8007fdc:	2b00      	cmp	r3, #0
 8007fde:	d077      	beq.n	80080d0 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8007fe0:	69fb      	ldr	r3, [r7, #28]
 8007fe2:	005a      	lsls	r2, r3, #1
 8007fe4:	68fb      	ldr	r3, [r7, #12]
 8007fe6:	685b      	ldr	r3, [r3, #4]
 8007fe8:	085b      	lsrs	r3, r3, #1
 8007fea:	441a      	add	r2, r3
 8007fec:	68fb      	ldr	r3, [r7, #12]
 8007fee:	685b      	ldr	r3, [r3, #4]
 8007ff0:	fbb2 f3f3 	udiv	r3, r2, r3
 8007ff4:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007ff6:	69bb      	ldr	r3, [r7, #24]
 8007ff8:	2b0f      	cmp	r3, #15
 8007ffa:	d916      	bls.n	800802a <UART_SetConfig+0x4a6>
 8007ffc:	69bb      	ldr	r3, [r7, #24]
 8007ffe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008002:	d212      	bcs.n	800802a <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008004:	69bb      	ldr	r3, [r7, #24]
 8008006:	b29b      	uxth	r3, r3
 8008008:	f023 030f 	bic.w	r3, r3, #15
 800800c:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800800e:	69bb      	ldr	r3, [r7, #24]
 8008010:	085b      	lsrs	r3, r3, #1
 8008012:	b29b      	uxth	r3, r3
 8008014:	f003 0307 	and.w	r3, r3, #7
 8008018:	b29a      	uxth	r2, r3
 800801a:	8afb      	ldrh	r3, [r7, #22]
 800801c:	4313      	orrs	r3, r2
 800801e:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8008020:	68fb      	ldr	r3, [r7, #12]
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	8afa      	ldrh	r2, [r7, #22]
 8008026:	60da      	str	r2, [r3, #12]
 8008028:	e052      	b.n	80080d0 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800802a:	2301      	movs	r3, #1
 800802c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8008030:	e04e      	b.n	80080d0 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8008032:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008036:	2b08      	cmp	r3, #8
 8008038:	d827      	bhi.n	800808a <UART_SetConfig+0x506>
 800803a:	a201      	add	r2, pc, #4	; (adr r2, 8008040 <UART_SetConfig+0x4bc>)
 800803c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008040:	08008065 	.word	0x08008065
 8008044:	0800806d 	.word	0x0800806d
 8008048:	08008075 	.word	0x08008075
 800804c:	0800808b 	.word	0x0800808b
 8008050:	0800807b 	.word	0x0800807b
 8008054:	0800808b 	.word	0x0800808b
 8008058:	0800808b 	.word	0x0800808b
 800805c:	0800808b 	.word	0x0800808b
 8008060:	08008083 	.word	0x08008083
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008064:	f7fc f8cc 	bl	8004200 <HAL_RCC_GetPCLK1Freq>
 8008068:	61f8      	str	r0, [r7, #28]
        break;
 800806a:	e014      	b.n	8008096 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800806c:	f7fc f8de 	bl	800422c <HAL_RCC_GetPCLK2Freq>
 8008070:	61f8      	str	r0, [r7, #28]
        break;
 8008072:	e010      	b.n	8008096 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008074:	4b1e      	ldr	r3, [pc, #120]	; (80080f0 <UART_SetConfig+0x56c>)
 8008076:	61fb      	str	r3, [r7, #28]
        break;
 8008078:	e00d      	b.n	8008096 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800807a:	f7fc f829 	bl	80040d0 <HAL_RCC_GetSysClockFreq>
 800807e:	61f8      	str	r0, [r7, #28]
        break;
 8008080:	e009      	b.n	8008096 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008082:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008086:	61fb      	str	r3, [r7, #28]
        break;
 8008088:	e005      	b.n	8008096 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 800808a:	2300      	movs	r3, #0
 800808c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800808e:	2301      	movs	r3, #1
 8008090:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8008094:	bf00      	nop
    }

    if (pclk != 0U)
 8008096:	69fb      	ldr	r3, [r7, #28]
 8008098:	2b00      	cmp	r3, #0
 800809a:	d019      	beq.n	80080d0 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800809c:	68fb      	ldr	r3, [r7, #12]
 800809e:	685b      	ldr	r3, [r3, #4]
 80080a0:	085a      	lsrs	r2, r3, #1
 80080a2:	69fb      	ldr	r3, [r7, #28]
 80080a4:	441a      	add	r2, r3
 80080a6:	68fb      	ldr	r3, [r7, #12]
 80080a8:	685b      	ldr	r3, [r3, #4]
 80080aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80080ae:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80080b0:	69bb      	ldr	r3, [r7, #24]
 80080b2:	2b0f      	cmp	r3, #15
 80080b4:	d909      	bls.n	80080ca <UART_SetConfig+0x546>
 80080b6:	69bb      	ldr	r3, [r7, #24]
 80080b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80080bc:	d205      	bcs.n	80080ca <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80080be:	69bb      	ldr	r3, [r7, #24]
 80080c0:	b29a      	uxth	r2, r3
 80080c2:	68fb      	ldr	r3, [r7, #12]
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	60da      	str	r2, [r3, #12]
 80080c8:	e002      	b.n	80080d0 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80080ca:	2301      	movs	r3, #1
 80080cc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80080d0:	68fb      	ldr	r3, [r7, #12]
 80080d2:	2200      	movs	r2, #0
 80080d4:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80080d6:	68fb      	ldr	r3, [r7, #12]
 80080d8:	2200      	movs	r2, #0
 80080da:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80080dc:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 80080e0:	4618      	mov	r0, r3
 80080e2:	3728      	adds	r7, #40	; 0x28
 80080e4:	46bd      	mov	sp, r7
 80080e6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80080ea:	bf00      	nop
 80080ec:	40008000 	.word	0x40008000
 80080f0:	00f42400 	.word	0x00f42400

080080f4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80080f4:	b480      	push	{r7}
 80080f6:	b083      	sub	sp, #12
 80080f8:	af00      	add	r7, sp, #0
 80080fa:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008100:	f003 0308 	and.w	r3, r3, #8
 8008104:	2b00      	cmp	r3, #0
 8008106:	d00a      	beq.n	800811e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	685b      	ldr	r3, [r3, #4]
 800810e:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	681b      	ldr	r3, [r3, #0]
 800811a:	430a      	orrs	r2, r1
 800811c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008122:	f003 0301 	and.w	r3, r3, #1
 8008126:	2b00      	cmp	r3, #0
 8008128:	d00a      	beq.n	8008140 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	681b      	ldr	r3, [r3, #0]
 800812e:	685b      	ldr	r3, [r3, #4]
 8008130:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	430a      	orrs	r2, r1
 800813e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008144:	f003 0302 	and.w	r3, r3, #2
 8008148:	2b00      	cmp	r3, #0
 800814a:	d00a      	beq.n	8008162 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	685b      	ldr	r3, [r3, #4]
 8008152:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	430a      	orrs	r2, r1
 8008160:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008166:	f003 0304 	and.w	r3, r3, #4
 800816a:	2b00      	cmp	r3, #0
 800816c:	d00a      	beq.n	8008184 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	681b      	ldr	r3, [r3, #0]
 8008172:	685b      	ldr	r3, [r3, #4]
 8008174:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	430a      	orrs	r2, r1
 8008182:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008188:	f003 0310 	and.w	r3, r3, #16
 800818c:	2b00      	cmp	r3, #0
 800818e:	d00a      	beq.n	80081a6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	681b      	ldr	r3, [r3, #0]
 8008194:	689b      	ldr	r3, [r3, #8]
 8008196:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	681b      	ldr	r3, [r3, #0]
 80081a2:	430a      	orrs	r2, r1
 80081a4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081aa:	f003 0320 	and.w	r3, r3, #32
 80081ae:	2b00      	cmp	r3, #0
 80081b0:	d00a      	beq.n	80081c8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	681b      	ldr	r3, [r3, #0]
 80081b6:	689b      	ldr	r3, [r3, #8]
 80081b8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	430a      	orrs	r2, r1
 80081c6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80081d0:	2b00      	cmp	r3, #0
 80081d2:	d01a      	beq.n	800820a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	681b      	ldr	r3, [r3, #0]
 80081d8:	685b      	ldr	r3, [r3, #4]
 80081da:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	681b      	ldr	r3, [r3, #0]
 80081e6:	430a      	orrs	r2, r1
 80081e8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081ee:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80081f2:	d10a      	bne.n	800820a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	685b      	ldr	r3, [r3, #4]
 80081fa:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	681b      	ldr	r3, [r3, #0]
 8008206:	430a      	orrs	r2, r1
 8008208:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800820e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008212:	2b00      	cmp	r3, #0
 8008214:	d00a      	beq.n	800822c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	685b      	ldr	r3, [r3, #4]
 800821c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	430a      	orrs	r2, r1
 800822a:	605a      	str	r2, [r3, #4]
  }
}
 800822c:	bf00      	nop
 800822e:	370c      	adds	r7, #12
 8008230:	46bd      	mov	sp, r7
 8008232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008236:	4770      	bx	lr

08008238 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008238:	b580      	push	{r7, lr}
 800823a:	b098      	sub	sp, #96	; 0x60
 800823c:	af02      	add	r7, sp, #8
 800823e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	2200      	movs	r2, #0
 8008244:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008248:	f7fa fbbe 	bl	80029c8 <HAL_GetTick>
 800824c:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	681b      	ldr	r3, [r3, #0]
 8008252:	681b      	ldr	r3, [r3, #0]
 8008254:	f003 0308 	and.w	r3, r3, #8
 8008258:	2b08      	cmp	r3, #8
 800825a:	d12e      	bne.n	80082ba <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800825c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008260:	9300      	str	r3, [sp, #0]
 8008262:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008264:	2200      	movs	r2, #0
 8008266:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800826a:	6878      	ldr	r0, [r7, #4]
 800826c:	f000 f88c 	bl	8008388 <UART_WaitOnFlagUntilTimeout>
 8008270:	4603      	mov	r3, r0
 8008272:	2b00      	cmp	r3, #0
 8008274:	d021      	beq.n	80082ba <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800827c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800827e:	e853 3f00 	ldrex	r3, [r3]
 8008282:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008284:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008286:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800828a:	653b      	str	r3, [r7, #80]	; 0x50
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	681b      	ldr	r3, [r3, #0]
 8008290:	461a      	mov	r2, r3
 8008292:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008294:	647b      	str	r3, [r7, #68]	; 0x44
 8008296:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008298:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800829a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800829c:	e841 2300 	strex	r3, r2, [r1]
 80082a0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80082a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80082a4:	2b00      	cmp	r3, #0
 80082a6:	d1e6      	bne.n	8008276 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	2220      	movs	r2, #32
 80082ac:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	2200      	movs	r2, #0
 80082b2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80082b6:	2303      	movs	r3, #3
 80082b8:	e062      	b.n	8008380 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	681b      	ldr	r3, [r3, #0]
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	f003 0304 	and.w	r3, r3, #4
 80082c4:	2b04      	cmp	r3, #4
 80082c6:	d149      	bne.n	800835c <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80082c8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80082cc:	9300      	str	r3, [sp, #0]
 80082ce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80082d0:	2200      	movs	r2, #0
 80082d2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80082d6:	6878      	ldr	r0, [r7, #4]
 80082d8:	f000 f856 	bl	8008388 <UART_WaitOnFlagUntilTimeout>
 80082dc:	4603      	mov	r3, r0
 80082de:	2b00      	cmp	r3, #0
 80082e0:	d03c      	beq.n	800835c <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	681b      	ldr	r3, [r3, #0]
 80082e6:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082ea:	e853 3f00 	ldrex	r3, [r3]
 80082ee:	623b      	str	r3, [r7, #32]
   return(result);
 80082f0:	6a3b      	ldr	r3, [r7, #32]
 80082f2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80082f6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	461a      	mov	r2, r3
 80082fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008300:	633b      	str	r3, [r7, #48]	; 0x30
 8008302:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008304:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008306:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008308:	e841 2300 	strex	r3, r2, [r1]
 800830c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800830e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008310:	2b00      	cmp	r3, #0
 8008312:	d1e6      	bne.n	80082e2 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	681b      	ldr	r3, [r3, #0]
 8008318:	3308      	adds	r3, #8
 800831a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800831c:	693b      	ldr	r3, [r7, #16]
 800831e:	e853 3f00 	ldrex	r3, [r3]
 8008322:	60fb      	str	r3, [r7, #12]
   return(result);
 8008324:	68fb      	ldr	r3, [r7, #12]
 8008326:	f023 0301 	bic.w	r3, r3, #1
 800832a:	64bb      	str	r3, [r7, #72]	; 0x48
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	681b      	ldr	r3, [r3, #0]
 8008330:	3308      	adds	r3, #8
 8008332:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008334:	61fa      	str	r2, [r7, #28]
 8008336:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008338:	69b9      	ldr	r1, [r7, #24]
 800833a:	69fa      	ldr	r2, [r7, #28]
 800833c:	e841 2300 	strex	r3, r2, [r1]
 8008340:	617b      	str	r3, [r7, #20]
   return(result);
 8008342:	697b      	ldr	r3, [r7, #20]
 8008344:	2b00      	cmp	r3, #0
 8008346:	d1e5      	bne.n	8008314 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	2220      	movs	r2, #32
 800834c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	2200      	movs	r2, #0
 8008354:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008358:	2303      	movs	r3, #3
 800835a:	e011      	b.n	8008380 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	2220      	movs	r2, #32
 8008360:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	2220      	movs	r2, #32
 8008366:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	2200      	movs	r2, #0
 800836e:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	2200      	movs	r2, #0
 8008374:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	2200      	movs	r2, #0
 800837a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 800837e:	2300      	movs	r3, #0
}
 8008380:	4618      	mov	r0, r3
 8008382:	3758      	adds	r7, #88	; 0x58
 8008384:	46bd      	mov	sp, r7
 8008386:	bd80      	pop	{r7, pc}

08008388 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008388:	b580      	push	{r7, lr}
 800838a:	b084      	sub	sp, #16
 800838c:	af00      	add	r7, sp, #0
 800838e:	60f8      	str	r0, [r7, #12]
 8008390:	60b9      	str	r1, [r7, #8]
 8008392:	603b      	str	r3, [r7, #0]
 8008394:	4613      	mov	r3, r2
 8008396:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008398:	e049      	b.n	800842e <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800839a:	69bb      	ldr	r3, [r7, #24]
 800839c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80083a0:	d045      	beq.n	800842e <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80083a2:	f7fa fb11 	bl	80029c8 <HAL_GetTick>
 80083a6:	4602      	mov	r2, r0
 80083a8:	683b      	ldr	r3, [r7, #0]
 80083aa:	1ad3      	subs	r3, r2, r3
 80083ac:	69ba      	ldr	r2, [r7, #24]
 80083ae:	429a      	cmp	r2, r3
 80083b0:	d302      	bcc.n	80083b8 <UART_WaitOnFlagUntilTimeout+0x30>
 80083b2:	69bb      	ldr	r3, [r7, #24]
 80083b4:	2b00      	cmp	r3, #0
 80083b6:	d101      	bne.n	80083bc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80083b8:	2303      	movs	r3, #3
 80083ba:	e048      	b.n	800844e <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80083bc:	68fb      	ldr	r3, [r7, #12]
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	f003 0304 	and.w	r3, r3, #4
 80083c6:	2b00      	cmp	r3, #0
 80083c8:	d031      	beq.n	800842e <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80083ca:	68fb      	ldr	r3, [r7, #12]
 80083cc:	681b      	ldr	r3, [r3, #0]
 80083ce:	69db      	ldr	r3, [r3, #28]
 80083d0:	f003 0308 	and.w	r3, r3, #8
 80083d4:	2b08      	cmp	r3, #8
 80083d6:	d110      	bne.n	80083fa <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80083d8:	68fb      	ldr	r3, [r7, #12]
 80083da:	681b      	ldr	r3, [r3, #0]
 80083dc:	2208      	movs	r2, #8
 80083de:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80083e0:	68f8      	ldr	r0, [r7, #12]
 80083e2:	f000 f838 	bl	8008456 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80083e6:	68fb      	ldr	r3, [r7, #12]
 80083e8:	2208      	movs	r2, #8
 80083ea:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80083ee:	68fb      	ldr	r3, [r7, #12]
 80083f0:	2200      	movs	r2, #0
 80083f2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 80083f6:	2301      	movs	r3, #1
 80083f8:	e029      	b.n	800844e <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80083fa:	68fb      	ldr	r3, [r7, #12]
 80083fc:	681b      	ldr	r3, [r3, #0]
 80083fe:	69db      	ldr	r3, [r3, #28]
 8008400:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008404:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008408:	d111      	bne.n	800842e <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800840a:	68fb      	ldr	r3, [r7, #12]
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008412:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008414:	68f8      	ldr	r0, [r7, #12]
 8008416:	f000 f81e 	bl	8008456 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800841a:	68fb      	ldr	r3, [r7, #12]
 800841c:	2220      	movs	r2, #32
 800841e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008422:	68fb      	ldr	r3, [r7, #12]
 8008424:	2200      	movs	r2, #0
 8008426:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 800842a:	2303      	movs	r3, #3
 800842c:	e00f      	b.n	800844e <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800842e:	68fb      	ldr	r3, [r7, #12]
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	69da      	ldr	r2, [r3, #28]
 8008434:	68bb      	ldr	r3, [r7, #8]
 8008436:	4013      	ands	r3, r2
 8008438:	68ba      	ldr	r2, [r7, #8]
 800843a:	429a      	cmp	r2, r3
 800843c:	bf0c      	ite	eq
 800843e:	2301      	moveq	r3, #1
 8008440:	2300      	movne	r3, #0
 8008442:	b2db      	uxtb	r3, r3
 8008444:	461a      	mov	r2, r3
 8008446:	79fb      	ldrb	r3, [r7, #7]
 8008448:	429a      	cmp	r2, r3
 800844a:	d0a6      	beq.n	800839a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800844c:	2300      	movs	r3, #0
}
 800844e:	4618      	mov	r0, r3
 8008450:	3710      	adds	r7, #16
 8008452:	46bd      	mov	sp, r7
 8008454:	bd80      	pop	{r7, pc}

08008456 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008456:	b480      	push	{r7}
 8008458:	b095      	sub	sp, #84	; 0x54
 800845a:	af00      	add	r7, sp, #0
 800845c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	681b      	ldr	r3, [r3, #0]
 8008462:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008464:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008466:	e853 3f00 	ldrex	r3, [r3]
 800846a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800846c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800846e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008472:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	461a      	mov	r2, r3
 800847a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800847c:	643b      	str	r3, [r7, #64]	; 0x40
 800847e:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008480:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008482:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008484:	e841 2300 	strex	r3, r2, [r1]
 8008488:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800848a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800848c:	2b00      	cmp	r3, #0
 800848e:	d1e6      	bne.n	800845e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	681b      	ldr	r3, [r3, #0]
 8008494:	3308      	adds	r3, #8
 8008496:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008498:	6a3b      	ldr	r3, [r7, #32]
 800849a:	e853 3f00 	ldrex	r3, [r3]
 800849e:	61fb      	str	r3, [r7, #28]
   return(result);
 80084a0:	69fb      	ldr	r3, [r7, #28]
 80084a2:	f023 0301 	bic.w	r3, r3, #1
 80084a6:	64bb      	str	r3, [r7, #72]	; 0x48
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	681b      	ldr	r3, [r3, #0]
 80084ac:	3308      	adds	r3, #8
 80084ae:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80084b0:	62fa      	str	r2, [r7, #44]	; 0x2c
 80084b2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084b4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80084b6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80084b8:	e841 2300 	strex	r3, r2, [r1]
 80084bc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80084be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084c0:	2b00      	cmp	r3, #0
 80084c2:	d1e5      	bne.n	8008490 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80084c8:	2b01      	cmp	r3, #1
 80084ca:	d118      	bne.n	80084fe <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	681b      	ldr	r3, [r3, #0]
 80084d0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084d2:	68fb      	ldr	r3, [r7, #12]
 80084d4:	e853 3f00 	ldrex	r3, [r3]
 80084d8:	60bb      	str	r3, [r7, #8]
   return(result);
 80084da:	68bb      	ldr	r3, [r7, #8]
 80084dc:	f023 0310 	bic.w	r3, r3, #16
 80084e0:	647b      	str	r3, [r7, #68]	; 0x44
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	681b      	ldr	r3, [r3, #0]
 80084e6:	461a      	mov	r2, r3
 80084e8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80084ea:	61bb      	str	r3, [r7, #24]
 80084ec:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084ee:	6979      	ldr	r1, [r7, #20]
 80084f0:	69ba      	ldr	r2, [r7, #24]
 80084f2:	e841 2300 	strex	r3, r2, [r1]
 80084f6:	613b      	str	r3, [r7, #16]
   return(result);
 80084f8:	693b      	ldr	r3, [r7, #16]
 80084fa:	2b00      	cmp	r3, #0
 80084fc:	d1e6      	bne.n	80084cc <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	2220      	movs	r2, #32
 8008502:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	2200      	movs	r2, #0
 800850a:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	2200      	movs	r2, #0
 8008510:	669a      	str	r2, [r3, #104]	; 0x68
}
 8008512:	bf00      	nop
 8008514:	3754      	adds	r7, #84	; 0x54
 8008516:	46bd      	mov	sp, r7
 8008518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800851c:	4770      	bx	lr

0800851e <bitmap_init>:
    return bitmap->width * (bitmap->depth / 8) * bitmap->height;
};

/* Initialise bitmap with given buffer. */
void bitmap_init(bitmap_t *bitmap, uint8_t *buffer)
{
 800851e:	b480      	push	{r7}
 8008520:	b083      	sub	sp, #12
 8008522:	af00      	add	r7, sp, #0
 8008524:	6078      	str	r0, [r7, #4]
 8008526:	6039      	str	r1, [r7, #0]
    bitmap->pitch = bitmap->width * (bitmap->depth / 8);
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	881a      	ldrh	r2, [r3, #0]
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	799b      	ldrb	r3, [r3, #6]
 8008530:	08db      	lsrs	r3, r3, #3
 8008532:	b2db      	uxtb	r3, r3
 8008534:	b29b      	uxth	r3, r3
 8008536:	fb12 f303 	smulbb	r3, r2, r3
 800853a:	b29a      	uxth	r2, r3
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	809a      	strh	r2, [r3, #4]
    bitmap->size = bitmap->pitch * bitmap->height;
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	889b      	ldrh	r3, [r3, #4]
 8008544:	461a      	mov	r2, r3
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	885b      	ldrh	r3, [r3, #2]
 800854a:	fb02 f303 	mul.w	r3, r2, r3
 800854e:	461a      	mov	r2, r3
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	609a      	str	r2, [r3, #8]
    bitmap->buffer = buffer;
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	683a      	ldr	r2, [r7, #0]
 8008558:	60da      	str	r2, [r3, #12]
}
 800855a:	bf00      	nop
 800855c:	370c      	adds	r7, #12
 800855e:	46bd      	mov	sp, r7
 8008560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008564:	4770      	bx	lr

08008566 <code>:
static const uint8_t RIGHT = 0b0010;
static const uint8_t BOTTOM = 0b0100;
static const uint8_t TOP = 0b1000;

static uint8_t code(int16_t x0, int16_t y0, window_t window)
{
 8008566:	b490      	push	{r4, r7}
 8008568:	b086      	sub	sp, #24
 800856a:	af00      	add	r7, sp, #0
 800856c:	4604      	mov	r4, r0
 800856e:	4608      	mov	r0, r1
 8008570:	1d39      	adds	r1, r7, #4
 8008572:	e881 000c 	stmia.w	r1, {r2, r3}
 8008576:	4623      	mov	r3, r4
 8008578:	81fb      	strh	r3, [r7, #14]
 800857a:	4603      	mov	r3, r0
 800857c:	81bb      	strh	r3, [r7, #12]
    uint8_t code = INSIDE;
 800857e:	2300      	movs	r3, #0
 8008580:	75fb      	strb	r3, [r7, #23]

    if (x0 < window.x0) {
 8008582:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8008586:	88ba      	ldrh	r2, [r7, #4]
 8008588:	4293      	cmp	r3, r2
 800858a:	da04      	bge.n	8008596 <code+0x30>
        code |= LEFT;
 800858c:	2201      	movs	r2, #1
 800858e:	7dfb      	ldrb	r3, [r7, #23]
 8008590:	4313      	orrs	r3, r2
 8008592:	75fb      	strb	r3, [r7, #23]
 8008594:	e008      	b.n	80085a8 <code+0x42>
    } else if (x0 > window.x1) {
 8008596:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800859a:	893a      	ldrh	r2, [r7, #8]
 800859c:	4293      	cmp	r3, r2
 800859e:	dd03      	ble.n	80085a8 <code+0x42>
        code |= RIGHT;
 80085a0:	2202      	movs	r2, #2
 80085a2:	7dfb      	ldrb	r3, [r7, #23]
 80085a4:	4313      	orrs	r3, r2
 80085a6:	75fb      	strb	r3, [r7, #23]
    } if (y0 < window.y0) {
 80085a8:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80085ac:	88fa      	ldrh	r2, [r7, #6]
 80085ae:	4293      	cmp	r3, r2
 80085b0:	da04      	bge.n	80085bc <code+0x56>
        code |= BOTTOM;
 80085b2:	2204      	movs	r2, #4
 80085b4:	7dfb      	ldrb	r3, [r7, #23]
 80085b6:	4313      	orrs	r3, r2
 80085b8:	75fb      	strb	r3, [r7, #23]
 80085ba:	e008      	b.n	80085ce <code+0x68>
    } else if (y0 > window.y1) {
 80085bc:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80085c0:	897a      	ldrh	r2, [r7, #10]
 80085c2:	4293      	cmp	r3, r2
 80085c4:	dd03      	ble.n	80085ce <code+0x68>
        code |= TOP;
 80085c6:	2208      	movs	r2, #8
 80085c8:	7dfb      	ldrb	r3, [r7, #23]
 80085ca:	4313      	orrs	r3, r2
 80085cc:	75fb      	strb	r3, [r7, #23]
    }

    return code;
 80085ce:	7dfb      	ldrb	r3, [r7, #23]
}
 80085d0:	4618      	mov	r0, r3
 80085d2:	3718      	adds	r7, #24
 80085d4:	46bd      	mov	sp, r7
 80085d6:	bc90      	pop	{r4, r7}
 80085d8:	4770      	bx	lr

080085da <clip_line>:

bool clip_line(int16_t *x0, int16_t *y0, int16_t *x1, int16_t *y1, window_t window)
{
 80085da:	b580      	push	{r7, lr}
 80085dc:	b088      	sub	sp, #32
 80085de:	af00      	add	r7, sp, #0
 80085e0:	60f8      	str	r0, [r7, #12]
 80085e2:	60b9      	str	r1, [r7, #8]
 80085e4:	607a      	str	r2, [r7, #4]
 80085e6:	603b      	str	r3, [r7, #0]
    uint8_t code0 = code(*x0, *y0, window);
 80085e8:	68fb      	ldr	r3, [r7, #12]
 80085ea:	f9b3 0000 	ldrsh.w	r0, [r3]
 80085ee:	68bb      	ldr	r3, [r7, #8]
 80085f0:	f9b3 1000 	ldrsh.w	r1, [r3]
 80085f4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80085f8:	cb0c      	ldmia	r3, {r2, r3}
 80085fa:	f7ff ffb4 	bl	8008566 <code>
 80085fe:	4603      	mov	r3, r0
 8008600:	77fb      	strb	r3, [r7, #31]
    uint8_t code1 = code(*x1, *y1, window);
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	f9b3 0000 	ldrsh.w	r0, [r3]
 8008608:	683b      	ldr	r3, [r7, #0]
 800860a:	f9b3 1000 	ldrsh.w	r1, [r3]
 800860e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8008612:	cb0c      	ldmia	r3, {r2, r3}
 8008614:	f7ff ffa7 	bl	8008566 <code>
 8008618:	4603      	mov	r3, r0
 800861a:	77bb      	strb	r3, [r7, #30]

    bool accept = false;
 800861c:	2300      	movs	r3, #0
 800861e:	777b      	strb	r3, [r7, #29]

    while (true) {
        if (!(code0 | code1)) {
 8008620:	7ffa      	ldrb	r2, [r7, #31]
 8008622:	7fbb      	ldrb	r3, [r7, #30]
 8008624:	4313      	orrs	r3, r2
 8008626:	b2db      	uxtb	r3, r3
 8008628:	2b00      	cmp	r3, #0
 800862a:	d102      	bne.n	8008632 <clip_line+0x58>
            /* Both endpoints inside clipping window, trivial accept. */
            accept = true;
 800862c:	2301      	movs	r3, #1
 800862e:	777b      	strb	r3, [r7, #29]
            break;
 8008630:	e0e9      	b.n	8008806 <clip_line+0x22c>
        } else if (code0 & code1) {
 8008632:	7ffa      	ldrb	r2, [r7, #31]
 8008634:	7fbb      	ldrb	r3, [r7, #30]
 8008636:	4013      	ands	r3, r2
 8008638:	b2db      	uxtb	r3, r3
 800863a:	2b00      	cmp	r3, #0
 800863c:	f040 80e2 	bne.w	8008804 <clip_line+0x22a>
            /* Both endpoints outside clipping window, trivial reject. */
            break;
        } else {
            /* Part of line inside clipping window, nontrivial situation. */

            int16_t x = 0;
 8008640:	2300      	movs	r3, #0
 8008642:	837b      	strh	r3, [r7, #26]
            int16_t y = 0;
 8008644:	2300      	movs	r3, #0
 8008646:	833b      	strh	r3, [r7, #24]
            uint8_t code3 = code0 ? code0 : code1;
 8008648:	7ffb      	ldrb	r3, [r7, #31]
 800864a:	2b00      	cmp	r3, #0
 800864c:	d001      	beq.n	8008652 <clip_line+0x78>
 800864e:	7ffb      	ldrb	r3, [r7, #31]
 8008650:	e000      	b.n	8008654 <clip_line+0x7a>
 8008652:	7fbb      	ldrb	r3, [r7, #30]
 8008654:	75fb      	strb	r3, [r7, #23]

            /* Find intersection point. */
            /* slope = (y1 - y0) / (x1 - x0) */
            /* x = x0 + (1 / slope) * (ym - y0), where ym is ymin or ymax */
            /* y = y0 + slope * (xm - x0), where xm is xmin or xmax */
            if (code3 & TOP) {
 8008656:	2208      	movs	r2, #8
 8008658:	7dfb      	ldrb	r3, [r7, #23]
 800865a:	4013      	ands	r3, r2
 800865c:	b2db      	uxtb	r3, r3
 800865e:	2b00      	cmp	r3, #0
 8008660:	d024      	beq.n	80086ac <clip_line+0xd2>
                x = *x0 + (*x1 - *x0) * (window.y1 - *y0) / (*y1 - *y0);
 8008662:	68fb      	ldr	r3, [r7, #12]
 8008664:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008668:	b29a      	uxth	r2, r3
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008670:	4619      	mov	r1, r3
 8008672:	68fb      	ldr	r3, [r7, #12]
 8008674:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008678:	1acb      	subs	r3, r1, r3
 800867a:	8df9      	ldrh	r1, [r7, #46]	; 0x2e
 800867c:	4608      	mov	r0, r1
 800867e:	68b9      	ldr	r1, [r7, #8]
 8008680:	f9b1 1000 	ldrsh.w	r1, [r1]
 8008684:	1a41      	subs	r1, r0, r1
 8008686:	fb03 f101 	mul.w	r1, r3, r1
 800868a:	683b      	ldr	r3, [r7, #0]
 800868c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008690:	4618      	mov	r0, r3
 8008692:	68bb      	ldr	r3, [r7, #8]
 8008694:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008698:	1ac3      	subs	r3, r0, r3
 800869a:	fb91 f3f3 	sdiv	r3, r1, r3
 800869e:	b29b      	uxth	r3, r3
 80086a0:	4413      	add	r3, r2
 80086a2:	b29b      	uxth	r3, r3
 80086a4:	837b      	strh	r3, [r7, #26]
                y = window.y1;
 80086a6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80086a8:	833b      	strh	r3, [r7, #24]
 80086aa:	e07f      	b.n	80087ac <clip_line+0x1d2>
            } else if (code3 & BOTTOM) {
 80086ac:	2204      	movs	r2, #4
 80086ae:	7dfb      	ldrb	r3, [r7, #23]
 80086b0:	4013      	ands	r3, r2
 80086b2:	b2db      	uxtb	r3, r3
 80086b4:	2b00      	cmp	r3, #0
 80086b6:	d024      	beq.n	8008702 <clip_line+0x128>
                x = *x0 + (*x1 - *x0) * (window.y0 - *y0) / (*y1 - *y0);
 80086b8:	68fb      	ldr	r3, [r7, #12]
 80086ba:	f9b3 3000 	ldrsh.w	r3, [r3]
 80086be:	b29a      	uxth	r2, r3
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80086c6:	4619      	mov	r1, r3
 80086c8:	68fb      	ldr	r3, [r7, #12]
 80086ca:	f9b3 3000 	ldrsh.w	r3, [r3]
 80086ce:	1acb      	subs	r3, r1, r3
 80086d0:	8d79      	ldrh	r1, [r7, #42]	; 0x2a
 80086d2:	4608      	mov	r0, r1
 80086d4:	68b9      	ldr	r1, [r7, #8]
 80086d6:	f9b1 1000 	ldrsh.w	r1, [r1]
 80086da:	1a41      	subs	r1, r0, r1
 80086dc:	fb03 f101 	mul.w	r1, r3, r1
 80086e0:	683b      	ldr	r3, [r7, #0]
 80086e2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80086e6:	4618      	mov	r0, r3
 80086e8:	68bb      	ldr	r3, [r7, #8]
 80086ea:	f9b3 3000 	ldrsh.w	r3, [r3]
 80086ee:	1ac3      	subs	r3, r0, r3
 80086f0:	fb91 f3f3 	sdiv	r3, r1, r3
 80086f4:	b29b      	uxth	r3, r3
 80086f6:	4413      	add	r3, r2
 80086f8:	b29b      	uxth	r3, r3
 80086fa:	837b      	strh	r3, [r7, #26]
                y = window.y0;
 80086fc:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80086fe:	833b      	strh	r3, [r7, #24]
 8008700:	e054      	b.n	80087ac <clip_line+0x1d2>
            } else if (code3 & RIGHT) {
 8008702:	2202      	movs	r2, #2
 8008704:	7dfb      	ldrb	r3, [r7, #23]
 8008706:	4013      	ands	r3, r2
 8008708:	b2db      	uxtb	r3, r3
 800870a:	2b00      	cmp	r3, #0
 800870c:	d024      	beq.n	8008758 <clip_line+0x17e>
                y = *y0 + (*y1 - *y0) * (window.x1 - *x0) / (*x1 - *x0);
 800870e:	68bb      	ldr	r3, [r7, #8]
 8008710:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008714:	b29a      	uxth	r2, r3
 8008716:	683b      	ldr	r3, [r7, #0]
 8008718:	f9b3 3000 	ldrsh.w	r3, [r3]
 800871c:	4619      	mov	r1, r3
 800871e:	68bb      	ldr	r3, [r7, #8]
 8008720:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008724:	1acb      	subs	r3, r1, r3
 8008726:	8db9      	ldrh	r1, [r7, #44]	; 0x2c
 8008728:	4608      	mov	r0, r1
 800872a:	68f9      	ldr	r1, [r7, #12]
 800872c:	f9b1 1000 	ldrsh.w	r1, [r1]
 8008730:	1a41      	subs	r1, r0, r1
 8008732:	fb03 f101 	mul.w	r1, r3, r1
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	f9b3 3000 	ldrsh.w	r3, [r3]
 800873c:	4618      	mov	r0, r3
 800873e:	68fb      	ldr	r3, [r7, #12]
 8008740:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008744:	1ac3      	subs	r3, r0, r3
 8008746:	fb91 f3f3 	sdiv	r3, r1, r3
 800874a:	b29b      	uxth	r3, r3
 800874c:	4413      	add	r3, r2
 800874e:	b29b      	uxth	r3, r3
 8008750:	833b      	strh	r3, [r7, #24]
                x = window.x1;
 8008752:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8008754:	837b      	strh	r3, [r7, #26]
 8008756:	e029      	b.n	80087ac <clip_line+0x1d2>
            }  else if (code3 & LEFT) {
 8008758:	2201      	movs	r2, #1
 800875a:	7dfb      	ldrb	r3, [r7, #23]
 800875c:	4013      	ands	r3, r2
 800875e:	b2db      	uxtb	r3, r3
 8008760:	2b00      	cmp	r3, #0
 8008762:	d023      	beq.n	80087ac <clip_line+0x1d2>
                y = *y0 + (*y1 - *y0) * (window.x0 - *x0) / (*x1 - *x0);
 8008764:	68bb      	ldr	r3, [r7, #8]
 8008766:	f9b3 3000 	ldrsh.w	r3, [r3]
 800876a:	b29a      	uxth	r2, r3
 800876c:	683b      	ldr	r3, [r7, #0]
 800876e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008772:	4619      	mov	r1, r3
 8008774:	68bb      	ldr	r3, [r7, #8]
 8008776:	f9b3 3000 	ldrsh.w	r3, [r3]
 800877a:	1acb      	subs	r3, r1, r3
 800877c:	8d39      	ldrh	r1, [r7, #40]	; 0x28
 800877e:	4608      	mov	r0, r1
 8008780:	68f9      	ldr	r1, [r7, #12]
 8008782:	f9b1 1000 	ldrsh.w	r1, [r1]
 8008786:	1a41      	subs	r1, r0, r1
 8008788:	fb03 f101 	mul.w	r1, r3, r1
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008792:	4618      	mov	r0, r3
 8008794:	68fb      	ldr	r3, [r7, #12]
 8008796:	f9b3 3000 	ldrsh.w	r3, [r3]
 800879a:	1ac3      	subs	r3, r0, r3
 800879c:	fb91 f3f3 	sdiv	r3, r1, r3
 80087a0:	b29b      	uxth	r3, r3
 80087a2:	4413      	add	r3, r2
 80087a4:	b29b      	uxth	r3, r3
 80087a6:	833b      	strh	r3, [r7, #24]
                x = window.x0;
 80087a8:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80087aa:	837b      	strh	r3, [r7, #26]
            }

            /* Replace the outside point with the intersection point. */
            if (code3 == code0) {
 80087ac:	7dfa      	ldrb	r2, [r7, #23]
 80087ae:	7ffb      	ldrb	r3, [r7, #31]
 80087b0:	429a      	cmp	r2, r3
 80087b2:	d113      	bne.n	80087dc <clip_line+0x202>
                *x0 = x;
 80087b4:	68fb      	ldr	r3, [r7, #12]
 80087b6:	8b7a      	ldrh	r2, [r7, #26]
 80087b8:	801a      	strh	r2, [r3, #0]
                *y0 = y;
 80087ba:	68bb      	ldr	r3, [r7, #8]
 80087bc:	8b3a      	ldrh	r2, [r7, #24]
 80087be:	801a      	strh	r2, [r3, #0]
                code0 = code(*x0, *y0, window);
 80087c0:	68fb      	ldr	r3, [r7, #12]
 80087c2:	f9b3 0000 	ldrsh.w	r0, [r3]
 80087c6:	68bb      	ldr	r3, [r7, #8]
 80087c8:	f9b3 1000 	ldrsh.w	r1, [r3]
 80087cc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80087d0:	cb0c      	ldmia	r3, {r2, r3}
 80087d2:	f7ff fec8 	bl	8008566 <code>
 80087d6:	4603      	mov	r3, r0
 80087d8:	77fb      	strb	r3, [r7, #31]
 80087da:	e721      	b.n	8008620 <clip_line+0x46>
            } else {
                *x1 = x;
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	8b7a      	ldrh	r2, [r7, #26]
 80087e0:	801a      	strh	r2, [r3, #0]
                *y1 = y;
 80087e2:	683b      	ldr	r3, [r7, #0]
 80087e4:	8b3a      	ldrh	r2, [r7, #24]
 80087e6:	801a      	strh	r2, [r3, #0]
                code1 = code(*x1, *y1, window);
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	f9b3 0000 	ldrsh.w	r0, [r3]
 80087ee:	683b      	ldr	r3, [r7, #0]
 80087f0:	f9b3 1000 	ldrsh.w	r1, [r3]
 80087f4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80087f8:	cb0c      	ldmia	r3, {r2, r3}
 80087fa:	f7ff feb4 	bl	8008566 <code>
 80087fe:	4603      	mov	r3, r0
 8008800:	77bb      	strb	r3, [r7, #30]
        if (!(code0 | code1)) {
 8008802:	e70d      	b.n	8008620 <clip_line+0x46>
            break;
 8008804:	bf00      	nop
            }
        }
    }

    return accept;
 8008806:	7f7b      	ldrb	r3, [r7, #29]
 8008808:	4618      	mov	r0, r3
 800880a:	3720      	adds	r7, #32
 800880c:	46bd      	mov	sp, r7
 800880e:	bd80      	pop	{r7, pc}

08008810 <fontx_meta>:
#include <stddef.h>
#include <string.h>

#include "fontx.h"

uint8_t fontx_meta(fontx_meta_t *meta, const uint8_t *font) {
 8008810:	b580      	push	{r7, lr}
 8008812:	b082      	sub	sp, #8
 8008814:	af00      	add	r7, sp, #0
 8008816:	6078      	str	r0, [r7, #4]
 8008818:	6039      	str	r1, [r7, #0]

    memcpy(meta->name, &font[FONTX_NAME], 8);
 800881a:	6878      	ldr	r0, [r7, #4]
 800881c:	683b      	ldr	r3, [r7, #0]
 800881e:	3306      	adds	r3, #6
 8008820:	2208      	movs	r2, #8
 8008822:	4619      	mov	r1, r3
 8008824:	f001 fac1 	bl	8009daa <memcpy>
    meta->width = font[FONTX_WIDTH];
 8008828:	683b      	ldr	r3, [r7, #0]
 800882a:	330e      	adds	r3, #14
 800882c:	781a      	ldrb	r2, [r3, #0]
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	725a      	strb	r2, [r3, #9]
    meta->height = font[FONTX_HEIGHT];
 8008832:	683b      	ldr	r3, [r7, #0]
 8008834:	330f      	adds	r3, #15
 8008836:	781a      	ldrb	r2, [r3, #0]
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	729a      	strb	r2, [r3, #10]
    meta->type = font[FONTX_TYPE];
 800883c:	683b      	ldr	r3, [r7, #0]
 800883e:	3310      	adds	r3, #16
 8008840:	781a      	ldrb	r2, [r3, #0]
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	72da      	strb	r2, [r3, #11]

    return 0;
 8008846:	2300      	movs	r3, #0
}
 8008848:	4618      	mov	r0, r3
 800884a:	3708      	adds	r7, #8
 800884c:	46bd      	mov	sp, r7
 800884e:	bd80      	pop	{r7, pc}

08008850 <fontx_glyph>:


uint8_t fontx_glyph(fontx_glyph_t *glyph, wchar_t code, const uint8_t* font) {
 8008850:	b580      	push	{r7, lr}
 8008852:	b08e      	sub	sp, #56	; 0x38
 8008854:	af00      	add	r7, sp, #0
 8008856:	60f8      	str	r0, [r7, #12]
 8008858:	60b9      	str	r1, [r7, #8]
 800885a:	607a      	str	r2, [r7, #4]
    uint32_t nc, bc, sb, eb;
    uint8_t status;
    const uint8_t *block_table;
    fontx_meta_t meta;

    status = fontx_meta(&meta, font);
 800885c:	f107 0314 	add.w	r3, r7, #20
 8008860:	6879      	ldr	r1, [r7, #4]
 8008862:	4618      	mov	r0, r3
 8008864:	f7ff ffd4 	bl	8008810 <fontx_meta>
 8008868:	4603      	mov	r3, r0
 800886a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    if (0 != status) {
 800886e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8008872:	2b00      	cmp	r3, #0
 8008874:	d002      	beq.n	800887c <fontx_glyph+0x2c>
        return status;
 8008876:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800887a:	e077      	b.n	800896c <fontx_glyph+0x11c>
    }

    glyph->width = meta.width;
 800887c:	7f7a      	ldrb	r2, [r7, #29]
 800887e:	68fb      	ldr	r3, [r7, #12]
 8008880:	701a      	strb	r2, [r3, #0]
    glyph->height = meta.height;
 8008882:	7fba      	ldrb	r2, [r7, #30]
 8008884:	68fb      	ldr	r3, [r7, #12]
 8008886:	705a      	strb	r2, [r3, #1]
    glyph->pitch = (meta.width + 7) / 8;
 8008888:	7f7b      	ldrb	r3, [r7, #29]
 800888a:	3307      	adds	r3, #7
 800888c:	2b00      	cmp	r3, #0
 800888e:	da00      	bge.n	8008892 <fontx_glyph+0x42>
 8008890:	3307      	adds	r3, #7
 8008892:	10db      	asrs	r3, r3, #3
 8008894:	b2da      	uxtb	r2, r3
 8008896:	68fb      	ldr	r3, [r7, #12]
 8008898:	70da      	strb	r2, [r3, #3]
    glyph->size = glyph->pitch * meta.height;
 800889a:	68fb      	ldr	r3, [r7, #12]
 800889c:	78da      	ldrb	r2, [r3, #3]
 800889e:	7fbb      	ldrb	r3, [r7, #30]
 80088a0:	fb12 f303 	smulbb	r3, r2, r3
 80088a4:	b2da      	uxtb	r2, r3
 80088a6:	68fb      	ldr	r3, [r7, #12]
 80088a8:	709a      	strb	r2, [r3, #2]

    if (FONTX_TYPE_SBCS == meta.type) {
 80088aa:	7ffb      	ldrb	r3, [r7, #31]
 80088ac:	2b00      	cmp	r3, #0
 80088ae:	d10f      	bne.n	80088d0 <fontx_glyph+0x80>
        if (code < 0x100) {
 80088b0:	68bb      	ldr	r3, [r7, #8]
 80088b2:	2bff      	cmp	r3, #255	; 0xff
 80088b4:	d859      	bhi.n	800896a <fontx_glyph+0x11a>
            glyph->buffer = &font[FONTX_GLYPH_DATA_START + code * glyph->size];
 80088b6:	68fb      	ldr	r3, [r7, #12]
 80088b8:	789b      	ldrb	r3, [r3, #2]
 80088ba:	461a      	mov	r2, r3
 80088bc:	68bb      	ldr	r3, [r7, #8]
 80088be:	fb02 f303 	mul.w	r3, r2, r3
 80088c2:	3311      	adds	r3, #17
 80088c4:	687a      	ldr	r2, [r7, #4]
 80088c6:	441a      	add	r2, r3
 80088c8:	68fb      	ldr	r3, [r7, #12]
 80088ca:	605a      	str	r2, [r3, #4]
            return FONTX_OK;
 80088cc:	2300      	movs	r3, #0
 80088ce:	e04d      	b.n	800896c <fontx_glyph+0x11c>
        }
    } else {
        block_table = &font[FONTX_BLOCK_TABLE_START];
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	3312      	adds	r3, #18
 80088d4:	62fb      	str	r3, [r7, #44]	; 0x2c
        nc = 0;
 80088d6:	2300      	movs	r3, #0
 80088d8:	637b      	str	r3, [r7, #52]	; 0x34
        bc = font[FONTX_BLOCK_TABLE_SIZE];
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	3311      	adds	r3, #17
 80088de:	781b      	ldrb	r3, [r3, #0]
 80088e0:	633b      	str	r3, [r7, #48]	; 0x30
        while (bc--) {
 80088e2:	e03d      	b.n	8008960 <fontx_glyph+0x110>
            /* Get range of the code block_table. */
            sb = block_table[0] + block_table[1] * 0x100;
 80088e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80088e6:	781b      	ldrb	r3, [r3, #0]
 80088e8:	461a      	mov	r2, r3
 80088ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80088ec:	3301      	adds	r3, #1
 80088ee:	781b      	ldrb	r3, [r3, #0]
 80088f0:	021b      	lsls	r3, r3, #8
 80088f2:	4413      	add	r3, r2
 80088f4:	627b      	str	r3, [r7, #36]	; 0x24
            eb = block_table[2] + block_table[3] * 0x100;
 80088f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80088f8:	3302      	adds	r3, #2
 80088fa:	781b      	ldrb	r3, [r3, #0]
 80088fc:	461a      	mov	r2, r3
 80088fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008900:	3303      	adds	r3, #3
 8008902:	781b      	ldrb	r3, [r3, #0]
 8008904:	021b      	lsls	r3, r3, #8
 8008906:	4413      	add	r3, r2
 8008908:	623b      	str	r3, [r7, #32]

             /* Check if in the code block_table. */
            if (code >= sb && code <= eb) {
 800890a:	68ba      	ldr	r2, [r7, #8]
 800890c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800890e:	429a      	cmp	r2, r3
 8008910:	d31c      	bcc.n	800894c <fontx_glyph+0xfc>
 8008912:	68ba      	ldr	r2, [r7, #8]
 8008914:	6a3b      	ldr	r3, [r7, #32]
 8008916:	429a      	cmp	r2, r3
 8008918:	d818      	bhi.n	800894c <fontx_glyph+0xfc>
                /* Number of codes from top of the block_table. */
                nc += code - sb;
 800891a:	68ba      	ldr	r2, [r7, #8]
 800891c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800891e:	1ad3      	subs	r3, r2, r3
 8008920:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008922:	4413      	add	r3, r2
 8008924:	637b      	str	r3, [r7, #52]	; 0x34
                glyph->buffer = &font[
                    FONTX_BLOCK_TABLE_START +
                    4 * font[FONTX_BLOCK_TABLE_SIZE] +
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	3311      	adds	r3, #17
 800892a:	781b      	ldrb	r3, [r3, #0]
 800892c:	009b      	lsls	r3, r3, #2
 800892e:	461a      	mov	r2, r3
                    nc * glyph->size
 8008930:	68fb      	ldr	r3, [r7, #12]
 8008932:	789b      	ldrb	r3, [r3, #2]
 8008934:	4619      	mov	r1, r3
 8008936:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008938:	fb01 f303 	mul.w	r3, r1, r3
                    4 * font[FONTX_BLOCK_TABLE_SIZE] +
 800893c:	4413      	add	r3, r2
 800893e:	3312      	adds	r3, #18
                glyph->buffer = &font[
 8008940:	687a      	ldr	r2, [r7, #4]
 8008942:	441a      	add	r2, r3
 8008944:	68fb      	ldr	r3, [r7, #12]
 8008946:	605a      	str	r2, [r3, #4]
                ];
                return FONTX_OK;
 8008948:	2300      	movs	r3, #0
 800894a:	e00f      	b.n	800896c <fontx_glyph+0x11c>
            }
            /* Number of codes in the previous block_tables. */
            nc += eb - sb + 1;
 800894c:	6a3a      	ldr	r2, [r7, #32]
 800894e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008950:	1ad2      	subs	r2, r2, r3
 8008952:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008954:	4413      	add	r3, r2
 8008956:	3301      	adds	r3, #1
 8008958:	637b      	str	r3, [r7, #52]	; 0x34
            /* Next code block_table. */
            block_table += 4;
 800895a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800895c:	3304      	adds	r3, #4
 800895e:	62fb      	str	r3, [r7, #44]	; 0x2c
        while (bc--) {
 8008960:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008962:	1e5a      	subs	r2, r3, #1
 8008964:	633a      	str	r2, [r7, #48]	; 0x30
 8008966:	2b00      	cmp	r3, #0
 8008968:	d1bc      	bne.n	80088e4 <fontx_glyph+0x94>
        }
    }

    return FONTX_ERR_GLYPH_NOT_FOUND;
 800896a:	2301      	movs	r3, #1
 800896c:	4618      	mov	r0, r3
 800896e:	3738      	adds	r7, #56	; 0x38
 8008970:	46bd      	mov	sp, r7
 8008972:	bd80      	pop	{r7, pc}

08008974 <min>:
#include "hsl.h"

hsl_t rgb888_to_hsl(rgb_t *rgb);
uint16_t rgb888_to_rgb565(rgb_t *input);

static inline int min(int a, int b) {
 8008974:	b480      	push	{r7}
 8008976:	b083      	sub	sp, #12
 8008978:	af00      	add	r7, sp, #0
 800897a:	6078      	str	r0, [r7, #4]
 800897c:	6039      	str	r1, [r7, #0]
    if (a > b) {
 800897e:	687a      	ldr	r2, [r7, #4]
 8008980:	683b      	ldr	r3, [r7, #0]
 8008982:	429a      	cmp	r2, r3
 8008984:	dd01      	ble.n	800898a <min+0x16>
        return b;
 8008986:	683b      	ldr	r3, [r7, #0]
 8008988:	e000      	b.n	800898c <min+0x18>
    };
    return a;
 800898a:	687b      	ldr	r3, [r7, #4]
}
 800898c:	4618      	mov	r0, r3
 800898e:	370c      	adds	r7, #12
 8008990:	46bd      	mov	sp, r7
 8008992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008996:	4770      	bx	lr

08008998 <max>:

static inline int max(int a, int b) {
 8008998:	b480      	push	{r7}
 800899a:	b083      	sub	sp, #12
 800899c:	af00      	add	r7, sp, #0
 800899e:	6078      	str	r0, [r7, #4]
 80089a0:	6039      	str	r1, [r7, #0]
    if (a > b) {
 80089a2:	687a      	ldr	r2, [r7, #4]
 80089a4:	683b      	ldr	r3, [r7, #0]
 80089a6:	429a      	cmp	r2, r3
 80089a8:	dd01      	ble.n	80089ae <max+0x16>
        return a;
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	e000      	b.n	80089b0 <max+0x18>
    }
    return b;
 80089ae:	683b      	ldr	r3, [r7, #0]
}
 80089b0:	4618      	mov	r0, r3
 80089b2:	370c      	adds	r7, #12
 80089b4:	46bd      	mov	sp, r7
 80089b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089ba:	4770      	bx	lr

080089bc <hagl_put_pixel>:
    clip_window.x1 = x1;
    clip_window.y1 = y1;
}

void hagl_put_pixel(int16_t x0, int16_t y0, color_t color)
{
 80089bc:	b580      	push	{r7, lr}
 80089be:	b082      	sub	sp, #8
 80089c0:	af00      	add	r7, sp, #0
 80089c2:	4603      	mov	r3, r0
 80089c4:	80fb      	strh	r3, [r7, #6]
 80089c6:	460b      	mov	r3, r1
 80089c8:	80bb      	strh	r3, [r7, #4]
 80089ca:	4613      	mov	r3, r2
 80089cc:	807b      	strh	r3, [r7, #2]
    /* x0 or y0 is before the edge, nothing to do. */
    if ((x0 < clip_window.x0) || (y0 < clip_window.y0))  {
 80089ce:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80089d2:	4a12      	ldr	r2, [pc, #72]	; (8008a1c <hagl_put_pixel+0x60>)
 80089d4:	8812      	ldrh	r2, [r2, #0]
 80089d6:	4293      	cmp	r3, r2
 80089d8:	db1a      	blt.n	8008a10 <hagl_put_pixel+0x54>
 80089da:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80089de:	4a0f      	ldr	r2, [pc, #60]	; (8008a1c <hagl_put_pixel+0x60>)
 80089e0:	8852      	ldrh	r2, [r2, #2]
 80089e2:	4293      	cmp	r3, r2
 80089e4:	db14      	blt.n	8008a10 <hagl_put_pixel+0x54>
        return;
    }

    /* x0 or y0 is after the edge, nothing to do. */
    if ((x0 > clip_window.x1) || (y0 > clip_window.y1)) {
 80089e6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80089ea:	4a0c      	ldr	r2, [pc, #48]	; (8008a1c <hagl_put_pixel+0x60>)
 80089ec:	8892      	ldrh	r2, [r2, #4]
 80089ee:	4293      	cmp	r3, r2
 80089f0:	dc10      	bgt.n	8008a14 <hagl_put_pixel+0x58>
 80089f2:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80089f6:	4a09      	ldr	r2, [pc, #36]	; (8008a1c <hagl_put_pixel+0x60>)
 80089f8:	88d2      	ldrh	r2, [r2, #6]
 80089fa:	4293      	cmp	r3, r2
 80089fc:	dc0a      	bgt.n	8008a14 <hagl_put_pixel+0x58>
        return;
    }

    /* If still in bounds set the pixel. */
    hagl_hal_put_pixel(x0, y0, color);
 80089fe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8008a02:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8008a06:	887a      	ldrh	r2, [r7, #2]
 8008a08:	4618      	mov	r0, r3
 8008a0a:	f7f8 fcbb 	bl	8001384 <lcd_put_pixel>
 8008a0e:	e002      	b.n	8008a16 <hagl_put_pixel+0x5a>
        return;
 8008a10:	bf00      	nop
 8008a12:	e000      	b.n	8008a16 <hagl_put_pixel+0x5a>
        return;
 8008a14:	bf00      	nop
}
 8008a16:	3708      	adds	r7, #8
 8008a18:	46bd      	mov	sp, r7
 8008a1a:	bd80      	pop	{r7, pc}
 8008a1c:	20000010 	.word	0x20000010

08008a20 <hagl_draw_hline>:
#else
    return hagl_color(0, 0, 0);
#endif /* HAGL_HAS_HAL_GET_PIXEL */
}

void hagl_draw_hline(int16_t x0, int16_t y0, uint16_t w, color_t color) {
 8008a20:	b590      	push	{r4, r7, lr}
 8008a22:	b085      	sub	sp, #20
 8008a24:	af02      	add	r7, sp, #8
 8008a26:	4604      	mov	r4, r0
 8008a28:	4608      	mov	r0, r1
 8008a2a:	4611      	mov	r1, r2
 8008a2c:	461a      	mov	r2, r3
 8008a2e:	4623      	mov	r3, r4
 8008a30:	80fb      	strh	r3, [r7, #6]
 8008a32:	4603      	mov	r3, r0
 8008a34:	80bb      	strh	r3, [r7, #4]
 8008a36:	460b      	mov	r3, r1
 8008a38:	807b      	strh	r3, [r7, #2]
 8008a3a:	4613      	mov	r3, r2
 8008a3c:	803b      	strh	r3, [r7, #0]
        width = width - (x0 + width - clip_window.x1);
    }

    hagl_hal_hline(x0, y0, width, color);
#else
    hagl_draw_line(x0, y0, x0 + w, y0, color);
 8008a3e:	88fa      	ldrh	r2, [r7, #6]
 8008a40:	887b      	ldrh	r3, [r7, #2]
 8008a42:	4413      	add	r3, r2
 8008a44:	b29b      	uxth	r3, r3
 8008a46:	b21a      	sxth	r2, r3
 8008a48:	f9b7 4004 	ldrsh.w	r4, [r7, #4]
 8008a4c:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8008a50:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8008a54:	883b      	ldrh	r3, [r7, #0]
 8008a56:	9300      	str	r3, [sp, #0]
 8008a58:	4623      	mov	r3, r4
 8008a5a:	f000 f805 	bl	8008a68 <hagl_draw_line>
#endif
}
 8008a5e:	bf00      	nop
 8008a60:	370c      	adds	r7, #12
 8008a62:	46bd      	mov	sp, r7
 8008a64:	bd90      	pop	{r4, r7, pc}
	...

08008a68 <hagl_draw_line>:

/*
 * Draw a line using Bresenham's algorithm with given color.
 */
void hagl_draw_line(int16_t x0, int16_t y0, int16_t x1, int16_t y1, color_t color)
{
 8008a68:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008a6a:	b089      	sub	sp, #36	; 0x24
 8008a6c:	af02      	add	r7, sp, #8
 8008a6e:	4604      	mov	r4, r0
 8008a70:	4608      	mov	r0, r1
 8008a72:	4611      	mov	r1, r2
 8008a74:	461a      	mov	r2, r3
 8008a76:	4623      	mov	r3, r4
 8008a78:	80fb      	strh	r3, [r7, #6]
 8008a7a:	4603      	mov	r3, r0
 8008a7c:	80bb      	strh	r3, [r7, #4]
 8008a7e:	460b      	mov	r3, r1
 8008a80:	807b      	strh	r3, [r7, #2]
 8008a82:	4613      	mov	r3, r2
 8008a84:	803b      	strh	r3, [r7, #0]
    /* Clip coordinates to fit clip window. */
    if (false == clip_line(&x0, &y0, &x1, &y1, clip_window)) {
 8008a86:	463b      	mov	r3, r7
 8008a88:	1cba      	adds	r2, r7, #2
 8008a8a:	1d3d      	adds	r5, r7, #4
 8008a8c:	1dbc      	adds	r4, r7, #6
 8008a8e:	494a      	ldr	r1, [pc, #296]	; (8008bb8 <hagl_draw_line+0x150>)
 8008a90:	466e      	mov	r6, sp
 8008a92:	c903      	ldmia	r1, {r0, r1}
 8008a94:	e886 0003 	stmia.w	r6, {r0, r1}
 8008a98:	4629      	mov	r1, r5
 8008a9a:	4620      	mov	r0, r4
 8008a9c:	f7ff fd9d 	bl	80085da <clip_line>
 8008aa0:	4603      	mov	r3, r0
 8008aa2:	f083 0301 	eor.w	r3, r3, #1
 8008aa6:	b2db      	uxtb	r3, r3
 8008aa8:	2b00      	cmp	r3, #0
 8008aaa:	d17e      	bne.n	8008baa <hagl_draw_line+0x142>
    int16_t dy;
    int16_t sy;
    int16_t err;
    int16_t e2;

    dx = ABS(x1 - x0);
 8008aac:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8008ab0:	461a      	mov	r2, r3
 8008ab2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8008ab6:	1ad3      	subs	r3, r2, r3
 8008ab8:	2b00      	cmp	r3, #0
 8008aba:	bfb8      	it	lt
 8008abc:	425b      	neglt	r3, r3
 8008abe:	82bb      	strh	r3, [r7, #20]
    sx = x0 < x1 ? 1 : -1;
 8008ac0:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8008ac4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8008ac8:	429a      	cmp	r2, r3
 8008aca:	da01      	bge.n	8008ad0 <hagl_draw_line+0x68>
 8008acc:	2301      	movs	r3, #1
 8008ace:	e001      	b.n	8008ad4 <hagl_draw_line+0x6c>
 8008ad0:	f04f 33ff 	mov.w	r3, #4294967295
 8008ad4:	827b      	strh	r3, [r7, #18]
    dy = ABS(y1 - y0);
 8008ad6:	f9b7 3000 	ldrsh.w	r3, [r7]
 8008ada:	461a      	mov	r2, r3
 8008adc:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8008ae0:	1ad3      	subs	r3, r2, r3
 8008ae2:	2b00      	cmp	r3, #0
 8008ae4:	bfb8      	it	lt
 8008ae6:	425b      	neglt	r3, r3
 8008ae8:	823b      	strh	r3, [r7, #16]
    sy = y0 < y1 ? 1 : -1;
 8008aea:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8008aee:	f9b7 3000 	ldrsh.w	r3, [r7]
 8008af2:	429a      	cmp	r2, r3
 8008af4:	da01      	bge.n	8008afa <hagl_draw_line+0x92>
 8008af6:	2301      	movs	r3, #1
 8008af8:	e001      	b.n	8008afe <hagl_draw_line+0x96>
 8008afa:	f04f 33ff 	mov.w	r3, #4294967295
 8008afe:	81fb      	strh	r3, [r7, #14]
    err = (dx > dy ? dx : -dy) / 2;
 8008b00:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8008b04:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8008b08:	429a      	cmp	r2, r3
 8008b0a:	dd06      	ble.n	8008b1a <hagl_draw_line+0xb2>
 8008b0c:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8008b10:	0fda      	lsrs	r2, r3, #31
 8008b12:	4413      	add	r3, r2
 8008b14:	105b      	asrs	r3, r3, #1
 8008b16:	b21b      	sxth	r3, r3
 8008b18:	e006      	b.n	8008b28 <hagl_draw_line+0xc0>
 8008b1a:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8008b1e:	0fda      	lsrs	r2, r3, #31
 8008b20:	4413      	add	r3, r2
 8008b22:	105b      	asrs	r3, r3, #1
 8008b24:	425b      	negs	r3, r3
 8008b26:	b21b      	sxth	r3, r3
 8008b28:	82fb      	strh	r3, [r7, #22]

    while (1) {
        hagl_put_pixel(x0, y0, color);
 8008b2a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8008b2e:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8008b32:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 8008b34:	4618      	mov	r0, r3
 8008b36:	f7ff ff41 	bl	80089bc <hagl_put_pixel>

        if (x0 == x1 && y0 == y1) {
 8008b3a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8008b3e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8008b42:	429a      	cmp	r2, r3
 8008b44:	d105      	bne.n	8008b52 <hagl_draw_line+0xea>
 8008b46:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8008b4a:	f9b7 3000 	ldrsh.w	r3, [r7]
 8008b4e:	429a      	cmp	r2, r3
 8008b50:	d02d      	beq.n	8008bae <hagl_draw_line+0x146>
            break;
        };

        e2 = err + err;
 8008b52:	8afb      	ldrh	r3, [r7, #22]
 8008b54:	005b      	lsls	r3, r3, #1
 8008b56:	b29b      	uxth	r3, r3
 8008b58:	81bb      	strh	r3, [r7, #12]

        if (e2 > -dx) {
 8008b5a:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8008b5e:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8008b62:	425b      	negs	r3, r3
 8008b64:	429a      	cmp	r2, r3
 8008b66:	dd0c      	ble.n	8008b82 <hagl_draw_line+0x11a>
            err -= dy;
 8008b68:	8afa      	ldrh	r2, [r7, #22]
 8008b6a:	8a3b      	ldrh	r3, [r7, #16]
 8008b6c:	1ad3      	subs	r3, r2, r3
 8008b6e:	b29b      	uxth	r3, r3
 8008b70:	82fb      	strh	r3, [r7, #22]
            x0 += sx;
 8008b72:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8008b76:	b29a      	uxth	r2, r3
 8008b78:	8a7b      	ldrh	r3, [r7, #18]
 8008b7a:	4413      	add	r3, r2
 8008b7c:	b29b      	uxth	r3, r3
 8008b7e:	b21b      	sxth	r3, r3
 8008b80:	80fb      	strh	r3, [r7, #6]
        }

        if (e2 < dy) {
 8008b82:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8008b86:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8008b8a:	429a      	cmp	r2, r3
 8008b8c:	dacd      	bge.n	8008b2a <hagl_draw_line+0xc2>
            err += dx;
 8008b8e:	8afa      	ldrh	r2, [r7, #22]
 8008b90:	8abb      	ldrh	r3, [r7, #20]
 8008b92:	4413      	add	r3, r2
 8008b94:	b29b      	uxth	r3, r3
 8008b96:	82fb      	strh	r3, [r7, #22]
            y0 += sy;
 8008b98:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8008b9c:	b29a      	uxth	r2, r3
 8008b9e:	89fb      	ldrh	r3, [r7, #14]
 8008ba0:	4413      	add	r3, r2
 8008ba2:	b29b      	uxth	r3, r3
 8008ba4:	b21b      	sxth	r3, r3
 8008ba6:	80bb      	strh	r3, [r7, #4]
        hagl_put_pixel(x0, y0, color);
 8008ba8:	e7bf      	b.n	8008b2a <hagl_draw_line+0xc2>
        return;
 8008baa:	bf00      	nop
 8008bac:	e000      	b.n	8008bb0 <hagl_draw_line+0x148>
            break;
 8008bae:	bf00      	nop
        }
    }
}
 8008bb0:	371c      	adds	r7, #28
 8008bb2:	46bd      	mov	sp, r7
 8008bb4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008bb6:	bf00      	nop
 8008bb8:	20000010 	.word	0x20000010

08008bbc <hagl_fill_rectangle>:

/*
 * Draw a filled rectangle with given color.
 */
void hagl_fill_rectangle(int16_t x0, int16_t y0, int16_t x1, int16_t y1, color_t color)
{
 8008bbc:	b590      	push	{r4, r7, lr}
 8008bbe:	b085      	sub	sp, #20
 8008bc0:	af00      	add	r7, sp, #0
 8008bc2:	4604      	mov	r4, r0
 8008bc4:	4608      	mov	r0, r1
 8008bc6:	4611      	mov	r1, r2
 8008bc8:	461a      	mov	r2, r3
 8008bca:	4623      	mov	r3, r4
 8008bcc:	80fb      	strh	r3, [r7, #6]
 8008bce:	4603      	mov	r3, r0
 8008bd0:	80bb      	strh	r3, [r7, #4]
 8008bd2:	460b      	mov	r3, r1
 8008bd4:	807b      	strh	r3, [r7, #2]
 8008bd6:	4613      	mov	r3, r2
 8008bd8:	803b      	strh	r3, [r7, #0]
    /* Make sure x0 is smaller than x1. */
    if (x0 > x1) {
 8008bda:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8008bde:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8008be2:	429a      	cmp	r2, r3
 8008be4:	dd0e      	ble.n	8008c04 <hagl_fill_rectangle+0x48>
        x0 = x0 + x1;
 8008be6:	88fa      	ldrh	r2, [r7, #6]
 8008be8:	887b      	ldrh	r3, [r7, #2]
 8008bea:	4413      	add	r3, r2
 8008bec:	b29b      	uxth	r3, r3
 8008bee:	80fb      	strh	r3, [r7, #6]
        x1 = x0 - x1;
 8008bf0:	88fa      	ldrh	r2, [r7, #6]
 8008bf2:	887b      	ldrh	r3, [r7, #2]
 8008bf4:	1ad3      	subs	r3, r2, r3
 8008bf6:	b29b      	uxth	r3, r3
 8008bf8:	807b      	strh	r3, [r7, #2]
        x0 = x0 - x1;
 8008bfa:	88fa      	ldrh	r2, [r7, #6]
 8008bfc:	887b      	ldrh	r3, [r7, #2]
 8008bfe:	1ad3      	subs	r3, r2, r3
 8008c00:	b29b      	uxth	r3, r3
 8008c02:	80fb      	strh	r3, [r7, #6]
    }

    /* Make sure y0 is smaller than y1. */
    if (y0 > y1) {
 8008c04:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8008c08:	f9b7 3000 	ldrsh.w	r3, [r7]
 8008c0c:	429a      	cmp	r2, r3
 8008c0e:	dd0e      	ble.n	8008c2e <hagl_fill_rectangle+0x72>
        y0 = y0 + y1;
 8008c10:	88ba      	ldrh	r2, [r7, #4]
 8008c12:	883b      	ldrh	r3, [r7, #0]
 8008c14:	4413      	add	r3, r2
 8008c16:	b29b      	uxth	r3, r3
 8008c18:	80bb      	strh	r3, [r7, #4]
        y1 = y0 - y1;
 8008c1a:	88ba      	ldrh	r2, [r7, #4]
 8008c1c:	883b      	ldrh	r3, [r7, #0]
 8008c1e:	1ad3      	subs	r3, r2, r3
 8008c20:	b29b      	uxth	r3, r3
 8008c22:	803b      	strh	r3, [r7, #0]
        y0 = y0 - y1;
 8008c24:	88ba      	ldrh	r2, [r7, #4]
 8008c26:	883b      	ldrh	r3, [r7, #0]
 8008c28:	1ad3      	subs	r3, r2, r3
 8008c2a:	b29b      	uxth	r3, r3
 8008c2c:	80bb      	strh	r3, [r7, #4]
    }

    /* x1 or y1 is before the edge, nothing to do. */
    if ((x1 < clip_window.x0) || (y1 < clip_window.y0))  {
 8008c2e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8008c32:	4a33      	ldr	r2, [pc, #204]	; (8008d00 <hagl_fill_rectangle+0x144>)
 8008c34:	8812      	ldrh	r2, [r2, #0]
 8008c36:	4293      	cmp	r3, r2
 8008c38:	db5b      	blt.n	8008cf2 <hagl_fill_rectangle+0x136>
 8008c3a:	f9b7 3000 	ldrsh.w	r3, [r7]
 8008c3e:	4a30      	ldr	r2, [pc, #192]	; (8008d00 <hagl_fill_rectangle+0x144>)
 8008c40:	8852      	ldrh	r2, [r2, #2]
 8008c42:	4293      	cmp	r3, r2
 8008c44:	db55      	blt.n	8008cf2 <hagl_fill_rectangle+0x136>
        return;
    }

    /* x0 or y0 is after the edge, nothing to do. */
    if ((x0 > clip_window.x1) || (y0 > clip_window.y1)) {
 8008c46:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8008c4a:	4a2d      	ldr	r2, [pc, #180]	; (8008d00 <hagl_fill_rectangle+0x144>)
 8008c4c:	8892      	ldrh	r2, [r2, #4]
 8008c4e:	4293      	cmp	r3, r2
 8008c50:	dc51      	bgt.n	8008cf6 <hagl_fill_rectangle+0x13a>
 8008c52:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8008c56:	4a2a      	ldr	r2, [pc, #168]	; (8008d00 <hagl_fill_rectangle+0x144>)
 8008c58:	88d2      	ldrh	r2, [r2, #6]
 8008c5a:	4293      	cmp	r3, r2
 8008c5c:	dc4b      	bgt.n	8008cf6 <hagl_fill_rectangle+0x13a>
        return;
    }

    x0 = max(x0, clip_window.x0);
 8008c5e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8008c62:	4a27      	ldr	r2, [pc, #156]	; (8008d00 <hagl_fill_rectangle+0x144>)
 8008c64:	8812      	ldrh	r2, [r2, #0]
 8008c66:	4611      	mov	r1, r2
 8008c68:	4618      	mov	r0, r3
 8008c6a:	f7ff fe95 	bl	8008998 <max>
 8008c6e:	4603      	mov	r3, r0
 8008c70:	80fb      	strh	r3, [r7, #6]
    y0 = max(y0, clip_window.y0);
 8008c72:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8008c76:	4a22      	ldr	r2, [pc, #136]	; (8008d00 <hagl_fill_rectangle+0x144>)
 8008c78:	8852      	ldrh	r2, [r2, #2]
 8008c7a:	4611      	mov	r1, r2
 8008c7c:	4618      	mov	r0, r3
 8008c7e:	f7ff fe8b 	bl	8008998 <max>
 8008c82:	4603      	mov	r3, r0
 8008c84:	80bb      	strh	r3, [r7, #4]
    x1 = min(x1, clip_window.x1);
 8008c86:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8008c8a:	4a1d      	ldr	r2, [pc, #116]	; (8008d00 <hagl_fill_rectangle+0x144>)
 8008c8c:	8892      	ldrh	r2, [r2, #4]
 8008c8e:	4611      	mov	r1, r2
 8008c90:	4618      	mov	r0, r3
 8008c92:	f7ff fe6f 	bl	8008974 <min>
 8008c96:	4603      	mov	r3, r0
 8008c98:	807b      	strh	r3, [r7, #2]
    y1 = min(y1, clip_window.y1);
 8008c9a:	f9b7 3000 	ldrsh.w	r3, [r7]
 8008c9e:	4a18      	ldr	r2, [pc, #96]	; (8008d00 <hagl_fill_rectangle+0x144>)
 8008ca0:	88d2      	ldrh	r2, [r2, #6]
 8008ca2:	4611      	mov	r1, r2
 8008ca4:	4618      	mov	r0, r3
 8008ca6:	f7ff fe65 	bl	8008974 <min>
 8008caa:	4603      	mov	r3, r0
 8008cac:	803b      	strh	r3, [r7, #0]

    uint16_t width = x1 - x0 + 1;
 8008cae:	887a      	ldrh	r2, [r7, #2]
 8008cb0:	88fb      	ldrh	r3, [r7, #6]
 8008cb2:	1ad3      	subs	r3, r2, r3
 8008cb4:	b29b      	uxth	r3, r3
 8008cb6:	3301      	adds	r3, #1
 8008cb8:	81bb      	strh	r3, [r7, #12]
    uint16_t height = y1 - y0 + 1;
 8008cba:	883a      	ldrh	r2, [r7, #0]
 8008cbc:	88bb      	ldrh	r3, [r7, #4]
 8008cbe:	1ad3      	subs	r3, r2, r3
 8008cc0:	b29b      	uxth	r3, r3
 8008cc2:	3301      	adds	r3, #1
 8008cc4:	817b      	strh	r3, [r7, #10]

    for (uint16_t i = 0; i < height; i++) {
 8008cc6:	2300      	movs	r3, #0
 8008cc8:	81fb      	strh	r3, [r7, #14]
 8008cca:	e00d      	b.n	8008ce8 <hagl_fill_rectangle+0x12c>
#ifdef HAGL_HAS_HAL_HLINE
        /* Already clipped so can call HAL directly. */
        hagl_hal_hline(x0, y0 + i, width, color);
#else
        hagl_draw_hline(x0, y0 + i, width, color);
 8008ccc:	88ba      	ldrh	r2, [r7, #4]
 8008cce:	89fb      	ldrh	r3, [r7, #14]
 8008cd0:	4413      	add	r3, r2
 8008cd2:	b29b      	uxth	r3, r3
 8008cd4:	b219      	sxth	r1, r3
 8008cd6:	8c3b      	ldrh	r3, [r7, #32]
 8008cd8:	89ba      	ldrh	r2, [r7, #12]
 8008cda:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8008cde:	f7ff fe9f 	bl	8008a20 <hagl_draw_hline>
    for (uint16_t i = 0; i < height; i++) {
 8008ce2:	89fb      	ldrh	r3, [r7, #14]
 8008ce4:	3301      	adds	r3, #1
 8008ce6:	81fb      	strh	r3, [r7, #14]
 8008ce8:	89fa      	ldrh	r2, [r7, #14]
 8008cea:	897b      	ldrh	r3, [r7, #10]
 8008cec:	429a      	cmp	r2, r3
 8008cee:	d3ed      	bcc.n	8008ccc <hagl_fill_rectangle+0x110>
 8008cf0:	e002      	b.n	8008cf8 <hagl_fill_rectangle+0x13c>
        return;
 8008cf2:	bf00      	nop
 8008cf4:	e000      	b.n	8008cf8 <hagl_fill_rectangle+0x13c>
        return;
 8008cf6:	bf00      	nop
#endif
    }
}
 8008cf8:	3714      	adds	r7, #20
 8008cfa:	46bd      	mov	sp, r7
 8008cfc:	bd90      	pop	{r4, r7, pc}
 8008cfe:	bf00      	nop
 8008d00:	20000010 	.word	0x20000010

08008d04 <hagl_put_char>:

    return 0;
}

uint8_t hagl_put_char(wchar_t code, int16_t x0, int16_t y0, color_t color, const uint8_t *font)
{
 8008d04:	b590      	push	{r4, r7, lr}
 8008d06:	f5ad 5d81 	sub.w	sp, sp, #4128	; 0x1020
 8008d0a:	b085      	sub	sp, #20
 8008d0c:	af00      	add	r7, sp, #0
 8008d0e:	f107 0430 	add.w	r4, r7, #48	; 0x30
 8008d12:	f844 0c24 	str.w	r0, [r4, #-36]
 8008d16:	460c      	mov	r4, r1
 8008d18:	4610      	mov	r0, r2
 8008d1a:	4619      	mov	r1, r3
 8008d1c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8008d20:	4622      	mov	r2, r4
 8008d22:	f823 2c26 	strh.w	r2, [r3, #-38]
 8008d26:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8008d2a:	4602      	mov	r2, r0
 8008d2c:	f823 2c28 	strh.w	r2, [r3, #-40]
 8008d30:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8008d34:	460a      	mov	r2, r1
 8008d36:	f823 2c2a 	strh.w	r2, [r3, #-42]
    uint8_t set, status;
    color_t buffer[HAGL_CHAR_BUFFER_SIZE];
    bitmap_t bitmap;
    fontx_glyph_t glyph;

    status = fontx_glyph(&glyph, code, font);
 8008d3a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8008d3e:	4619      	mov	r1, r3
 8008d40:	f107 0310 	add.w	r3, r7, #16
 8008d44:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8008d48:	6812      	ldr	r2, [r2, #0]
 8008d4a:	f851 1c24 	ldr.w	r1, [r1, #-36]
 8008d4e:	4618      	mov	r0, r3
 8008d50:	f7ff fd7e 	bl	8008850 <fontx_glyph>
 8008d54:	4603      	mov	r3, r0
 8008d56:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8008d5a:	f102 0209 	add.w	r2, r2, #9
 8008d5e:	7013      	strb	r3, [r2, #0]

    if (0 != status) {
 8008d60:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8008d64:	f103 0309 	add.w	r3, r3, #9
 8008d68:	781b      	ldrb	r3, [r3, #0]
 8008d6a:	2b00      	cmp	r3, #0
 8008d6c:	d001      	beq.n	8008d72 <hagl_put_char+0x6e>
        return 0;
 8008d6e:	2300      	movs	r3, #0
 8008d70:	e0c0      	b.n	8008ef4 <hagl_put_char+0x1f0>
    }

    bitmap.width = glyph.width,
 8008d72:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8008d76:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8008d7a:	b29a      	uxth	r2, r3
 8008d7c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8008d80:	f823 2c18 	strh.w	r2, [r3, #-24]
    bitmap.height = glyph.height,
 8008d84:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8008d88:	f813 3c1f 	ldrb.w	r3, [r3, #-31]
 8008d8c:	b29a      	uxth	r2, r3
 8008d8e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8008d92:	f823 2c16 	strh.w	r2, [r3, #-22]
    bitmap.depth = DISPLAY_DEPTH,
 8008d96:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8008d9a:	2210      	movs	r2, #16
 8008d9c:	f803 2c12 	strb.w	r2, [r3, #-18]

    bitmap_init(&bitmap, (uint8_t *)buffer);
 8008da0:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8008da4:	3a08      	subs	r2, #8
 8008da6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8008daa:	3b18      	subs	r3, #24
 8008dac:	4611      	mov	r1, r2
 8008dae:	4618      	mov	r0, r3
 8008db0:	f7ff fbb5 	bl	800851e <bitmap_init>

    color_t *ptr = (color_t *) bitmap.buffer;
 8008db4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8008db8:	f853 3c0c 	ldr.w	r3, [r3, #-12]
 8008dbc:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8008dc0:	f102 020c 	add.w	r2, r2, #12
 8008dc4:	6013      	str	r3, [r2, #0]

    for (uint8_t y = 0; y < glyph.height; y++) {
 8008dc6:	2300      	movs	r3, #0
 8008dc8:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8008dcc:	f102 020b 	add.w	r2, r2, #11
 8008dd0:	7013      	strb	r3, [r2, #0]
 8008dd2:	e071      	b.n	8008eb8 <hagl_put_char+0x1b4>
        for (uint8_t x = 0; x < glyph.width; x++) {
 8008dd4:	2300      	movs	r3, #0
 8008dd6:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8008dda:	f102 020a 	add.w	r2, r2, #10
 8008dde:	7013      	strb	r3, [r2, #0]
 8008de0:	e047      	b.n	8008e72 <hagl_put_char+0x16e>
            set = *(glyph.buffer) & (0x80 >> (x % 8));
 8008de2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8008de6:	f853 3c1c 	ldr.w	r3, [r3, #-28]
 8008dea:	781b      	ldrb	r3, [r3, #0]
 8008dec:	b25a      	sxtb	r2, r3
 8008dee:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8008df2:	f103 030a 	add.w	r3, r3, #10
 8008df6:	781b      	ldrb	r3, [r3, #0]
 8008df8:	f003 0307 	and.w	r3, r3, #7
 8008dfc:	2180      	movs	r1, #128	; 0x80
 8008dfe:	fa41 f303 	asr.w	r3, r1, r3
 8008e02:	b25b      	sxtb	r3, r3
 8008e04:	4013      	ands	r3, r2
 8008e06:	b25b      	sxtb	r3, r3
 8008e08:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8008e0c:	f102 0208 	add.w	r2, r2, #8
 8008e10:	7013      	strb	r3, [r2, #0]
            if (set) {
 8008e12:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8008e16:	f103 0308 	add.w	r3, r3, #8
 8008e1a:	781b      	ldrb	r3, [r3, #0]
 8008e1c:	2b00      	cmp	r3, #0
 8008e1e:	d010      	beq.n	8008e42 <hagl_put_char+0x13e>
                *(ptr++) = color;
 8008e20:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8008e24:	f103 030c 	add.w	r3, r3, #12
 8008e28:	681b      	ldr	r3, [r3, #0]
 8008e2a:	1c9a      	adds	r2, r3, #2
 8008e2c:	f507 5181 	add.w	r1, r7, #4128	; 0x1020
 8008e30:	f101 010c 	add.w	r1, r1, #12
 8008e34:	600a      	str	r2, [r1, #0]
 8008e36:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8008e3a:	f832 2c2a 	ldrh.w	r2, [r2, #-42]
 8008e3e:	801a      	strh	r2, [r3, #0]
 8008e40:	e00c      	b.n	8008e5c <hagl_put_char+0x158>
            } else {
                *(ptr++) = 0x0000;
 8008e42:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8008e46:	f103 030c 	add.w	r3, r3, #12
 8008e4a:	681b      	ldr	r3, [r3, #0]
 8008e4c:	1c9a      	adds	r2, r3, #2
 8008e4e:	f507 5181 	add.w	r1, r7, #4128	; 0x1020
 8008e52:	f101 010c 	add.w	r1, r1, #12
 8008e56:	600a      	str	r2, [r1, #0]
 8008e58:	2200      	movs	r2, #0
 8008e5a:	801a      	strh	r2, [r3, #0]
        for (uint8_t x = 0; x < glyph.width; x++) {
 8008e5c:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8008e60:	f103 030a 	add.w	r3, r3, #10
 8008e64:	781b      	ldrb	r3, [r3, #0]
 8008e66:	3301      	adds	r3, #1
 8008e68:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8008e6c:	f102 020a 	add.w	r2, r2, #10
 8008e70:	7013      	strb	r3, [r2, #0]
 8008e72:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8008e76:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8008e7a:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8008e7e:	f102 020a 	add.w	r2, r2, #10
 8008e82:	7812      	ldrb	r2, [r2, #0]
 8008e84:	429a      	cmp	r2, r3
 8008e86:	d3ac      	bcc.n	8008de2 <hagl_put_char+0xde>
            }
        }
        glyph.buffer += glyph.pitch;
 8008e88:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8008e8c:	f853 3c1c 	ldr.w	r3, [r3, #-28]
 8008e90:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8008e94:	f812 2c1d 	ldrb.w	r2, [r2, #-29]
 8008e98:	4413      	add	r3, r2
 8008e9a:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8008e9e:	f842 3c1c 	str.w	r3, [r2, #-28]
    for (uint8_t y = 0; y < glyph.height; y++) {
 8008ea2:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8008ea6:	f103 030b 	add.w	r3, r3, #11
 8008eaa:	781b      	ldrb	r3, [r3, #0]
 8008eac:	3301      	adds	r3, #1
 8008eae:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8008eb2:	f102 020b 	add.w	r2, r2, #11
 8008eb6:	7013      	strb	r3, [r2, #0]
 8008eb8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8008ebc:	f813 3c1f 	ldrb.w	r3, [r3, #-31]
 8008ec0:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8008ec4:	f102 020b 	add.w	r2, r2, #11
 8008ec8:	7812      	ldrb	r2, [r2, #0]
 8008eca:	429a      	cmp	r2, r3
 8008ecc:	d382      	bcc.n	8008dd4 <hagl_put_char+0xd0>
    }

    hagl_blit(x0, y0, &bitmap);
 8008ece:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8008ed2:	3b18      	subs	r3, #24
 8008ed4:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8008ed8:	f932 1c28 	ldrsh.w	r1, [r2, #-40]
 8008edc:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8008ee0:	f932 0c26 	ldrsh.w	r0, [r2, #-38]
 8008ee4:	461a      	mov	r2, r3
 8008ee6:	f000 f85a 	bl	8008f9e <hagl_blit>

    return bitmap.width;
 8008eea:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8008eee:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8008ef2:	b2db      	uxtb	r3, r3
}
 8008ef4:	4618      	mov	r0, r3
 8008ef6:	f507 5781 	add.w	r7, r7, #4128	; 0x1020
 8008efa:	3714      	adds	r7, #20
 8008efc:	46bd      	mov	sp, r7
 8008efe:	bd90      	pop	{r4, r7, pc}

08008f00 <hagl_put_text>:
 * Write a string of text by calling hagl_put_char() repeadetly. CR and LF
 * continue from the next line.
 */

uint16_t hagl_put_text(const wchar_t *str, int16_t x0, int16_t y0, color_t color, const unsigned char *font)
{
 8008f00:	b580      	push	{r7, lr}
 8008f02:	b08c      	sub	sp, #48	; 0x30
 8008f04:	af02      	add	r7, sp, #8
 8008f06:	60f8      	str	r0, [r7, #12]
 8008f08:	4608      	mov	r0, r1
 8008f0a:	4611      	mov	r1, r2
 8008f0c:	461a      	mov	r2, r3
 8008f0e:	4603      	mov	r3, r0
 8008f10:	817b      	strh	r3, [r7, #10]
 8008f12:	460b      	mov	r3, r1
 8008f14:	813b      	strh	r3, [r7, #8]
 8008f16:	4613      	mov	r3, r2
 8008f18:	80fb      	strh	r3, [r7, #6]
    wchar_t temp;
    uint8_t status;
    uint16_t original = x0;
 8008f1a:	897b      	ldrh	r3, [r7, #10]
 8008f1c:	84fb      	strh	r3, [r7, #38]	; 0x26
    fontx_meta_t meta;

    status = fontx_meta(&meta, font);
 8008f1e:	f107 0314 	add.w	r3, r7, #20
 8008f22:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008f24:	4618      	mov	r0, r3
 8008f26:	f7ff fc73 	bl	8008810 <fontx_meta>
 8008f2a:	4603      	mov	r3, r0
 8008f2c:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
    if (0 != status) {
 8008f30:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8008f34:	2b00      	cmp	r3, #0
 8008f36:	d001      	beq.n	8008f3c <hagl_put_text+0x3c>
        return 0;
 8008f38:	2300      	movs	r3, #0
 8008f3a:	e02c      	b.n	8008f96 <hagl_put_text+0x96>
    }

    do {
        temp = *str++;
 8008f3c:	68fb      	ldr	r3, [r7, #12]
 8008f3e:	1d1a      	adds	r2, r3, #4
 8008f40:	60fa      	str	r2, [r7, #12]
 8008f42:	681b      	ldr	r3, [r3, #0]
 8008f44:	623b      	str	r3, [r7, #32]
        if (13 == temp || 10 == temp) {
 8008f46:	6a3b      	ldr	r3, [r7, #32]
 8008f48:	2b0d      	cmp	r3, #13
 8008f4a:	d002      	beq.n	8008f52 <hagl_put_text+0x52>
 8008f4c:	6a3b      	ldr	r3, [r7, #32]
 8008f4e:	2b0a      	cmp	r3, #10
 8008f50:	d108      	bne.n	8008f64 <hagl_put_text+0x64>
            x0 = 0;
 8008f52:	2300      	movs	r3, #0
 8008f54:	817b      	strh	r3, [r7, #10]
            y0 += meta.height;
 8008f56:	7fbb      	ldrb	r3, [r7, #30]
 8008f58:	b29a      	uxth	r2, r3
 8008f5a:	893b      	ldrh	r3, [r7, #8]
 8008f5c:	4413      	add	r3, r2
 8008f5e:	b29b      	uxth	r3, r3
 8008f60:	813b      	strh	r3, [r7, #8]
 8008f62:	e010      	b.n	8008f86 <hagl_put_text+0x86>
        } else {
            x0 += hagl_put_char(temp, x0, y0, color, font);
 8008f64:	88f8      	ldrh	r0, [r7, #6]
 8008f66:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8008f6a:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 8008f6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f70:	9300      	str	r3, [sp, #0]
 8008f72:	4603      	mov	r3, r0
 8008f74:	6a38      	ldr	r0, [r7, #32]
 8008f76:	f7ff fec5 	bl	8008d04 <hagl_put_char>
 8008f7a:	4603      	mov	r3, r0
 8008f7c:	b29a      	uxth	r2, r3
 8008f7e:	897b      	ldrh	r3, [r7, #10]
 8008f80:	4413      	add	r3, r2
 8008f82:	b29b      	uxth	r3, r3
 8008f84:	817b      	strh	r3, [r7, #10]
        }
    } while (*str != 0);
 8008f86:	68fb      	ldr	r3, [r7, #12]
 8008f88:	681b      	ldr	r3, [r3, #0]
 8008f8a:	2b00      	cmp	r3, #0
 8008f8c:	d1d6      	bne.n	8008f3c <hagl_put_text+0x3c>

    return x0 - original;
 8008f8e:	897a      	ldrh	r2, [r7, #10]
 8008f90:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8008f92:	1ad3      	subs	r3, r2, r3
 8008f94:	b29b      	uxth	r3, r3
}
 8008f96:	4618      	mov	r0, r3
 8008f98:	3728      	adds	r7, #40	; 0x28
 8008f9a:	46bd      	mov	sp, r7
 8008f9c:	bd80      	pop	{r7, pc}

08008f9e <hagl_blit>:
 * configurable source and destination see the file blit.c.
 *
 * TODO: Handle transparency.
 */

void hagl_blit(int16_t x0, int16_t y0, bitmap_t *source) {
 8008f9e:	b580      	push	{r7, lr}
 8008fa0:	b086      	sub	sp, #24
 8008fa2:	af00      	add	r7, sp, #0
 8008fa4:	4603      	mov	r3, r0
 8008fa6:	603a      	str	r2, [r7, #0]
 8008fa8:	80fb      	strh	r3, [r7, #6]
 8008faa:	460b      	mov	r3, r1
 8008fac:	80bb      	strh	r3, [r7, #4]
        /* Inside of bounds, can use HAL provided blit. */
        hagl_hal_blit(x0, y0, source);
    }
#else
    color_t color;
    color_t *ptr = (color_t *) source->buffer;
 8008fae:	683b      	ldr	r3, [r7, #0]
 8008fb0:	68db      	ldr	r3, [r3, #12]
 8008fb2:	617b      	str	r3, [r7, #20]

    for (uint16_t y = 0; y < source->height; y++) {
 8008fb4:	2300      	movs	r3, #0
 8008fb6:	827b      	strh	r3, [r7, #18]
 8008fb8:	e020      	b.n	8008ffc <hagl_blit+0x5e>
        for (uint16_t x = 0; x < source->width; x++) {
 8008fba:	2300      	movs	r3, #0
 8008fbc:	823b      	strh	r3, [r7, #16]
 8008fbe:	e015      	b.n	8008fec <hagl_blit+0x4e>
            color = *(ptr++);
 8008fc0:	697b      	ldr	r3, [r7, #20]
 8008fc2:	1c9a      	adds	r2, r3, #2
 8008fc4:	617a      	str	r2, [r7, #20]
 8008fc6:	881b      	ldrh	r3, [r3, #0]
 8008fc8:	81fb      	strh	r3, [r7, #14]
            hagl_put_pixel(x0 + x, y0 + y, color);
 8008fca:	88fa      	ldrh	r2, [r7, #6]
 8008fcc:	8a3b      	ldrh	r3, [r7, #16]
 8008fce:	4413      	add	r3, r2
 8008fd0:	b29b      	uxth	r3, r3
 8008fd2:	b218      	sxth	r0, r3
 8008fd4:	88ba      	ldrh	r2, [r7, #4]
 8008fd6:	8a7b      	ldrh	r3, [r7, #18]
 8008fd8:	4413      	add	r3, r2
 8008fda:	b29b      	uxth	r3, r3
 8008fdc:	b21b      	sxth	r3, r3
 8008fde:	89fa      	ldrh	r2, [r7, #14]
 8008fe0:	4619      	mov	r1, r3
 8008fe2:	f7ff fceb 	bl	80089bc <hagl_put_pixel>
        for (uint16_t x = 0; x < source->width; x++) {
 8008fe6:	8a3b      	ldrh	r3, [r7, #16]
 8008fe8:	3301      	adds	r3, #1
 8008fea:	823b      	strh	r3, [r7, #16]
 8008fec:	683b      	ldr	r3, [r7, #0]
 8008fee:	881b      	ldrh	r3, [r3, #0]
 8008ff0:	8a3a      	ldrh	r2, [r7, #16]
 8008ff2:	429a      	cmp	r2, r3
 8008ff4:	d3e4      	bcc.n	8008fc0 <hagl_blit+0x22>
    for (uint16_t y = 0; y < source->height; y++) {
 8008ff6:	8a7b      	ldrh	r3, [r7, #18]
 8008ff8:	3301      	adds	r3, #1
 8008ffa:	827b      	strh	r3, [r7, #18]
 8008ffc:	683b      	ldr	r3, [r7, #0]
 8008ffe:	885b      	ldrh	r3, [r3, #2]
 8009000:	8a7a      	ldrh	r2, [r7, #18]
 8009002:	429a      	cmp	r2, r3
 8009004:	d3d9      	bcc.n	8008fba <hagl_blit+0x1c>
        }
    }
#endif
};
 8009006:	bf00      	nop
 8009008:	bf00      	nop
 800900a:	3718      	adds	r7, #24
 800900c:	46bd      	mov	sp, r7
 800900e:	bd80      	pop	{r7, pc}

08009010 <__cvt>:
 8009010:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009014:	ec55 4b10 	vmov	r4, r5, d0
 8009018:	2d00      	cmp	r5, #0
 800901a:	460e      	mov	r6, r1
 800901c:	4619      	mov	r1, r3
 800901e:	462b      	mov	r3, r5
 8009020:	bfbb      	ittet	lt
 8009022:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8009026:	461d      	movlt	r5, r3
 8009028:	2300      	movge	r3, #0
 800902a:	232d      	movlt	r3, #45	; 0x2d
 800902c:	700b      	strb	r3, [r1, #0]
 800902e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009030:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8009034:	4691      	mov	r9, r2
 8009036:	f023 0820 	bic.w	r8, r3, #32
 800903a:	bfbc      	itt	lt
 800903c:	4622      	movlt	r2, r4
 800903e:	4614      	movlt	r4, r2
 8009040:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8009044:	d005      	beq.n	8009052 <__cvt+0x42>
 8009046:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800904a:	d100      	bne.n	800904e <__cvt+0x3e>
 800904c:	3601      	adds	r6, #1
 800904e:	2102      	movs	r1, #2
 8009050:	e000      	b.n	8009054 <__cvt+0x44>
 8009052:	2103      	movs	r1, #3
 8009054:	ab03      	add	r3, sp, #12
 8009056:	9301      	str	r3, [sp, #4]
 8009058:	ab02      	add	r3, sp, #8
 800905a:	9300      	str	r3, [sp, #0]
 800905c:	ec45 4b10 	vmov	d0, r4, r5
 8009060:	4653      	mov	r3, sl
 8009062:	4632      	mov	r2, r6
 8009064:	f000 ff38 	bl	8009ed8 <_dtoa_r>
 8009068:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800906c:	4607      	mov	r7, r0
 800906e:	d102      	bne.n	8009076 <__cvt+0x66>
 8009070:	f019 0f01 	tst.w	r9, #1
 8009074:	d022      	beq.n	80090bc <__cvt+0xac>
 8009076:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800907a:	eb07 0906 	add.w	r9, r7, r6
 800907e:	d110      	bne.n	80090a2 <__cvt+0x92>
 8009080:	783b      	ldrb	r3, [r7, #0]
 8009082:	2b30      	cmp	r3, #48	; 0x30
 8009084:	d10a      	bne.n	800909c <__cvt+0x8c>
 8009086:	2200      	movs	r2, #0
 8009088:	2300      	movs	r3, #0
 800908a:	4620      	mov	r0, r4
 800908c:	4629      	mov	r1, r5
 800908e:	f7f7 fd1b 	bl	8000ac8 <__aeabi_dcmpeq>
 8009092:	b918      	cbnz	r0, 800909c <__cvt+0x8c>
 8009094:	f1c6 0601 	rsb	r6, r6, #1
 8009098:	f8ca 6000 	str.w	r6, [sl]
 800909c:	f8da 3000 	ldr.w	r3, [sl]
 80090a0:	4499      	add	r9, r3
 80090a2:	2200      	movs	r2, #0
 80090a4:	2300      	movs	r3, #0
 80090a6:	4620      	mov	r0, r4
 80090a8:	4629      	mov	r1, r5
 80090aa:	f7f7 fd0d 	bl	8000ac8 <__aeabi_dcmpeq>
 80090ae:	b108      	cbz	r0, 80090b4 <__cvt+0xa4>
 80090b0:	f8cd 900c 	str.w	r9, [sp, #12]
 80090b4:	2230      	movs	r2, #48	; 0x30
 80090b6:	9b03      	ldr	r3, [sp, #12]
 80090b8:	454b      	cmp	r3, r9
 80090ba:	d307      	bcc.n	80090cc <__cvt+0xbc>
 80090bc:	9b03      	ldr	r3, [sp, #12]
 80090be:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80090c0:	1bdb      	subs	r3, r3, r7
 80090c2:	4638      	mov	r0, r7
 80090c4:	6013      	str	r3, [r2, #0]
 80090c6:	b004      	add	sp, #16
 80090c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80090cc:	1c59      	adds	r1, r3, #1
 80090ce:	9103      	str	r1, [sp, #12]
 80090d0:	701a      	strb	r2, [r3, #0]
 80090d2:	e7f0      	b.n	80090b6 <__cvt+0xa6>

080090d4 <__exponent>:
 80090d4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80090d6:	4603      	mov	r3, r0
 80090d8:	2900      	cmp	r1, #0
 80090da:	bfb8      	it	lt
 80090dc:	4249      	neglt	r1, r1
 80090de:	f803 2b02 	strb.w	r2, [r3], #2
 80090e2:	bfb4      	ite	lt
 80090e4:	222d      	movlt	r2, #45	; 0x2d
 80090e6:	222b      	movge	r2, #43	; 0x2b
 80090e8:	2909      	cmp	r1, #9
 80090ea:	7042      	strb	r2, [r0, #1]
 80090ec:	dd2a      	ble.n	8009144 <__exponent+0x70>
 80090ee:	f10d 0207 	add.w	r2, sp, #7
 80090f2:	4617      	mov	r7, r2
 80090f4:	260a      	movs	r6, #10
 80090f6:	4694      	mov	ip, r2
 80090f8:	fb91 f5f6 	sdiv	r5, r1, r6
 80090fc:	fb06 1415 	mls	r4, r6, r5, r1
 8009100:	3430      	adds	r4, #48	; 0x30
 8009102:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8009106:	460c      	mov	r4, r1
 8009108:	2c63      	cmp	r4, #99	; 0x63
 800910a:	f102 32ff 	add.w	r2, r2, #4294967295
 800910e:	4629      	mov	r1, r5
 8009110:	dcf1      	bgt.n	80090f6 <__exponent+0x22>
 8009112:	3130      	adds	r1, #48	; 0x30
 8009114:	f1ac 0402 	sub.w	r4, ip, #2
 8009118:	f802 1c01 	strb.w	r1, [r2, #-1]
 800911c:	1c41      	adds	r1, r0, #1
 800911e:	4622      	mov	r2, r4
 8009120:	42ba      	cmp	r2, r7
 8009122:	d30a      	bcc.n	800913a <__exponent+0x66>
 8009124:	f10d 0209 	add.w	r2, sp, #9
 8009128:	eba2 020c 	sub.w	r2, r2, ip
 800912c:	42bc      	cmp	r4, r7
 800912e:	bf88      	it	hi
 8009130:	2200      	movhi	r2, #0
 8009132:	4413      	add	r3, r2
 8009134:	1a18      	subs	r0, r3, r0
 8009136:	b003      	add	sp, #12
 8009138:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800913a:	f812 5b01 	ldrb.w	r5, [r2], #1
 800913e:	f801 5f01 	strb.w	r5, [r1, #1]!
 8009142:	e7ed      	b.n	8009120 <__exponent+0x4c>
 8009144:	2330      	movs	r3, #48	; 0x30
 8009146:	3130      	adds	r1, #48	; 0x30
 8009148:	7083      	strb	r3, [r0, #2]
 800914a:	70c1      	strb	r1, [r0, #3]
 800914c:	1d03      	adds	r3, r0, #4
 800914e:	e7f1      	b.n	8009134 <__exponent+0x60>

08009150 <_printf_float>:
 8009150:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009154:	ed2d 8b02 	vpush	{d8}
 8009158:	b08d      	sub	sp, #52	; 0x34
 800915a:	460c      	mov	r4, r1
 800915c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8009160:	4616      	mov	r6, r2
 8009162:	461f      	mov	r7, r3
 8009164:	4605      	mov	r5, r0
 8009166:	f000 fda9 	bl	8009cbc <_localeconv_r>
 800916a:	f8d0 a000 	ldr.w	sl, [r0]
 800916e:	4650      	mov	r0, sl
 8009170:	f7f7 f87e 	bl	8000270 <strlen>
 8009174:	2300      	movs	r3, #0
 8009176:	930a      	str	r3, [sp, #40]	; 0x28
 8009178:	6823      	ldr	r3, [r4, #0]
 800917a:	9305      	str	r3, [sp, #20]
 800917c:	f8d8 3000 	ldr.w	r3, [r8]
 8009180:	f894 b018 	ldrb.w	fp, [r4, #24]
 8009184:	3307      	adds	r3, #7
 8009186:	f023 0307 	bic.w	r3, r3, #7
 800918a:	f103 0208 	add.w	r2, r3, #8
 800918e:	f8c8 2000 	str.w	r2, [r8]
 8009192:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009196:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800919a:	9307      	str	r3, [sp, #28]
 800919c:	f8cd 8018 	str.w	r8, [sp, #24]
 80091a0:	ee08 0a10 	vmov	s16, r0
 80091a4:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 80091a8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80091ac:	4b9e      	ldr	r3, [pc, #632]	; (8009428 <_printf_float+0x2d8>)
 80091ae:	f04f 32ff 	mov.w	r2, #4294967295
 80091b2:	f7f7 fcbb 	bl	8000b2c <__aeabi_dcmpun>
 80091b6:	bb88      	cbnz	r0, 800921c <_printf_float+0xcc>
 80091b8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80091bc:	4b9a      	ldr	r3, [pc, #616]	; (8009428 <_printf_float+0x2d8>)
 80091be:	f04f 32ff 	mov.w	r2, #4294967295
 80091c2:	f7f7 fc95 	bl	8000af0 <__aeabi_dcmple>
 80091c6:	bb48      	cbnz	r0, 800921c <_printf_float+0xcc>
 80091c8:	2200      	movs	r2, #0
 80091ca:	2300      	movs	r3, #0
 80091cc:	4640      	mov	r0, r8
 80091ce:	4649      	mov	r1, r9
 80091d0:	f7f7 fc84 	bl	8000adc <__aeabi_dcmplt>
 80091d4:	b110      	cbz	r0, 80091dc <_printf_float+0x8c>
 80091d6:	232d      	movs	r3, #45	; 0x2d
 80091d8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80091dc:	4a93      	ldr	r2, [pc, #588]	; (800942c <_printf_float+0x2dc>)
 80091de:	4b94      	ldr	r3, [pc, #592]	; (8009430 <_printf_float+0x2e0>)
 80091e0:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80091e4:	bf94      	ite	ls
 80091e6:	4690      	movls	r8, r2
 80091e8:	4698      	movhi	r8, r3
 80091ea:	2303      	movs	r3, #3
 80091ec:	6123      	str	r3, [r4, #16]
 80091ee:	9b05      	ldr	r3, [sp, #20]
 80091f0:	f023 0304 	bic.w	r3, r3, #4
 80091f4:	6023      	str	r3, [r4, #0]
 80091f6:	f04f 0900 	mov.w	r9, #0
 80091fa:	9700      	str	r7, [sp, #0]
 80091fc:	4633      	mov	r3, r6
 80091fe:	aa0b      	add	r2, sp, #44	; 0x2c
 8009200:	4621      	mov	r1, r4
 8009202:	4628      	mov	r0, r5
 8009204:	f000 f9da 	bl	80095bc <_printf_common>
 8009208:	3001      	adds	r0, #1
 800920a:	f040 8090 	bne.w	800932e <_printf_float+0x1de>
 800920e:	f04f 30ff 	mov.w	r0, #4294967295
 8009212:	b00d      	add	sp, #52	; 0x34
 8009214:	ecbd 8b02 	vpop	{d8}
 8009218:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800921c:	4642      	mov	r2, r8
 800921e:	464b      	mov	r3, r9
 8009220:	4640      	mov	r0, r8
 8009222:	4649      	mov	r1, r9
 8009224:	f7f7 fc82 	bl	8000b2c <__aeabi_dcmpun>
 8009228:	b140      	cbz	r0, 800923c <_printf_float+0xec>
 800922a:	464b      	mov	r3, r9
 800922c:	2b00      	cmp	r3, #0
 800922e:	bfbc      	itt	lt
 8009230:	232d      	movlt	r3, #45	; 0x2d
 8009232:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8009236:	4a7f      	ldr	r2, [pc, #508]	; (8009434 <_printf_float+0x2e4>)
 8009238:	4b7f      	ldr	r3, [pc, #508]	; (8009438 <_printf_float+0x2e8>)
 800923a:	e7d1      	b.n	80091e0 <_printf_float+0x90>
 800923c:	6863      	ldr	r3, [r4, #4]
 800923e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8009242:	9206      	str	r2, [sp, #24]
 8009244:	1c5a      	adds	r2, r3, #1
 8009246:	d13f      	bne.n	80092c8 <_printf_float+0x178>
 8009248:	2306      	movs	r3, #6
 800924a:	6063      	str	r3, [r4, #4]
 800924c:	9b05      	ldr	r3, [sp, #20]
 800924e:	6861      	ldr	r1, [r4, #4]
 8009250:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8009254:	2300      	movs	r3, #0
 8009256:	9303      	str	r3, [sp, #12]
 8009258:	ab0a      	add	r3, sp, #40	; 0x28
 800925a:	e9cd b301 	strd	fp, r3, [sp, #4]
 800925e:	ab09      	add	r3, sp, #36	; 0x24
 8009260:	ec49 8b10 	vmov	d0, r8, r9
 8009264:	9300      	str	r3, [sp, #0]
 8009266:	6022      	str	r2, [r4, #0]
 8009268:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800926c:	4628      	mov	r0, r5
 800926e:	f7ff fecf 	bl	8009010 <__cvt>
 8009272:	9b06      	ldr	r3, [sp, #24]
 8009274:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009276:	2b47      	cmp	r3, #71	; 0x47
 8009278:	4680      	mov	r8, r0
 800927a:	d108      	bne.n	800928e <_printf_float+0x13e>
 800927c:	1cc8      	adds	r0, r1, #3
 800927e:	db02      	blt.n	8009286 <_printf_float+0x136>
 8009280:	6863      	ldr	r3, [r4, #4]
 8009282:	4299      	cmp	r1, r3
 8009284:	dd41      	ble.n	800930a <_printf_float+0x1ba>
 8009286:	f1ab 0302 	sub.w	r3, fp, #2
 800928a:	fa5f fb83 	uxtb.w	fp, r3
 800928e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8009292:	d820      	bhi.n	80092d6 <_printf_float+0x186>
 8009294:	3901      	subs	r1, #1
 8009296:	465a      	mov	r2, fp
 8009298:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800929c:	9109      	str	r1, [sp, #36]	; 0x24
 800929e:	f7ff ff19 	bl	80090d4 <__exponent>
 80092a2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80092a4:	1813      	adds	r3, r2, r0
 80092a6:	2a01      	cmp	r2, #1
 80092a8:	4681      	mov	r9, r0
 80092aa:	6123      	str	r3, [r4, #16]
 80092ac:	dc02      	bgt.n	80092b4 <_printf_float+0x164>
 80092ae:	6822      	ldr	r2, [r4, #0]
 80092b0:	07d2      	lsls	r2, r2, #31
 80092b2:	d501      	bpl.n	80092b8 <_printf_float+0x168>
 80092b4:	3301      	adds	r3, #1
 80092b6:	6123      	str	r3, [r4, #16]
 80092b8:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80092bc:	2b00      	cmp	r3, #0
 80092be:	d09c      	beq.n	80091fa <_printf_float+0xaa>
 80092c0:	232d      	movs	r3, #45	; 0x2d
 80092c2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80092c6:	e798      	b.n	80091fa <_printf_float+0xaa>
 80092c8:	9a06      	ldr	r2, [sp, #24]
 80092ca:	2a47      	cmp	r2, #71	; 0x47
 80092cc:	d1be      	bne.n	800924c <_printf_float+0xfc>
 80092ce:	2b00      	cmp	r3, #0
 80092d0:	d1bc      	bne.n	800924c <_printf_float+0xfc>
 80092d2:	2301      	movs	r3, #1
 80092d4:	e7b9      	b.n	800924a <_printf_float+0xfa>
 80092d6:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80092da:	d118      	bne.n	800930e <_printf_float+0x1be>
 80092dc:	2900      	cmp	r1, #0
 80092de:	6863      	ldr	r3, [r4, #4]
 80092e0:	dd0b      	ble.n	80092fa <_printf_float+0x1aa>
 80092e2:	6121      	str	r1, [r4, #16]
 80092e4:	b913      	cbnz	r3, 80092ec <_printf_float+0x19c>
 80092e6:	6822      	ldr	r2, [r4, #0]
 80092e8:	07d0      	lsls	r0, r2, #31
 80092ea:	d502      	bpl.n	80092f2 <_printf_float+0x1a2>
 80092ec:	3301      	adds	r3, #1
 80092ee:	440b      	add	r3, r1
 80092f0:	6123      	str	r3, [r4, #16]
 80092f2:	65a1      	str	r1, [r4, #88]	; 0x58
 80092f4:	f04f 0900 	mov.w	r9, #0
 80092f8:	e7de      	b.n	80092b8 <_printf_float+0x168>
 80092fa:	b913      	cbnz	r3, 8009302 <_printf_float+0x1b2>
 80092fc:	6822      	ldr	r2, [r4, #0]
 80092fe:	07d2      	lsls	r2, r2, #31
 8009300:	d501      	bpl.n	8009306 <_printf_float+0x1b6>
 8009302:	3302      	adds	r3, #2
 8009304:	e7f4      	b.n	80092f0 <_printf_float+0x1a0>
 8009306:	2301      	movs	r3, #1
 8009308:	e7f2      	b.n	80092f0 <_printf_float+0x1a0>
 800930a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800930e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009310:	4299      	cmp	r1, r3
 8009312:	db05      	blt.n	8009320 <_printf_float+0x1d0>
 8009314:	6823      	ldr	r3, [r4, #0]
 8009316:	6121      	str	r1, [r4, #16]
 8009318:	07d8      	lsls	r0, r3, #31
 800931a:	d5ea      	bpl.n	80092f2 <_printf_float+0x1a2>
 800931c:	1c4b      	adds	r3, r1, #1
 800931e:	e7e7      	b.n	80092f0 <_printf_float+0x1a0>
 8009320:	2900      	cmp	r1, #0
 8009322:	bfd4      	ite	le
 8009324:	f1c1 0202 	rsble	r2, r1, #2
 8009328:	2201      	movgt	r2, #1
 800932a:	4413      	add	r3, r2
 800932c:	e7e0      	b.n	80092f0 <_printf_float+0x1a0>
 800932e:	6823      	ldr	r3, [r4, #0]
 8009330:	055a      	lsls	r2, r3, #21
 8009332:	d407      	bmi.n	8009344 <_printf_float+0x1f4>
 8009334:	6923      	ldr	r3, [r4, #16]
 8009336:	4642      	mov	r2, r8
 8009338:	4631      	mov	r1, r6
 800933a:	4628      	mov	r0, r5
 800933c:	47b8      	blx	r7
 800933e:	3001      	adds	r0, #1
 8009340:	d12c      	bne.n	800939c <_printf_float+0x24c>
 8009342:	e764      	b.n	800920e <_printf_float+0xbe>
 8009344:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8009348:	f240 80e0 	bls.w	800950c <_printf_float+0x3bc>
 800934c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009350:	2200      	movs	r2, #0
 8009352:	2300      	movs	r3, #0
 8009354:	f7f7 fbb8 	bl	8000ac8 <__aeabi_dcmpeq>
 8009358:	2800      	cmp	r0, #0
 800935a:	d034      	beq.n	80093c6 <_printf_float+0x276>
 800935c:	4a37      	ldr	r2, [pc, #220]	; (800943c <_printf_float+0x2ec>)
 800935e:	2301      	movs	r3, #1
 8009360:	4631      	mov	r1, r6
 8009362:	4628      	mov	r0, r5
 8009364:	47b8      	blx	r7
 8009366:	3001      	adds	r0, #1
 8009368:	f43f af51 	beq.w	800920e <_printf_float+0xbe>
 800936c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009370:	429a      	cmp	r2, r3
 8009372:	db02      	blt.n	800937a <_printf_float+0x22a>
 8009374:	6823      	ldr	r3, [r4, #0]
 8009376:	07d8      	lsls	r0, r3, #31
 8009378:	d510      	bpl.n	800939c <_printf_float+0x24c>
 800937a:	ee18 3a10 	vmov	r3, s16
 800937e:	4652      	mov	r2, sl
 8009380:	4631      	mov	r1, r6
 8009382:	4628      	mov	r0, r5
 8009384:	47b8      	blx	r7
 8009386:	3001      	adds	r0, #1
 8009388:	f43f af41 	beq.w	800920e <_printf_float+0xbe>
 800938c:	f04f 0800 	mov.w	r8, #0
 8009390:	f104 091a 	add.w	r9, r4, #26
 8009394:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009396:	3b01      	subs	r3, #1
 8009398:	4543      	cmp	r3, r8
 800939a:	dc09      	bgt.n	80093b0 <_printf_float+0x260>
 800939c:	6823      	ldr	r3, [r4, #0]
 800939e:	079b      	lsls	r3, r3, #30
 80093a0:	f100 8107 	bmi.w	80095b2 <_printf_float+0x462>
 80093a4:	68e0      	ldr	r0, [r4, #12]
 80093a6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80093a8:	4298      	cmp	r0, r3
 80093aa:	bfb8      	it	lt
 80093ac:	4618      	movlt	r0, r3
 80093ae:	e730      	b.n	8009212 <_printf_float+0xc2>
 80093b0:	2301      	movs	r3, #1
 80093b2:	464a      	mov	r2, r9
 80093b4:	4631      	mov	r1, r6
 80093b6:	4628      	mov	r0, r5
 80093b8:	47b8      	blx	r7
 80093ba:	3001      	adds	r0, #1
 80093bc:	f43f af27 	beq.w	800920e <_printf_float+0xbe>
 80093c0:	f108 0801 	add.w	r8, r8, #1
 80093c4:	e7e6      	b.n	8009394 <_printf_float+0x244>
 80093c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80093c8:	2b00      	cmp	r3, #0
 80093ca:	dc39      	bgt.n	8009440 <_printf_float+0x2f0>
 80093cc:	4a1b      	ldr	r2, [pc, #108]	; (800943c <_printf_float+0x2ec>)
 80093ce:	2301      	movs	r3, #1
 80093d0:	4631      	mov	r1, r6
 80093d2:	4628      	mov	r0, r5
 80093d4:	47b8      	blx	r7
 80093d6:	3001      	adds	r0, #1
 80093d8:	f43f af19 	beq.w	800920e <_printf_float+0xbe>
 80093dc:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80093e0:	4313      	orrs	r3, r2
 80093e2:	d102      	bne.n	80093ea <_printf_float+0x29a>
 80093e4:	6823      	ldr	r3, [r4, #0]
 80093e6:	07d9      	lsls	r1, r3, #31
 80093e8:	d5d8      	bpl.n	800939c <_printf_float+0x24c>
 80093ea:	ee18 3a10 	vmov	r3, s16
 80093ee:	4652      	mov	r2, sl
 80093f0:	4631      	mov	r1, r6
 80093f2:	4628      	mov	r0, r5
 80093f4:	47b8      	blx	r7
 80093f6:	3001      	adds	r0, #1
 80093f8:	f43f af09 	beq.w	800920e <_printf_float+0xbe>
 80093fc:	f04f 0900 	mov.w	r9, #0
 8009400:	f104 0a1a 	add.w	sl, r4, #26
 8009404:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009406:	425b      	negs	r3, r3
 8009408:	454b      	cmp	r3, r9
 800940a:	dc01      	bgt.n	8009410 <_printf_float+0x2c0>
 800940c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800940e:	e792      	b.n	8009336 <_printf_float+0x1e6>
 8009410:	2301      	movs	r3, #1
 8009412:	4652      	mov	r2, sl
 8009414:	4631      	mov	r1, r6
 8009416:	4628      	mov	r0, r5
 8009418:	47b8      	blx	r7
 800941a:	3001      	adds	r0, #1
 800941c:	f43f aef7 	beq.w	800920e <_printf_float+0xbe>
 8009420:	f109 0901 	add.w	r9, r9, #1
 8009424:	e7ee      	b.n	8009404 <_printf_float+0x2b4>
 8009426:	bf00      	nop
 8009428:	7fefffff 	.word	0x7fefffff
 800942c:	0800ff80 	.word	0x0800ff80
 8009430:	0800ff84 	.word	0x0800ff84
 8009434:	0800ff88 	.word	0x0800ff88
 8009438:	0800ff8c 	.word	0x0800ff8c
 800943c:	0800ff90 	.word	0x0800ff90
 8009440:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009442:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009444:	429a      	cmp	r2, r3
 8009446:	bfa8      	it	ge
 8009448:	461a      	movge	r2, r3
 800944a:	2a00      	cmp	r2, #0
 800944c:	4691      	mov	r9, r2
 800944e:	dc37      	bgt.n	80094c0 <_printf_float+0x370>
 8009450:	f04f 0b00 	mov.w	fp, #0
 8009454:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009458:	f104 021a 	add.w	r2, r4, #26
 800945c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800945e:	9305      	str	r3, [sp, #20]
 8009460:	eba3 0309 	sub.w	r3, r3, r9
 8009464:	455b      	cmp	r3, fp
 8009466:	dc33      	bgt.n	80094d0 <_printf_float+0x380>
 8009468:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800946c:	429a      	cmp	r2, r3
 800946e:	db3b      	blt.n	80094e8 <_printf_float+0x398>
 8009470:	6823      	ldr	r3, [r4, #0]
 8009472:	07da      	lsls	r2, r3, #31
 8009474:	d438      	bmi.n	80094e8 <_printf_float+0x398>
 8009476:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800947a:	eba2 0903 	sub.w	r9, r2, r3
 800947e:	9b05      	ldr	r3, [sp, #20]
 8009480:	1ad2      	subs	r2, r2, r3
 8009482:	4591      	cmp	r9, r2
 8009484:	bfa8      	it	ge
 8009486:	4691      	movge	r9, r2
 8009488:	f1b9 0f00 	cmp.w	r9, #0
 800948c:	dc35      	bgt.n	80094fa <_printf_float+0x3aa>
 800948e:	f04f 0800 	mov.w	r8, #0
 8009492:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009496:	f104 0a1a 	add.w	sl, r4, #26
 800949a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800949e:	1a9b      	subs	r3, r3, r2
 80094a0:	eba3 0309 	sub.w	r3, r3, r9
 80094a4:	4543      	cmp	r3, r8
 80094a6:	f77f af79 	ble.w	800939c <_printf_float+0x24c>
 80094aa:	2301      	movs	r3, #1
 80094ac:	4652      	mov	r2, sl
 80094ae:	4631      	mov	r1, r6
 80094b0:	4628      	mov	r0, r5
 80094b2:	47b8      	blx	r7
 80094b4:	3001      	adds	r0, #1
 80094b6:	f43f aeaa 	beq.w	800920e <_printf_float+0xbe>
 80094ba:	f108 0801 	add.w	r8, r8, #1
 80094be:	e7ec      	b.n	800949a <_printf_float+0x34a>
 80094c0:	4613      	mov	r3, r2
 80094c2:	4631      	mov	r1, r6
 80094c4:	4642      	mov	r2, r8
 80094c6:	4628      	mov	r0, r5
 80094c8:	47b8      	blx	r7
 80094ca:	3001      	adds	r0, #1
 80094cc:	d1c0      	bne.n	8009450 <_printf_float+0x300>
 80094ce:	e69e      	b.n	800920e <_printf_float+0xbe>
 80094d0:	2301      	movs	r3, #1
 80094d2:	4631      	mov	r1, r6
 80094d4:	4628      	mov	r0, r5
 80094d6:	9205      	str	r2, [sp, #20]
 80094d8:	47b8      	blx	r7
 80094da:	3001      	adds	r0, #1
 80094dc:	f43f ae97 	beq.w	800920e <_printf_float+0xbe>
 80094e0:	9a05      	ldr	r2, [sp, #20]
 80094e2:	f10b 0b01 	add.w	fp, fp, #1
 80094e6:	e7b9      	b.n	800945c <_printf_float+0x30c>
 80094e8:	ee18 3a10 	vmov	r3, s16
 80094ec:	4652      	mov	r2, sl
 80094ee:	4631      	mov	r1, r6
 80094f0:	4628      	mov	r0, r5
 80094f2:	47b8      	blx	r7
 80094f4:	3001      	adds	r0, #1
 80094f6:	d1be      	bne.n	8009476 <_printf_float+0x326>
 80094f8:	e689      	b.n	800920e <_printf_float+0xbe>
 80094fa:	9a05      	ldr	r2, [sp, #20]
 80094fc:	464b      	mov	r3, r9
 80094fe:	4442      	add	r2, r8
 8009500:	4631      	mov	r1, r6
 8009502:	4628      	mov	r0, r5
 8009504:	47b8      	blx	r7
 8009506:	3001      	adds	r0, #1
 8009508:	d1c1      	bne.n	800948e <_printf_float+0x33e>
 800950a:	e680      	b.n	800920e <_printf_float+0xbe>
 800950c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800950e:	2a01      	cmp	r2, #1
 8009510:	dc01      	bgt.n	8009516 <_printf_float+0x3c6>
 8009512:	07db      	lsls	r3, r3, #31
 8009514:	d53a      	bpl.n	800958c <_printf_float+0x43c>
 8009516:	2301      	movs	r3, #1
 8009518:	4642      	mov	r2, r8
 800951a:	4631      	mov	r1, r6
 800951c:	4628      	mov	r0, r5
 800951e:	47b8      	blx	r7
 8009520:	3001      	adds	r0, #1
 8009522:	f43f ae74 	beq.w	800920e <_printf_float+0xbe>
 8009526:	ee18 3a10 	vmov	r3, s16
 800952a:	4652      	mov	r2, sl
 800952c:	4631      	mov	r1, r6
 800952e:	4628      	mov	r0, r5
 8009530:	47b8      	blx	r7
 8009532:	3001      	adds	r0, #1
 8009534:	f43f ae6b 	beq.w	800920e <_printf_float+0xbe>
 8009538:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800953c:	2200      	movs	r2, #0
 800953e:	2300      	movs	r3, #0
 8009540:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8009544:	f7f7 fac0 	bl	8000ac8 <__aeabi_dcmpeq>
 8009548:	b9d8      	cbnz	r0, 8009582 <_printf_float+0x432>
 800954a:	f10a 33ff 	add.w	r3, sl, #4294967295
 800954e:	f108 0201 	add.w	r2, r8, #1
 8009552:	4631      	mov	r1, r6
 8009554:	4628      	mov	r0, r5
 8009556:	47b8      	blx	r7
 8009558:	3001      	adds	r0, #1
 800955a:	d10e      	bne.n	800957a <_printf_float+0x42a>
 800955c:	e657      	b.n	800920e <_printf_float+0xbe>
 800955e:	2301      	movs	r3, #1
 8009560:	4652      	mov	r2, sl
 8009562:	4631      	mov	r1, r6
 8009564:	4628      	mov	r0, r5
 8009566:	47b8      	blx	r7
 8009568:	3001      	adds	r0, #1
 800956a:	f43f ae50 	beq.w	800920e <_printf_float+0xbe>
 800956e:	f108 0801 	add.w	r8, r8, #1
 8009572:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009574:	3b01      	subs	r3, #1
 8009576:	4543      	cmp	r3, r8
 8009578:	dcf1      	bgt.n	800955e <_printf_float+0x40e>
 800957a:	464b      	mov	r3, r9
 800957c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8009580:	e6da      	b.n	8009338 <_printf_float+0x1e8>
 8009582:	f04f 0800 	mov.w	r8, #0
 8009586:	f104 0a1a 	add.w	sl, r4, #26
 800958a:	e7f2      	b.n	8009572 <_printf_float+0x422>
 800958c:	2301      	movs	r3, #1
 800958e:	4642      	mov	r2, r8
 8009590:	e7df      	b.n	8009552 <_printf_float+0x402>
 8009592:	2301      	movs	r3, #1
 8009594:	464a      	mov	r2, r9
 8009596:	4631      	mov	r1, r6
 8009598:	4628      	mov	r0, r5
 800959a:	47b8      	blx	r7
 800959c:	3001      	adds	r0, #1
 800959e:	f43f ae36 	beq.w	800920e <_printf_float+0xbe>
 80095a2:	f108 0801 	add.w	r8, r8, #1
 80095a6:	68e3      	ldr	r3, [r4, #12]
 80095a8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80095aa:	1a5b      	subs	r3, r3, r1
 80095ac:	4543      	cmp	r3, r8
 80095ae:	dcf0      	bgt.n	8009592 <_printf_float+0x442>
 80095b0:	e6f8      	b.n	80093a4 <_printf_float+0x254>
 80095b2:	f04f 0800 	mov.w	r8, #0
 80095b6:	f104 0919 	add.w	r9, r4, #25
 80095ba:	e7f4      	b.n	80095a6 <_printf_float+0x456>

080095bc <_printf_common>:
 80095bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80095c0:	4616      	mov	r6, r2
 80095c2:	4699      	mov	r9, r3
 80095c4:	688a      	ldr	r2, [r1, #8]
 80095c6:	690b      	ldr	r3, [r1, #16]
 80095c8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80095cc:	4293      	cmp	r3, r2
 80095ce:	bfb8      	it	lt
 80095d0:	4613      	movlt	r3, r2
 80095d2:	6033      	str	r3, [r6, #0]
 80095d4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80095d8:	4607      	mov	r7, r0
 80095da:	460c      	mov	r4, r1
 80095dc:	b10a      	cbz	r2, 80095e2 <_printf_common+0x26>
 80095de:	3301      	adds	r3, #1
 80095e0:	6033      	str	r3, [r6, #0]
 80095e2:	6823      	ldr	r3, [r4, #0]
 80095e4:	0699      	lsls	r1, r3, #26
 80095e6:	bf42      	ittt	mi
 80095e8:	6833      	ldrmi	r3, [r6, #0]
 80095ea:	3302      	addmi	r3, #2
 80095ec:	6033      	strmi	r3, [r6, #0]
 80095ee:	6825      	ldr	r5, [r4, #0]
 80095f0:	f015 0506 	ands.w	r5, r5, #6
 80095f4:	d106      	bne.n	8009604 <_printf_common+0x48>
 80095f6:	f104 0a19 	add.w	sl, r4, #25
 80095fa:	68e3      	ldr	r3, [r4, #12]
 80095fc:	6832      	ldr	r2, [r6, #0]
 80095fe:	1a9b      	subs	r3, r3, r2
 8009600:	42ab      	cmp	r3, r5
 8009602:	dc26      	bgt.n	8009652 <_printf_common+0x96>
 8009604:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009608:	1e13      	subs	r3, r2, #0
 800960a:	6822      	ldr	r2, [r4, #0]
 800960c:	bf18      	it	ne
 800960e:	2301      	movne	r3, #1
 8009610:	0692      	lsls	r2, r2, #26
 8009612:	d42b      	bmi.n	800966c <_printf_common+0xb0>
 8009614:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009618:	4649      	mov	r1, r9
 800961a:	4638      	mov	r0, r7
 800961c:	47c0      	blx	r8
 800961e:	3001      	adds	r0, #1
 8009620:	d01e      	beq.n	8009660 <_printf_common+0xa4>
 8009622:	6823      	ldr	r3, [r4, #0]
 8009624:	6922      	ldr	r2, [r4, #16]
 8009626:	f003 0306 	and.w	r3, r3, #6
 800962a:	2b04      	cmp	r3, #4
 800962c:	bf02      	ittt	eq
 800962e:	68e5      	ldreq	r5, [r4, #12]
 8009630:	6833      	ldreq	r3, [r6, #0]
 8009632:	1aed      	subeq	r5, r5, r3
 8009634:	68a3      	ldr	r3, [r4, #8]
 8009636:	bf0c      	ite	eq
 8009638:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800963c:	2500      	movne	r5, #0
 800963e:	4293      	cmp	r3, r2
 8009640:	bfc4      	itt	gt
 8009642:	1a9b      	subgt	r3, r3, r2
 8009644:	18ed      	addgt	r5, r5, r3
 8009646:	2600      	movs	r6, #0
 8009648:	341a      	adds	r4, #26
 800964a:	42b5      	cmp	r5, r6
 800964c:	d11a      	bne.n	8009684 <_printf_common+0xc8>
 800964e:	2000      	movs	r0, #0
 8009650:	e008      	b.n	8009664 <_printf_common+0xa8>
 8009652:	2301      	movs	r3, #1
 8009654:	4652      	mov	r2, sl
 8009656:	4649      	mov	r1, r9
 8009658:	4638      	mov	r0, r7
 800965a:	47c0      	blx	r8
 800965c:	3001      	adds	r0, #1
 800965e:	d103      	bne.n	8009668 <_printf_common+0xac>
 8009660:	f04f 30ff 	mov.w	r0, #4294967295
 8009664:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009668:	3501      	adds	r5, #1
 800966a:	e7c6      	b.n	80095fa <_printf_common+0x3e>
 800966c:	18e1      	adds	r1, r4, r3
 800966e:	1c5a      	adds	r2, r3, #1
 8009670:	2030      	movs	r0, #48	; 0x30
 8009672:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009676:	4422      	add	r2, r4
 8009678:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800967c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009680:	3302      	adds	r3, #2
 8009682:	e7c7      	b.n	8009614 <_printf_common+0x58>
 8009684:	2301      	movs	r3, #1
 8009686:	4622      	mov	r2, r4
 8009688:	4649      	mov	r1, r9
 800968a:	4638      	mov	r0, r7
 800968c:	47c0      	blx	r8
 800968e:	3001      	adds	r0, #1
 8009690:	d0e6      	beq.n	8009660 <_printf_common+0xa4>
 8009692:	3601      	adds	r6, #1
 8009694:	e7d9      	b.n	800964a <_printf_common+0x8e>
	...

08009698 <_printf_i>:
 8009698:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800969c:	7e0f      	ldrb	r7, [r1, #24]
 800969e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80096a0:	2f78      	cmp	r7, #120	; 0x78
 80096a2:	4691      	mov	r9, r2
 80096a4:	4680      	mov	r8, r0
 80096a6:	460c      	mov	r4, r1
 80096a8:	469a      	mov	sl, r3
 80096aa:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80096ae:	d807      	bhi.n	80096c0 <_printf_i+0x28>
 80096b0:	2f62      	cmp	r7, #98	; 0x62
 80096b2:	d80a      	bhi.n	80096ca <_printf_i+0x32>
 80096b4:	2f00      	cmp	r7, #0
 80096b6:	f000 80d4 	beq.w	8009862 <_printf_i+0x1ca>
 80096ba:	2f58      	cmp	r7, #88	; 0x58
 80096bc:	f000 80c0 	beq.w	8009840 <_printf_i+0x1a8>
 80096c0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80096c4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80096c8:	e03a      	b.n	8009740 <_printf_i+0xa8>
 80096ca:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80096ce:	2b15      	cmp	r3, #21
 80096d0:	d8f6      	bhi.n	80096c0 <_printf_i+0x28>
 80096d2:	a101      	add	r1, pc, #4	; (adr r1, 80096d8 <_printf_i+0x40>)
 80096d4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80096d8:	08009731 	.word	0x08009731
 80096dc:	08009745 	.word	0x08009745
 80096e0:	080096c1 	.word	0x080096c1
 80096e4:	080096c1 	.word	0x080096c1
 80096e8:	080096c1 	.word	0x080096c1
 80096ec:	080096c1 	.word	0x080096c1
 80096f0:	08009745 	.word	0x08009745
 80096f4:	080096c1 	.word	0x080096c1
 80096f8:	080096c1 	.word	0x080096c1
 80096fc:	080096c1 	.word	0x080096c1
 8009700:	080096c1 	.word	0x080096c1
 8009704:	08009849 	.word	0x08009849
 8009708:	08009771 	.word	0x08009771
 800970c:	08009803 	.word	0x08009803
 8009710:	080096c1 	.word	0x080096c1
 8009714:	080096c1 	.word	0x080096c1
 8009718:	0800986b 	.word	0x0800986b
 800971c:	080096c1 	.word	0x080096c1
 8009720:	08009771 	.word	0x08009771
 8009724:	080096c1 	.word	0x080096c1
 8009728:	080096c1 	.word	0x080096c1
 800972c:	0800980b 	.word	0x0800980b
 8009730:	682b      	ldr	r3, [r5, #0]
 8009732:	1d1a      	adds	r2, r3, #4
 8009734:	681b      	ldr	r3, [r3, #0]
 8009736:	602a      	str	r2, [r5, #0]
 8009738:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800973c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009740:	2301      	movs	r3, #1
 8009742:	e09f      	b.n	8009884 <_printf_i+0x1ec>
 8009744:	6820      	ldr	r0, [r4, #0]
 8009746:	682b      	ldr	r3, [r5, #0]
 8009748:	0607      	lsls	r7, r0, #24
 800974a:	f103 0104 	add.w	r1, r3, #4
 800974e:	6029      	str	r1, [r5, #0]
 8009750:	d501      	bpl.n	8009756 <_printf_i+0xbe>
 8009752:	681e      	ldr	r6, [r3, #0]
 8009754:	e003      	b.n	800975e <_printf_i+0xc6>
 8009756:	0646      	lsls	r6, r0, #25
 8009758:	d5fb      	bpl.n	8009752 <_printf_i+0xba>
 800975a:	f9b3 6000 	ldrsh.w	r6, [r3]
 800975e:	2e00      	cmp	r6, #0
 8009760:	da03      	bge.n	800976a <_printf_i+0xd2>
 8009762:	232d      	movs	r3, #45	; 0x2d
 8009764:	4276      	negs	r6, r6
 8009766:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800976a:	485a      	ldr	r0, [pc, #360]	; (80098d4 <_printf_i+0x23c>)
 800976c:	230a      	movs	r3, #10
 800976e:	e012      	b.n	8009796 <_printf_i+0xfe>
 8009770:	682b      	ldr	r3, [r5, #0]
 8009772:	6820      	ldr	r0, [r4, #0]
 8009774:	1d19      	adds	r1, r3, #4
 8009776:	6029      	str	r1, [r5, #0]
 8009778:	0605      	lsls	r5, r0, #24
 800977a:	d501      	bpl.n	8009780 <_printf_i+0xe8>
 800977c:	681e      	ldr	r6, [r3, #0]
 800977e:	e002      	b.n	8009786 <_printf_i+0xee>
 8009780:	0641      	lsls	r1, r0, #25
 8009782:	d5fb      	bpl.n	800977c <_printf_i+0xe4>
 8009784:	881e      	ldrh	r6, [r3, #0]
 8009786:	4853      	ldr	r0, [pc, #332]	; (80098d4 <_printf_i+0x23c>)
 8009788:	2f6f      	cmp	r7, #111	; 0x6f
 800978a:	bf0c      	ite	eq
 800978c:	2308      	moveq	r3, #8
 800978e:	230a      	movne	r3, #10
 8009790:	2100      	movs	r1, #0
 8009792:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009796:	6865      	ldr	r5, [r4, #4]
 8009798:	60a5      	str	r5, [r4, #8]
 800979a:	2d00      	cmp	r5, #0
 800979c:	bfa2      	ittt	ge
 800979e:	6821      	ldrge	r1, [r4, #0]
 80097a0:	f021 0104 	bicge.w	r1, r1, #4
 80097a4:	6021      	strge	r1, [r4, #0]
 80097a6:	b90e      	cbnz	r6, 80097ac <_printf_i+0x114>
 80097a8:	2d00      	cmp	r5, #0
 80097aa:	d04b      	beq.n	8009844 <_printf_i+0x1ac>
 80097ac:	4615      	mov	r5, r2
 80097ae:	fbb6 f1f3 	udiv	r1, r6, r3
 80097b2:	fb03 6711 	mls	r7, r3, r1, r6
 80097b6:	5dc7      	ldrb	r7, [r0, r7]
 80097b8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80097bc:	4637      	mov	r7, r6
 80097be:	42bb      	cmp	r3, r7
 80097c0:	460e      	mov	r6, r1
 80097c2:	d9f4      	bls.n	80097ae <_printf_i+0x116>
 80097c4:	2b08      	cmp	r3, #8
 80097c6:	d10b      	bne.n	80097e0 <_printf_i+0x148>
 80097c8:	6823      	ldr	r3, [r4, #0]
 80097ca:	07de      	lsls	r6, r3, #31
 80097cc:	d508      	bpl.n	80097e0 <_printf_i+0x148>
 80097ce:	6923      	ldr	r3, [r4, #16]
 80097d0:	6861      	ldr	r1, [r4, #4]
 80097d2:	4299      	cmp	r1, r3
 80097d4:	bfde      	ittt	le
 80097d6:	2330      	movle	r3, #48	; 0x30
 80097d8:	f805 3c01 	strble.w	r3, [r5, #-1]
 80097dc:	f105 35ff 	addle.w	r5, r5, #4294967295
 80097e0:	1b52      	subs	r2, r2, r5
 80097e2:	6122      	str	r2, [r4, #16]
 80097e4:	f8cd a000 	str.w	sl, [sp]
 80097e8:	464b      	mov	r3, r9
 80097ea:	aa03      	add	r2, sp, #12
 80097ec:	4621      	mov	r1, r4
 80097ee:	4640      	mov	r0, r8
 80097f0:	f7ff fee4 	bl	80095bc <_printf_common>
 80097f4:	3001      	adds	r0, #1
 80097f6:	d14a      	bne.n	800988e <_printf_i+0x1f6>
 80097f8:	f04f 30ff 	mov.w	r0, #4294967295
 80097fc:	b004      	add	sp, #16
 80097fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009802:	6823      	ldr	r3, [r4, #0]
 8009804:	f043 0320 	orr.w	r3, r3, #32
 8009808:	6023      	str	r3, [r4, #0]
 800980a:	4833      	ldr	r0, [pc, #204]	; (80098d8 <_printf_i+0x240>)
 800980c:	2778      	movs	r7, #120	; 0x78
 800980e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8009812:	6823      	ldr	r3, [r4, #0]
 8009814:	6829      	ldr	r1, [r5, #0]
 8009816:	061f      	lsls	r7, r3, #24
 8009818:	f851 6b04 	ldr.w	r6, [r1], #4
 800981c:	d402      	bmi.n	8009824 <_printf_i+0x18c>
 800981e:	065f      	lsls	r7, r3, #25
 8009820:	bf48      	it	mi
 8009822:	b2b6      	uxthmi	r6, r6
 8009824:	07df      	lsls	r7, r3, #31
 8009826:	bf48      	it	mi
 8009828:	f043 0320 	orrmi.w	r3, r3, #32
 800982c:	6029      	str	r1, [r5, #0]
 800982e:	bf48      	it	mi
 8009830:	6023      	strmi	r3, [r4, #0]
 8009832:	b91e      	cbnz	r6, 800983c <_printf_i+0x1a4>
 8009834:	6823      	ldr	r3, [r4, #0]
 8009836:	f023 0320 	bic.w	r3, r3, #32
 800983a:	6023      	str	r3, [r4, #0]
 800983c:	2310      	movs	r3, #16
 800983e:	e7a7      	b.n	8009790 <_printf_i+0xf8>
 8009840:	4824      	ldr	r0, [pc, #144]	; (80098d4 <_printf_i+0x23c>)
 8009842:	e7e4      	b.n	800980e <_printf_i+0x176>
 8009844:	4615      	mov	r5, r2
 8009846:	e7bd      	b.n	80097c4 <_printf_i+0x12c>
 8009848:	682b      	ldr	r3, [r5, #0]
 800984a:	6826      	ldr	r6, [r4, #0]
 800984c:	6961      	ldr	r1, [r4, #20]
 800984e:	1d18      	adds	r0, r3, #4
 8009850:	6028      	str	r0, [r5, #0]
 8009852:	0635      	lsls	r5, r6, #24
 8009854:	681b      	ldr	r3, [r3, #0]
 8009856:	d501      	bpl.n	800985c <_printf_i+0x1c4>
 8009858:	6019      	str	r1, [r3, #0]
 800985a:	e002      	b.n	8009862 <_printf_i+0x1ca>
 800985c:	0670      	lsls	r0, r6, #25
 800985e:	d5fb      	bpl.n	8009858 <_printf_i+0x1c0>
 8009860:	8019      	strh	r1, [r3, #0]
 8009862:	2300      	movs	r3, #0
 8009864:	6123      	str	r3, [r4, #16]
 8009866:	4615      	mov	r5, r2
 8009868:	e7bc      	b.n	80097e4 <_printf_i+0x14c>
 800986a:	682b      	ldr	r3, [r5, #0]
 800986c:	1d1a      	adds	r2, r3, #4
 800986e:	602a      	str	r2, [r5, #0]
 8009870:	681d      	ldr	r5, [r3, #0]
 8009872:	6862      	ldr	r2, [r4, #4]
 8009874:	2100      	movs	r1, #0
 8009876:	4628      	mov	r0, r5
 8009878:	f7f6 fcaa 	bl	80001d0 <memchr>
 800987c:	b108      	cbz	r0, 8009882 <_printf_i+0x1ea>
 800987e:	1b40      	subs	r0, r0, r5
 8009880:	6060      	str	r0, [r4, #4]
 8009882:	6863      	ldr	r3, [r4, #4]
 8009884:	6123      	str	r3, [r4, #16]
 8009886:	2300      	movs	r3, #0
 8009888:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800988c:	e7aa      	b.n	80097e4 <_printf_i+0x14c>
 800988e:	6923      	ldr	r3, [r4, #16]
 8009890:	462a      	mov	r2, r5
 8009892:	4649      	mov	r1, r9
 8009894:	4640      	mov	r0, r8
 8009896:	47d0      	blx	sl
 8009898:	3001      	adds	r0, #1
 800989a:	d0ad      	beq.n	80097f8 <_printf_i+0x160>
 800989c:	6823      	ldr	r3, [r4, #0]
 800989e:	079b      	lsls	r3, r3, #30
 80098a0:	d413      	bmi.n	80098ca <_printf_i+0x232>
 80098a2:	68e0      	ldr	r0, [r4, #12]
 80098a4:	9b03      	ldr	r3, [sp, #12]
 80098a6:	4298      	cmp	r0, r3
 80098a8:	bfb8      	it	lt
 80098aa:	4618      	movlt	r0, r3
 80098ac:	e7a6      	b.n	80097fc <_printf_i+0x164>
 80098ae:	2301      	movs	r3, #1
 80098b0:	4632      	mov	r2, r6
 80098b2:	4649      	mov	r1, r9
 80098b4:	4640      	mov	r0, r8
 80098b6:	47d0      	blx	sl
 80098b8:	3001      	adds	r0, #1
 80098ba:	d09d      	beq.n	80097f8 <_printf_i+0x160>
 80098bc:	3501      	adds	r5, #1
 80098be:	68e3      	ldr	r3, [r4, #12]
 80098c0:	9903      	ldr	r1, [sp, #12]
 80098c2:	1a5b      	subs	r3, r3, r1
 80098c4:	42ab      	cmp	r3, r5
 80098c6:	dcf2      	bgt.n	80098ae <_printf_i+0x216>
 80098c8:	e7eb      	b.n	80098a2 <_printf_i+0x20a>
 80098ca:	2500      	movs	r5, #0
 80098cc:	f104 0619 	add.w	r6, r4, #25
 80098d0:	e7f5      	b.n	80098be <_printf_i+0x226>
 80098d2:	bf00      	nop
 80098d4:	0800ff92 	.word	0x0800ff92
 80098d8:	0800ffa3 	.word	0x0800ffa3

080098dc <__sflush_r>:
 80098dc:	898a      	ldrh	r2, [r1, #12]
 80098de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80098e2:	4605      	mov	r5, r0
 80098e4:	0710      	lsls	r0, r2, #28
 80098e6:	460c      	mov	r4, r1
 80098e8:	d458      	bmi.n	800999c <__sflush_r+0xc0>
 80098ea:	684b      	ldr	r3, [r1, #4]
 80098ec:	2b00      	cmp	r3, #0
 80098ee:	dc05      	bgt.n	80098fc <__sflush_r+0x20>
 80098f0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80098f2:	2b00      	cmp	r3, #0
 80098f4:	dc02      	bgt.n	80098fc <__sflush_r+0x20>
 80098f6:	2000      	movs	r0, #0
 80098f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80098fc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80098fe:	2e00      	cmp	r6, #0
 8009900:	d0f9      	beq.n	80098f6 <__sflush_r+0x1a>
 8009902:	2300      	movs	r3, #0
 8009904:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009908:	682f      	ldr	r7, [r5, #0]
 800990a:	6a21      	ldr	r1, [r4, #32]
 800990c:	602b      	str	r3, [r5, #0]
 800990e:	d032      	beq.n	8009976 <__sflush_r+0x9a>
 8009910:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009912:	89a3      	ldrh	r3, [r4, #12]
 8009914:	075a      	lsls	r2, r3, #29
 8009916:	d505      	bpl.n	8009924 <__sflush_r+0x48>
 8009918:	6863      	ldr	r3, [r4, #4]
 800991a:	1ac0      	subs	r0, r0, r3
 800991c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800991e:	b10b      	cbz	r3, 8009924 <__sflush_r+0x48>
 8009920:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009922:	1ac0      	subs	r0, r0, r3
 8009924:	2300      	movs	r3, #0
 8009926:	4602      	mov	r2, r0
 8009928:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800992a:	6a21      	ldr	r1, [r4, #32]
 800992c:	4628      	mov	r0, r5
 800992e:	47b0      	blx	r6
 8009930:	1c43      	adds	r3, r0, #1
 8009932:	89a3      	ldrh	r3, [r4, #12]
 8009934:	d106      	bne.n	8009944 <__sflush_r+0x68>
 8009936:	6829      	ldr	r1, [r5, #0]
 8009938:	291d      	cmp	r1, #29
 800993a:	d82b      	bhi.n	8009994 <__sflush_r+0xb8>
 800993c:	4a29      	ldr	r2, [pc, #164]	; (80099e4 <__sflush_r+0x108>)
 800993e:	410a      	asrs	r2, r1
 8009940:	07d6      	lsls	r6, r2, #31
 8009942:	d427      	bmi.n	8009994 <__sflush_r+0xb8>
 8009944:	2200      	movs	r2, #0
 8009946:	6062      	str	r2, [r4, #4]
 8009948:	04d9      	lsls	r1, r3, #19
 800994a:	6922      	ldr	r2, [r4, #16]
 800994c:	6022      	str	r2, [r4, #0]
 800994e:	d504      	bpl.n	800995a <__sflush_r+0x7e>
 8009950:	1c42      	adds	r2, r0, #1
 8009952:	d101      	bne.n	8009958 <__sflush_r+0x7c>
 8009954:	682b      	ldr	r3, [r5, #0]
 8009956:	b903      	cbnz	r3, 800995a <__sflush_r+0x7e>
 8009958:	6560      	str	r0, [r4, #84]	; 0x54
 800995a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800995c:	602f      	str	r7, [r5, #0]
 800995e:	2900      	cmp	r1, #0
 8009960:	d0c9      	beq.n	80098f6 <__sflush_r+0x1a>
 8009962:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009966:	4299      	cmp	r1, r3
 8009968:	d002      	beq.n	8009970 <__sflush_r+0x94>
 800996a:	4628      	mov	r0, r5
 800996c:	f001 f8a6 	bl	800aabc <_free_r>
 8009970:	2000      	movs	r0, #0
 8009972:	6360      	str	r0, [r4, #52]	; 0x34
 8009974:	e7c0      	b.n	80098f8 <__sflush_r+0x1c>
 8009976:	2301      	movs	r3, #1
 8009978:	4628      	mov	r0, r5
 800997a:	47b0      	blx	r6
 800997c:	1c41      	adds	r1, r0, #1
 800997e:	d1c8      	bne.n	8009912 <__sflush_r+0x36>
 8009980:	682b      	ldr	r3, [r5, #0]
 8009982:	2b00      	cmp	r3, #0
 8009984:	d0c5      	beq.n	8009912 <__sflush_r+0x36>
 8009986:	2b1d      	cmp	r3, #29
 8009988:	d001      	beq.n	800998e <__sflush_r+0xb2>
 800998a:	2b16      	cmp	r3, #22
 800998c:	d101      	bne.n	8009992 <__sflush_r+0xb6>
 800998e:	602f      	str	r7, [r5, #0]
 8009990:	e7b1      	b.n	80098f6 <__sflush_r+0x1a>
 8009992:	89a3      	ldrh	r3, [r4, #12]
 8009994:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009998:	81a3      	strh	r3, [r4, #12]
 800999a:	e7ad      	b.n	80098f8 <__sflush_r+0x1c>
 800999c:	690f      	ldr	r7, [r1, #16]
 800999e:	2f00      	cmp	r7, #0
 80099a0:	d0a9      	beq.n	80098f6 <__sflush_r+0x1a>
 80099a2:	0793      	lsls	r3, r2, #30
 80099a4:	680e      	ldr	r6, [r1, #0]
 80099a6:	bf08      	it	eq
 80099a8:	694b      	ldreq	r3, [r1, #20]
 80099aa:	600f      	str	r7, [r1, #0]
 80099ac:	bf18      	it	ne
 80099ae:	2300      	movne	r3, #0
 80099b0:	eba6 0807 	sub.w	r8, r6, r7
 80099b4:	608b      	str	r3, [r1, #8]
 80099b6:	f1b8 0f00 	cmp.w	r8, #0
 80099ba:	dd9c      	ble.n	80098f6 <__sflush_r+0x1a>
 80099bc:	6a21      	ldr	r1, [r4, #32]
 80099be:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80099c0:	4643      	mov	r3, r8
 80099c2:	463a      	mov	r2, r7
 80099c4:	4628      	mov	r0, r5
 80099c6:	47b0      	blx	r6
 80099c8:	2800      	cmp	r0, #0
 80099ca:	dc06      	bgt.n	80099da <__sflush_r+0xfe>
 80099cc:	89a3      	ldrh	r3, [r4, #12]
 80099ce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80099d2:	81a3      	strh	r3, [r4, #12]
 80099d4:	f04f 30ff 	mov.w	r0, #4294967295
 80099d8:	e78e      	b.n	80098f8 <__sflush_r+0x1c>
 80099da:	4407      	add	r7, r0
 80099dc:	eba8 0800 	sub.w	r8, r8, r0
 80099e0:	e7e9      	b.n	80099b6 <__sflush_r+0xda>
 80099e2:	bf00      	nop
 80099e4:	dfbffffe 	.word	0xdfbffffe

080099e8 <_fflush_r>:
 80099e8:	b538      	push	{r3, r4, r5, lr}
 80099ea:	690b      	ldr	r3, [r1, #16]
 80099ec:	4605      	mov	r5, r0
 80099ee:	460c      	mov	r4, r1
 80099f0:	b913      	cbnz	r3, 80099f8 <_fflush_r+0x10>
 80099f2:	2500      	movs	r5, #0
 80099f4:	4628      	mov	r0, r5
 80099f6:	bd38      	pop	{r3, r4, r5, pc}
 80099f8:	b118      	cbz	r0, 8009a02 <_fflush_r+0x1a>
 80099fa:	6a03      	ldr	r3, [r0, #32]
 80099fc:	b90b      	cbnz	r3, 8009a02 <_fflush_r+0x1a>
 80099fe:	f000 f8a7 	bl	8009b50 <__sinit>
 8009a02:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009a06:	2b00      	cmp	r3, #0
 8009a08:	d0f3      	beq.n	80099f2 <_fflush_r+0xa>
 8009a0a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009a0c:	07d0      	lsls	r0, r2, #31
 8009a0e:	d404      	bmi.n	8009a1a <_fflush_r+0x32>
 8009a10:	0599      	lsls	r1, r3, #22
 8009a12:	d402      	bmi.n	8009a1a <_fflush_r+0x32>
 8009a14:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009a16:	f000 f9c6 	bl	8009da6 <__retarget_lock_acquire_recursive>
 8009a1a:	4628      	mov	r0, r5
 8009a1c:	4621      	mov	r1, r4
 8009a1e:	f7ff ff5d 	bl	80098dc <__sflush_r>
 8009a22:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009a24:	07da      	lsls	r2, r3, #31
 8009a26:	4605      	mov	r5, r0
 8009a28:	d4e4      	bmi.n	80099f4 <_fflush_r+0xc>
 8009a2a:	89a3      	ldrh	r3, [r4, #12]
 8009a2c:	059b      	lsls	r3, r3, #22
 8009a2e:	d4e1      	bmi.n	80099f4 <_fflush_r+0xc>
 8009a30:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009a32:	f000 f9b9 	bl	8009da8 <__retarget_lock_release_recursive>
 8009a36:	e7dd      	b.n	80099f4 <_fflush_r+0xc>

08009a38 <std>:
 8009a38:	2300      	movs	r3, #0
 8009a3a:	b510      	push	{r4, lr}
 8009a3c:	4604      	mov	r4, r0
 8009a3e:	e9c0 3300 	strd	r3, r3, [r0]
 8009a42:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009a46:	6083      	str	r3, [r0, #8]
 8009a48:	8181      	strh	r1, [r0, #12]
 8009a4a:	6643      	str	r3, [r0, #100]	; 0x64
 8009a4c:	81c2      	strh	r2, [r0, #14]
 8009a4e:	6183      	str	r3, [r0, #24]
 8009a50:	4619      	mov	r1, r3
 8009a52:	2208      	movs	r2, #8
 8009a54:	305c      	adds	r0, #92	; 0x5c
 8009a56:	f000 f929 	bl	8009cac <memset>
 8009a5a:	4b0d      	ldr	r3, [pc, #52]	; (8009a90 <std+0x58>)
 8009a5c:	6263      	str	r3, [r4, #36]	; 0x24
 8009a5e:	4b0d      	ldr	r3, [pc, #52]	; (8009a94 <std+0x5c>)
 8009a60:	62a3      	str	r3, [r4, #40]	; 0x28
 8009a62:	4b0d      	ldr	r3, [pc, #52]	; (8009a98 <std+0x60>)
 8009a64:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009a66:	4b0d      	ldr	r3, [pc, #52]	; (8009a9c <std+0x64>)
 8009a68:	6323      	str	r3, [r4, #48]	; 0x30
 8009a6a:	4b0d      	ldr	r3, [pc, #52]	; (8009aa0 <std+0x68>)
 8009a6c:	6224      	str	r4, [r4, #32]
 8009a6e:	429c      	cmp	r4, r3
 8009a70:	d006      	beq.n	8009a80 <std+0x48>
 8009a72:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8009a76:	4294      	cmp	r4, r2
 8009a78:	d002      	beq.n	8009a80 <std+0x48>
 8009a7a:	33d0      	adds	r3, #208	; 0xd0
 8009a7c:	429c      	cmp	r4, r3
 8009a7e:	d105      	bne.n	8009a8c <std+0x54>
 8009a80:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8009a84:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009a88:	f000 b98c 	b.w	8009da4 <__retarget_lock_init_recursive>
 8009a8c:	bd10      	pop	{r4, pc}
 8009a8e:	bf00      	nop
 8009a90:	08009bbd 	.word	0x08009bbd
 8009a94:	08009bdf 	.word	0x08009bdf
 8009a98:	08009c17 	.word	0x08009c17
 8009a9c:	08009c3b 	.word	0x08009c3b
 8009aa0:	2000a67c 	.word	0x2000a67c

08009aa4 <stdio_exit_handler>:
 8009aa4:	4a02      	ldr	r2, [pc, #8]	; (8009ab0 <stdio_exit_handler+0xc>)
 8009aa6:	4903      	ldr	r1, [pc, #12]	; (8009ab4 <stdio_exit_handler+0x10>)
 8009aa8:	4803      	ldr	r0, [pc, #12]	; (8009ab8 <stdio_exit_handler+0x14>)
 8009aaa:	f000 b869 	b.w	8009b80 <_fwalk_sglue>
 8009aae:	bf00      	nop
 8009ab0:	20000018 	.word	0x20000018
 8009ab4:	080099e9 	.word	0x080099e9
 8009ab8:	20000024 	.word	0x20000024

08009abc <cleanup_stdio>:
 8009abc:	6841      	ldr	r1, [r0, #4]
 8009abe:	4b0c      	ldr	r3, [pc, #48]	; (8009af0 <cleanup_stdio+0x34>)
 8009ac0:	4299      	cmp	r1, r3
 8009ac2:	b510      	push	{r4, lr}
 8009ac4:	4604      	mov	r4, r0
 8009ac6:	d001      	beq.n	8009acc <cleanup_stdio+0x10>
 8009ac8:	f7ff ff8e 	bl	80099e8 <_fflush_r>
 8009acc:	68a1      	ldr	r1, [r4, #8]
 8009ace:	4b09      	ldr	r3, [pc, #36]	; (8009af4 <cleanup_stdio+0x38>)
 8009ad0:	4299      	cmp	r1, r3
 8009ad2:	d002      	beq.n	8009ada <cleanup_stdio+0x1e>
 8009ad4:	4620      	mov	r0, r4
 8009ad6:	f7ff ff87 	bl	80099e8 <_fflush_r>
 8009ada:	68e1      	ldr	r1, [r4, #12]
 8009adc:	4b06      	ldr	r3, [pc, #24]	; (8009af8 <cleanup_stdio+0x3c>)
 8009ade:	4299      	cmp	r1, r3
 8009ae0:	d004      	beq.n	8009aec <cleanup_stdio+0x30>
 8009ae2:	4620      	mov	r0, r4
 8009ae4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009ae8:	f7ff bf7e 	b.w	80099e8 <_fflush_r>
 8009aec:	bd10      	pop	{r4, pc}
 8009aee:	bf00      	nop
 8009af0:	2000a67c 	.word	0x2000a67c
 8009af4:	2000a6e4 	.word	0x2000a6e4
 8009af8:	2000a74c 	.word	0x2000a74c

08009afc <global_stdio_init.part.0>:
 8009afc:	b510      	push	{r4, lr}
 8009afe:	4b0b      	ldr	r3, [pc, #44]	; (8009b2c <global_stdio_init.part.0+0x30>)
 8009b00:	4c0b      	ldr	r4, [pc, #44]	; (8009b30 <global_stdio_init.part.0+0x34>)
 8009b02:	4a0c      	ldr	r2, [pc, #48]	; (8009b34 <global_stdio_init.part.0+0x38>)
 8009b04:	601a      	str	r2, [r3, #0]
 8009b06:	4620      	mov	r0, r4
 8009b08:	2200      	movs	r2, #0
 8009b0a:	2104      	movs	r1, #4
 8009b0c:	f7ff ff94 	bl	8009a38 <std>
 8009b10:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8009b14:	2201      	movs	r2, #1
 8009b16:	2109      	movs	r1, #9
 8009b18:	f7ff ff8e 	bl	8009a38 <std>
 8009b1c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8009b20:	2202      	movs	r2, #2
 8009b22:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009b26:	2112      	movs	r1, #18
 8009b28:	f7ff bf86 	b.w	8009a38 <std>
 8009b2c:	2000a7b4 	.word	0x2000a7b4
 8009b30:	2000a67c 	.word	0x2000a67c
 8009b34:	08009aa5 	.word	0x08009aa5

08009b38 <__sfp_lock_acquire>:
 8009b38:	4801      	ldr	r0, [pc, #4]	; (8009b40 <__sfp_lock_acquire+0x8>)
 8009b3a:	f000 b934 	b.w	8009da6 <__retarget_lock_acquire_recursive>
 8009b3e:	bf00      	nop
 8009b40:	2000a7bd 	.word	0x2000a7bd

08009b44 <__sfp_lock_release>:
 8009b44:	4801      	ldr	r0, [pc, #4]	; (8009b4c <__sfp_lock_release+0x8>)
 8009b46:	f000 b92f 	b.w	8009da8 <__retarget_lock_release_recursive>
 8009b4a:	bf00      	nop
 8009b4c:	2000a7bd 	.word	0x2000a7bd

08009b50 <__sinit>:
 8009b50:	b510      	push	{r4, lr}
 8009b52:	4604      	mov	r4, r0
 8009b54:	f7ff fff0 	bl	8009b38 <__sfp_lock_acquire>
 8009b58:	6a23      	ldr	r3, [r4, #32]
 8009b5a:	b11b      	cbz	r3, 8009b64 <__sinit+0x14>
 8009b5c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009b60:	f7ff bff0 	b.w	8009b44 <__sfp_lock_release>
 8009b64:	4b04      	ldr	r3, [pc, #16]	; (8009b78 <__sinit+0x28>)
 8009b66:	6223      	str	r3, [r4, #32]
 8009b68:	4b04      	ldr	r3, [pc, #16]	; (8009b7c <__sinit+0x2c>)
 8009b6a:	681b      	ldr	r3, [r3, #0]
 8009b6c:	2b00      	cmp	r3, #0
 8009b6e:	d1f5      	bne.n	8009b5c <__sinit+0xc>
 8009b70:	f7ff ffc4 	bl	8009afc <global_stdio_init.part.0>
 8009b74:	e7f2      	b.n	8009b5c <__sinit+0xc>
 8009b76:	bf00      	nop
 8009b78:	08009abd 	.word	0x08009abd
 8009b7c:	2000a7b4 	.word	0x2000a7b4

08009b80 <_fwalk_sglue>:
 8009b80:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009b84:	4607      	mov	r7, r0
 8009b86:	4688      	mov	r8, r1
 8009b88:	4614      	mov	r4, r2
 8009b8a:	2600      	movs	r6, #0
 8009b8c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009b90:	f1b9 0901 	subs.w	r9, r9, #1
 8009b94:	d505      	bpl.n	8009ba2 <_fwalk_sglue+0x22>
 8009b96:	6824      	ldr	r4, [r4, #0]
 8009b98:	2c00      	cmp	r4, #0
 8009b9a:	d1f7      	bne.n	8009b8c <_fwalk_sglue+0xc>
 8009b9c:	4630      	mov	r0, r6
 8009b9e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009ba2:	89ab      	ldrh	r3, [r5, #12]
 8009ba4:	2b01      	cmp	r3, #1
 8009ba6:	d907      	bls.n	8009bb8 <_fwalk_sglue+0x38>
 8009ba8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009bac:	3301      	adds	r3, #1
 8009bae:	d003      	beq.n	8009bb8 <_fwalk_sglue+0x38>
 8009bb0:	4629      	mov	r1, r5
 8009bb2:	4638      	mov	r0, r7
 8009bb4:	47c0      	blx	r8
 8009bb6:	4306      	orrs	r6, r0
 8009bb8:	3568      	adds	r5, #104	; 0x68
 8009bba:	e7e9      	b.n	8009b90 <_fwalk_sglue+0x10>

08009bbc <__sread>:
 8009bbc:	b510      	push	{r4, lr}
 8009bbe:	460c      	mov	r4, r1
 8009bc0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009bc4:	f000 f8a0 	bl	8009d08 <_read_r>
 8009bc8:	2800      	cmp	r0, #0
 8009bca:	bfab      	itete	ge
 8009bcc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009bce:	89a3      	ldrhlt	r3, [r4, #12]
 8009bd0:	181b      	addge	r3, r3, r0
 8009bd2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009bd6:	bfac      	ite	ge
 8009bd8:	6563      	strge	r3, [r4, #84]	; 0x54
 8009bda:	81a3      	strhlt	r3, [r4, #12]
 8009bdc:	bd10      	pop	{r4, pc}

08009bde <__swrite>:
 8009bde:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009be2:	461f      	mov	r7, r3
 8009be4:	898b      	ldrh	r3, [r1, #12]
 8009be6:	05db      	lsls	r3, r3, #23
 8009be8:	4605      	mov	r5, r0
 8009bea:	460c      	mov	r4, r1
 8009bec:	4616      	mov	r6, r2
 8009bee:	d505      	bpl.n	8009bfc <__swrite+0x1e>
 8009bf0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009bf4:	2302      	movs	r3, #2
 8009bf6:	2200      	movs	r2, #0
 8009bf8:	f000 f874 	bl	8009ce4 <_lseek_r>
 8009bfc:	89a3      	ldrh	r3, [r4, #12]
 8009bfe:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009c02:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009c06:	81a3      	strh	r3, [r4, #12]
 8009c08:	4632      	mov	r2, r6
 8009c0a:	463b      	mov	r3, r7
 8009c0c:	4628      	mov	r0, r5
 8009c0e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009c12:	f000 b88b 	b.w	8009d2c <_write_r>

08009c16 <__sseek>:
 8009c16:	b510      	push	{r4, lr}
 8009c18:	460c      	mov	r4, r1
 8009c1a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009c1e:	f000 f861 	bl	8009ce4 <_lseek_r>
 8009c22:	1c43      	adds	r3, r0, #1
 8009c24:	89a3      	ldrh	r3, [r4, #12]
 8009c26:	bf15      	itete	ne
 8009c28:	6560      	strne	r0, [r4, #84]	; 0x54
 8009c2a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009c2e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009c32:	81a3      	strheq	r3, [r4, #12]
 8009c34:	bf18      	it	ne
 8009c36:	81a3      	strhne	r3, [r4, #12]
 8009c38:	bd10      	pop	{r4, pc}

08009c3a <__sclose>:
 8009c3a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009c3e:	f000 b841 	b.w	8009cc4 <_close_r>
	...

08009c44 <swprintf>:
 8009c44:	b40c      	push	{r2, r3}
 8009c46:	b530      	push	{r4, r5, lr}
 8009c48:	4b17      	ldr	r3, [pc, #92]	; (8009ca8 <swprintf+0x64>)
 8009c4a:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
 8009c4e:	681d      	ldr	r5, [r3, #0]
 8009c50:	b09d      	sub	sp, #116	; 0x74
 8009c52:	460c      	mov	r4, r1
 8009c54:	d308      	bcc.n	8009c68 <swprintf+0x24>
 8009c56:	238b      	movs	r3, #139	; 0x8b
 8009c58:	602b      	str	r3, [r5, #0]
 8009c5a:	f04f 30ff 	mov.w	r0, #4294967295
 8009c5e:	b01d      	add	sp, #116	; 0x74
 8009c60:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009c64:	b002      	add	sp, #8
 8009c66:	4770      	bx	lr
 8009c68:	f44f 7302 	mov.w	r3, #520	; 0x208
 8009c6c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8009c70:	9002      	str	r0, [sp, #8]
 8009c72:	9006      	str	r0, [sp, #24]
 8009c74:	b1b1      	cbz	r1, 8009ca4 <swprintf+0x60>
 8009c76:	1e4b      	subs	r3, r1, #1
 8009c78:	009b      	lsls	r3, r3, #2
 8009c7a:	9304      	str	r3, [sp, #16]
 8009c7c:	9307      	str	r3, [sp, #28]
 8009c7e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8009c82:	f8ad 3016 	strh.w	r3, [sp, #22]
 8009c86:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8009c88:	ab21      	add	r3, sp, #132	; 0x84
 8009c8a:	a902      	add	r1, sp, #8
 8009c8c:	4628      	mov	r0, r5
 8009c8e:	9301      	str	r3, [sp, #4]
 8009c90:	f001 fc62 	bl	800b558 <_svfwprintf_r>
 8009c94:	2c00      	cmp	r4, #0
 8009c96:	d0de      	beq.n	8009c56 <swprintf+0x12>
 8009c98:	9b02      	ldr	r3, [sp, #8]
 8009c9a:	2200      	movs	r2, #0
 8009c9c:	42a0      	cmp	r0, r4
 8009c9e:	601a      	str	r2, [r3, #0]
 8009ca0:	d3dd      	bcc.n	8009c5e <swprintf+0x1a>
 8009ca2:	e7d8      	b.n	8009c56 <swprintf+0x12>
 8009ca4:	460b      	mov	r3, r1
 8009ca6:	e7e8      	b.n	8009c7a <swprintf+0x36>
 8009ca8:	20000070 	.word	0x20000070

08009cac <memset>:
 8009cac:	4402      	add	r2, r0
 8009cae:	4603      	mov	r3, r0
 8009cb0:	4293      	cmp	r3, r2
 8009cb2:	d100      	bne.n	8009cb6 <memset+0xa>
 8009cb4:	4770      	bx	lr
 8009cb6:	f803 1b01 	strb.w	r1, [r3], #1
 8009cba:	e7f9      	b.n	8009cb0 <memset+0x4>

08009cbc <_localeconv_r>:
 8009cbc:	4800      	ldr	r0, [pc, #0]	; (8009cc0 <_localeconv_r+0x4>)
 8009cbe:	4770      	bx	lr
 8009cc0:	20000164 	.word	0x20000164

08009cc4 <_close_r>:
 8009cc4:	b538      	push	{r3, r4, r5, lr}
 8009cc6:	4d06      	ldr	r5, [pc, #24]	; (8009ce0 <_close_r+0x1c>)
 8009cc8:	2300      	movs	r3, #0
 8009cca:	4604      	mov	r4, r0
 8009ccc:	4608      	mov	r0, r1
 8009cce:	602b      	str	r3, [r5, #0]
 8009cd0:	f7f7 ffbb 	bl	8001c4a <_close>
 8009cd4:	1c43      	adds	r3, r0, #1
 8009cd6:	d102      	bne.n	8009cde <_close_r+0x1a>
 8009cd8:	682b      	ldr	r3, [r5, #0]
 8009cda:	b103      	cbz	r3, 8009cde <_close_r+0x1a>
 8009cdc:	6023      	str	r3, [r4, #0]
 8009cde:	bd38      	pop	{r3, r4, r5, pc}
 8009ce0:	2000a7b8 	.word	0x2000a7b8

08009ce4 <_lseek_r>:
 8009ce4:	b538      	push	{r3, r4, r5, lr}
 8009ce6:	4d07      	ldr	r5, [pc, #28]	; (8009d04 <_lseek_r+0x20>)
 8009ce8:	4604      	mov	r4, r0
 8009cea:	4608      	mov	r0, r1
 8009cec:	4611      	mov	r1, r2
 8009cee:	2200      	movs	r2, #0
 8009cf0:	602a      	str	r2, [r5, #0]
 8009cf2:	461a      	mov	r2, r3
 8009cf4:	f7f7 ffd0 	bl	8001c98 <_lseek>
 8009cf8:	1c43      	adds	r3, r0, #1
 8009cfa:	d102      	bne.n	8009d02 <_lseek_r+0x1e>
 8009cfc:	682b      	ldr	r3, [r5, #0]
 8009cfe:	b103      	cbz	r3, 8009d02 <_lseek_r+0x1e>
 8009d00:	6023      	str	r3, [r4, #0]
 8009d02:	bd38      	pop	{r3, r4, r5, pc}
 8009d04:	2000a7b8 	.word	0x2000a7b8

08009d08 <_read_r>:
 8009d08:	b538      	push	{r3, r4, r5, lr}
 8009d0a:	4d07      	ldr	r5, [pc, #28]	; (8009d28 <_read_r+0x20>)
 8009d0c:	4604      	mov	r4, r0
 8009d0e:	4608      	mov	r0, r1
 8009d10:	4611      	mov	r1, r2
 8009d12:	2200      	movs	r2, #0
 8009d14:	602a      	str	r2, [r5, #0]
 8009d16:	461a      	mov	r2, r3
 8009d18:	f7f7 ff5e 	bl	8001bd8 <_read>
 8009d1c:	1c43      	adds	r3, r0, #1
 8009d1e:	d102      	bne.n	8009d26 <_read_r+0x1e>
 8009d20:	682b      	ldr	r3, [r5, #0]
 8009d22:	b103      	cbz	r3, 8009d26 <_read_r+0x1e>
 8009d24:	6023      	str	r3, [r4, #0]
 8009d26:	bd38      	pop	{r3, r4, r5, pc}
 8009d28:	2000a7b8 	.word	0x2000a7b8

08009d2c <_write_r>:
 8009d2c:	b538      	push	{r3, r4, r5, lr}
 8009d2e:	4d07      	ldr	r5, [pc, #28]	; (8009d4c <_write_r+0x20>)
 8009d30:	4604      	mov	r4, r0
 8009d32:	4608      	mov	r0, r1
 8009d34:	4611      	mov	r1, r2
 8009d36:	2200      	movs	r2, #0
 8009d38:	602a      	str	r2, [r5, #0]
 8009d3a:	461a      	mov	r2, r3
 8009d3c:	f7f7 ff69 	bl	8001c12 <_write>
 8009d40:	1c43      	adds	r3, r0, #1
 8009d42:	d102      	bne.n	8009d4a <_write_r+0x1e>
 8009d44:	682b      	ldr	r3, [r5, #0]
 8009d46:	b103      	cbz	r3, 8009d4a <_write_r+0x1e>
 8009d48:	6023      	str	r3, [r4, #0]
 8009d4a:	bd38      	pop	{r3, r4, r5, pc}
 8009d4c:	2000a7b8 	.word	0x2000a7b8

08009d50 <__errno>:
 8009d50:	4b01      	ldr	r3, [pc, #4]	; (8009d58 <__errno+0x8>)
 8009d52:	6818      	ldr	r0, [r3, #0]
 8009d54:	4770      	bx	lr
 8009d56:	bf00      	nop
 8009d58:	20000070 	.word	0x20000070

08009d5c <__libc_init_array>:
 8009d5c:	b570      	push	{r4, r5, r6, lr}
 8009d5e:	4d0d      	ldr	r5, [pc, #52]	; (8009d94 <__libc_init_array+0x38>)
 8009d60:	4c0d      	ldr	r4, [pc, #52]	; (8009d98 <__libc_init_array+0x3c>)
 8009d62:	1b64      	subs	r4, r4, r5
 8009d64:	10a4      	asrs	r4, r4, #2
 8009d66:	2600      	movs	r6, #0
 8009d68:	42a6      	cmp	r6, r4
 8009d6a:	d109      	bne.n	8009d80 <__libc_init_array+0x24>
 8009d6c:	4d0b      	ldr	r5, [pc, #44]	; (8009d9c <__libc_init_array+0x40>)
 8009d6e:	4c0c      	ldr	r4, [pc, #48]	; (8009da0 <__libc_init_array+0x44>)
 8009d70:	f002 ffe4 	bl	800cd3c <_init>
 8009d74:	1b64      	subs	r4, r4, r5
 8009d76:	10a4      	asrs	r4, r4, #2
 8009d78:	2600      	movs	r6, #0
 8009d7a:	42a6      	cmp	r6, r4
 8009d7c:	d105      	bne.n	8009d8a <__libc_init_array+0x2e>
 8009d7e:	bd70      	pop	{r4, r5, r6, pc}
 8009d80:	f855 3b04 	ldr.w	r3, [r5], #4
 8009d84:	4798      	blx	r3
 8009d86:	3601      	adds	r6, #1
 8009d88:	e7ee      	b.n	8009d68 <__libc_init_array+0xc>
 8009d8a:	f855 3b04 	ldr.w	r3, [r5], #4
 8009d8e:	4798      	blx	r3
 8009d90:	3601      	adds	r6, #1
 8009d92:	e7f2      	b.n	8009d7a <__libc_init_array+0x1e>
 8009d94:	080104a8 	.word	0x080104a8
 8009d98:	080104a8 	.word	0x080104a8
 8009d9c:	080104a8 	.word	0x080104a8
 8009da0:	080104ac 	.word	0x080104ac

08009da4 <__retarget_lock_init_recursive>:
 8009da4:	4770      	bx	lr

08009da6 <__retarget_lock_acquire_recursive>:
 8009da6:	4770      	bx	lr

08009da8 <__retarget_lock_release_recursive>:
 8009da8:	4770      	bx	lr

08009daa <memcpy>:
 8009daa:	440a      	add	r2, r1
 8009dac:	4291      	cmp	r1, r2
 8009dae:	f100 33ff 	add.w	r3, r0, #4294967295
 8009db2:	d100      	bne.n	8009db6 <memcpy+0xc>
 8009db4:	4770      	bx	lr
 8009db6:	b510      	push	{r4, lr}
 8009db8:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009dbc:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009dc0:	4291      	cmp	r1, r2
 8009dc2:	d1f9      	bne.n	8009db8 <memcpy+0xe>
 8009dc4:	bd10      	pop	{r4, pc}

08009dc6 <quorem>:
 8009dc6:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009dca:	6903      	ldr	r3, [r0, #16]
 8009dcc:	690c      	ldr	r4, [r1, #16]
 8009dce:	42a3      	cmp	r3, r4
 8009dd0:	4607      	mov	r7, r0
 8009dd2:	db7e      	blt.n	8009ed2 <quorem+0x10c>
 8009dd4:	3c01      	subs	r4, #1
 8009dd6:	f101 0814 	add.w	r8, r1, #20
 8009dda:	f100 0514 	add.w	r5, r0, #20
 8009dde:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009de2:	9301      	str	r3, [sp, #4]
 8009de4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8009de8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009dec:	3301      	adds	r3, #1
 8009dee:	429a      	cmp	r2, r3
 8009df0:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8009df4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8009df8:	fbb2 f6f3 	udiv	r6, r2, r3
 8009dfc:	d331      	bcc.n	8009e62 <quorem+0x9c>
 8009dfe:	f04f 0e00 	mov.w	lr, #0
 8009e02:	4640      	mov	r0, r8
 8009e04:	46ac      	mov	ip, r5
 8009e06:	46f2      	mov	sl, lr
 8009e08:	f850 2b04 	ldr.w	r2, [r0], #4
 8009e0c:	b293      	uxth	r3, r2
 8009e0e:	fb06 e303 	mla	r3, r6, r3, lr
 8009e12:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8009e16:	0c1a      	lsrs	r2, r3, #16
 8009e18:	b29b      	uxth	r3, r3
 8009e1a:	ebaa 0303 	sub.w	r3, sl, r3
 8009e1e:	f8dc a000 	ldr.w	sl, [ip]
 8009e22:	fa13 f38a 	uxtah	r3, r3, sl
 8009e26:	fb06 220e 	mla	r2, r6, lr, r2
 8009e2a:	9300      	str	r3, [sp, #0]
 8009e2c:	9b00      	ldr	r3, [sp, #0]
 8009e2e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8009e32:	b292      	uxth	r2, r2
 8009e34:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8009e38:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009e3c:	f8bd 3000 	ldrh.w	r3, [sp]
 8009e40:	4581      	cmp	r9, r0
 8009e42:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009e46:	f84c 3b04 	str.w	r3, [ip], #4
 8009e4a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8009e4e:	d2db      	bcs.n	8009e08 <quorem+0x42>
 8009e50:	f855 300b 	ldr.w	r3, [r5, fp]
 8009e54:	b92b      	cbnz	r3, 8009e62 <quorem+0x9c>
 8009e56:	9b01      	ldr	r3, [sp, #4]
 8009e58:	3b04      	subs	r3, #4
 8009e5a:	429d      	cmp	r5, r3
 8009e5c:	461a      	mov	r2, r3
 8009e5e:	d32c      	bcc.n	8009eba <quorem+0xf4>
 8009e60:	613c      	str	r4, [r7, #16]
 8009e62:	4638      	mov	r0, r7
 8009e64:	f001 f9a6 	bl	800b1b4 <__mcmp>
 8009e68:	2800      	cmp	r0, #0
 8009e6a:	db22      	blt.n	8009eb2 <quorem+0xec>
 8009e6c:	3601      	adds	r6, #1
 8009e6e:	4629      	mov	r1, r5
 8009e70:	2000      	movs	r0, #0
 8009e72:	f858 2b04 	ldr.w	r2, [r8], #4
 8009e76:	f8d1 c000 	ldr.w	ip, [r1]
 8009e7a:	b293      	uxth	r3, r2
 8009e7c:	1ac3      	subs	r3, r0, r3
 8009e7e:	0c12      	lsrs	r2, r2, #16
 8009e80:	fa13 f38c 	uxtah	r3, r3, ip
 8009e84:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8009e88:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009e8c:	b29b      	uxth	r3, r3
 8009e8e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009e92:	45c1      	cmp	r9, r8
 8009e94:	f841 3b04 	str.w	r3, [r1], #4
 8009e98:	ea4f 4022 	mov.w	r0, r2, asr #16
 8009e9c:	d2e9      	bcs.n	8009e72 <quorem+0xac>
 8009e9e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009ea2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009ea6:	b922      	cbnz	r2, 8009eb2 <quorem+0xec>
 8009ea8:	3b04      	subs	r3, #4
 8009eaa:	429d      	cmp	r5, r3
 8009eac:	461a      	mov	r2, r3
 8009eae:	d30a      	bcc.n	8009ec6 <quorem+0x100>
 8009eb0:	613c      	str	r4, [r7, #16]
 8009eb2:	4630      	mov	r0, r6
 8009eb4:	b003      	add	sp, #12
 8009eb6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009eba:	6812      	ldr	r2, [r2, #0]
 8009ebc:	3b04      	subs	r3, #4
 8009ebe:	2a00      	cmp	r2, #0
 8009ec0:	d1ce      	bne.n	8009e60 <quorem+0x9a>
 8009ec2:	3c01      	subs	r4, #1
 8009ec4:	e7c9      	b.n	8009e5a <quorem+0x94>
 8009ec6:	6812      	ldr	r2, [r2, #0]
 8009ec8:	3b04      	subs	r3, #4
 8009eca:	2a00      	cmp	r2, #0
 8009ecc:	d1f0      	bne.n	8009eb0 <quorem+0xea>
 8009ece:	3c01      	subs	r4, #1
 8009ed0:	e7eb      	b.n	8009eaa <quorem+0xe4>
 8009ed2:	2000      	movs	r0, #0
 8009ed4:	e7ee      	b.n	8009eb4 <quorem+0xee>
	...

08009ed8 <_dtoa_r>:
 8009ed8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009edc:	ed2d 8b04 	vpush	{d8-d9}
 8009ee0:	69c5      	ldr	r5, [r0, #28]
 8009ee2:	b093      	sub	sp, #76	; 0x4c
 8009ee4:	ed8d 0b02 	vstr	d0, [sp, #8]
 8009ee8:	ec57 6b10 	vmov	r6, r7, d0
 8009eec:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8009ef0:	9107      	str	r1, [sp, #28]
 8009ef2:	4604      	mov	r4, r0
 8009ef4:	920a      	str	r2, [sp, #40]	; 0x28
 8009ef6:	930d      	str	r3, [sp, #52]	; 0x34
 8009ef8:	b975      	cbnz	r5, 8009f18 <_dtoa_r+0x40>
 8009efa:	2010      	movs	r0, #16
 8009efc:	f000 fe2a 	bl	800ab54 <malloc>
 8009f00:	4602      	mov	r2, r0
 8009f02:	61e0      	str	r0, [r4, #28]
 8009f04:	b920      	cbnz	r0, 8009f10 <_dtoa_r+0x38>
 8009f06:	4bae      	ldr	r3, [pc, #696]	; (800a1c0 <_dtoa_r+0x2e8>)
 8009f08:	21ef      	movs	r1, #239	; 0xef
 8009f0a:	48ae      	ldr	r0, [pc, #696]	; (800a1c4 <_dtoa_r+0x2ec>)
 8009f0c:	f002 f8e4 	bl	800c0d8 <__assert_func>
 8009f10:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8009f14:	6005      	str	r5, [r0, #0]
 8009f16:	60c5      	str	r5, [r0, #12]
 8009f18:	69e3      	ldr	r3, [r4, #28]
 8009f1a:	6819      	ldr	r1, [r3, #0]
 8009f1c:	b151      	cbz	r1, 8009f34 <_dtoa_r+0x5c>
 8009f1e:	685a      	ldr	r2, [r3, #4]
 8009f20:	604a      	str	r2, [r1, #4]
 8009f22:	2301      	movs	r3, #1
 8009f24:	4093      	lsls	r3, r2
 8009f26:	608b      	str	r3, [r1, #8]
 8009f28:	4620      	mov	r0, r4
 8009f2a:	f000 ff07 	bl	800ad3c <_Bfree>
 8009f2e:	69e3      	ldr	r3, [r4, #28]
 8009f30:	2200      	movs	r2, #0
 8009f32:	601a      	str	r2, [r3, #0]
 8009f34:	1e3b      	subs	r3, r7, #0
 8009f36:	bfbb      	ittet	lt
 8009f38:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8009f3c:	9303      	strlt	r3, [sp, #12]
 8009f3e:	2300      	movge	r3, #0
 8009f40:	2201      	movlt	r2, #1
 8009f42:	bfac      	ite	ge
 8009f44:	f8c8 3000 	strge.w	r3, [r8]
 8009f48:	f8c8 2000 	strlt.w	r2, [r8]
 8009f4c:	4b9e      	ldr	r3, [pc, #632]	; (800a1c8 <_dtoa_r+0x2f0>)
 8009f4e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8009f52:	ea33 0308 	bics.w	r3, r3, r8
 8009f56:	d11b      	bne.n	8009f90 <_dtoa_r+0xb8>
 8009f58:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009f5a:	f242 730f 	movw	r3, #9999	; 0x270f
 8009f5e:	6013      	str	r3, [r2, #0]
 8009f60:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8009f64:	4333      	orrs	r3, r6
 8009f66:	f000 8593 	beq.w	800aa90 <_dtoa_r+0xbb8>
 8009f6a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009f6c:	b963      	cbnz	r3, 8009f88 <_dtoa_r+0xb0>
 8009f6e:	4b97      	ldr	r3, [pc, #604]	; (800a1cc <_dtoa_r+0x2f4>)
 8009f70:	e027      	b.n	8009fc2 <_dtoa_r+0xea>
 8009f72:	4b97      	ldr	r3, [pc, #604]	; (800a1d0 <_dtoa_r+0x2f8>)
 8009f74:	9300      	str	r3, [sp, #0]
 8009f76:	3308      	adds	r3, #8
 8009f78:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8009f7a:	6013      	str	r3, [r2, #0]
 8009f7c:	9800      	ldr	r0, [sp, #0]
 8009f7e:	b013      	add	sp, #76	; 0x4c
 8009f80:	ecbd 8b04 	vpop	{d8-d9}
 8009f84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009f88:	4b90      	ldr	r3, [pc, #576]	; (800a1cc <_dtoa_r+0x2f4>)
 8009f8a:	9300      	str	r3, [sp, #0]
 8009f8c:	3303      	adds	r3, #3
 8009f8e:	e7f3      	b.n	8009f78 <_dtoa_r+0xa0>
 8009f90:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009f94:	2200      	movs	r2, #0
 8009f96:	ec51 0b17 	vmov	r0, r1, d7
 8009f9a:	eeb0 8a47 	vmov.f32	s16, s14
 8009f9e:	eef0 8a67 	vmov.f32	s17, s15
 8009fa2:	2300      	movs	r3, #0
 8009fa4:	f7f6 fd90 	bl	8000ac8 <__aeabi_dcmpeq>
 8009fa8:	4681      	mov	r9, r0
 8009faa:	b160      	cbz	r0, 8009fc6 <_dtoa_r+0xee>
 8009fac:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009fae:	2301      	movs	r3, #1
 8009fb0:	6013      	str	r3, [r2, #0]
 8009fb2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009fb4:	2b00      	cmp	r3, #0
 8009fb6:	f000 8568 	beq.w	800aa8a <_dtoa_r+0xbb2>
 8009fba:	4b86      	ldr	r3, [pc, #536]	; (800a1d4 <_dtoa_r+0x2fc>)
 8009fbc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8009fbe:	6013      	str	r3, [r2, #0]
 8009fc0:	3b01      	subs	r3, #1
 8009fc2:	9300      	str	r3, [sp, #0]
 8009fc4:	e7da      	b.n	8009f7c <_dtoa_r+0xa4>
 8009fc6:	aa10      	add	r2, sp, #64	; 0x40
 8009fc8:	a911      	add	r1, sp, #68	; 0x44
 8009fca:	4620      	mov	r0, r4
 8009fcc:	eeb0 0a48 	vmov.f32	s0, s16
 8009fd0:	eef0 0a68 	vmov.f32	s1, s17
 8009fd4:	f001 f994 	bl	800b300 <__d2b>
 8009fd8:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8009fdc:	4682      	mov	sl, r0
 8009fde:	2d00      	cmp	r5, #0
 8009fe0:	d07f      	beq.n	800a0e2 <_dtoa_r+0x20a>
 8009fe2:	ee18 3a90 	vmov	r3, s17
 8009fe6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009fea:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8009fee:	ec51 0b18 	vmov	r0, r1, d8
 8009ff2:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8009ff6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8009ffa:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8009ffe:	4619      	mov	r1, r3
 800a000:	2200      	movs	r2, #0
 800a002:	4b75      	ldr	r3, [pc, #468]	; (800a1d8 <_dtoa_r+0x300>)
 800a004:	f7f6 f940 	bl	8000288 <__aeabi_dsub>
 800a008:	a367      	add	r3, pc, #412	; (adr r3, 800a1a8 <_dtoa_r+0x2d0>)
 800a00a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a00e:	f7f6 faf3 	bl	80005f8 <__aeabi_dmul>
 800a012:	a367      	add	r3, pc, #412	; (adr r3, 800a1b0 <_dtoa_r+0x2d8>)
 800a014:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a018:	f7f6 f938 	bl	800028c <__adddf3>
 800a01c:	4606      	mov	r6, r0
 800a01e:	4628      	mov	r0, r5
 800a020:	460f      	mov	r7, r1
 800a022:	f7f6 fa7f 	bl	8000524 <__aeabi_i2d>
 800a026:	a364      	add	r3, pc, #400	; (adr r3, 800a1b8 <_dtoa_r+0x2e0>)
 800a028:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a02c:	f7f6 fae4 	bl	80005f8 <__aeabi_dmul>
 800a030:	4602      	mov	r2, r0
 800a032:	460b      	mov	r3, r1
 800a034:	4630      	mov	r0, r6
 800a036:	4639      	mov	r1, r7
 800a038:	f7f6 f928 	bl	800028c <__adddf3>
 800a03c:	4606      	mov	r6, r0
 800a03e:	460f      	mov	r7, r1
 800a040:	f7f6 fd8a 	bl	8000b58 <__aeabi_d2iz>
 800a044:	2200      	movs	r2, #0
 800a046:	4683      	mov	fp, r0
 800a048:	2300      	movs	r3, #0
 800a04a:	4630      	mov	r0, r6
 800a04c:	4639      	mov	r1, r7
 800a04e:	f7f6 fd45 	bl	8000adc <__aeabi_dcmplt>
 800a052:	b148      	cbz	r0, 800a068 <_dtoa_r+0x190>
 800a054:	4658      	mov	r0, fp
 800a056:	f7f6 fa65 	bl	8000524 <__aeabi_i2d>
 800a05a:	4632      	mov	r2, r6
 800a05c:	463b      	mov	r3, r7
 800a05e:	f7f6 fd33 	bl	8000ac8 <__aeabi_dcmpeq>
 800a062:	b908      	cbnz	r0, 800a068 <_dtoa_r+0x190>
 800a064:	f10b 3bff 	add.w	fp, fp, #4294967295
 800a068:	f1bb 0f16 	cmp.w	fp, #22
 800a06c:	d857      	bhi.n	800a11e <_dtoa_r+0x246>
 800a06e:	4b5b      	ldr	r3, [pc, #364]	; (800a1dc <_dtoa_r+0x304>)
 800a070:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800a074:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a078:	ec51 0b18 	vmov	r0, r1, d8
 800a07c:	f7f6 fd2e 	bl	8000adc <__aeabi_dcmplt>
 800a080:	2800      	cmp	r0, #0
 800a082:	d04e      	beq.n	800a122 <_dtoa_r+0x24a>
 800a084:	f10b 3bff 	add.w	fp, fp, #4294967295
 800a088:	2300      	movs	r3, #0
 800a08a:	930c      	str	r3, [sp, #48]	; 0x30
 800a08c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a08e:	1b5b      	subs	r3, r3, r5
 800a090:	1e5a      	subs	r2, r3, #1
 800a092:	bf45      	ittet	mi
 800a094:	f1c3 0301 	rsbmi	r3, r3, #1
 800a098:	9305      	strmi	r3, [sp, #20]
 800a09a:	2300      	movpl	r3, #0
 800a09c:	2300      	movmi	r3, #0
 800a09e:	9206      	str	r2, [sp, #24]
 800a0a0:	bf54      	ite	pl
 800a0a2:	9305      	strpl	r3, [sp, #20]
 800a0a4:	9306      	strmi	r3, [sp, #24]
 800a0a6:	f1bb 0f00 	cmp.w	fp, #0
 800a0aa:	db3c      	blt.n	800a126 <_dtoa_r+0x24e>
 800a0ac:	9b06      	ldr	r3, [sp, #24]
 800a0ae:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800a0b2:	445b      	add	r3, fp
 800a0b4:	9306      	str	r3, [sp, #24]
 800a0b6:	2300      	movs	r3, #0
 800a0b8:	9308      	str	r3, [sp, #32]
 800a0ba:	9b07      	ldr	r3, [sp, #28]
 800a0bc:	2b09      	cmp	r3, #9
 800a0be:	d868      	bhi.n	800a192 <_dtoa_r+0x2ba>
 800a0c0:	2b05      	cmp	r3, #5
 800a0c2:	bfc4      	itt	gt
 800a0c4:	3b04      	subgt	r3, #4
 800a0c6:	9307      	strgt	r3, [sp, #28]
 800a0c8:	9b07      	ldr	r3, [sp, #28]
 800a0ca:	f1a3 0302 	sub.w	r3, r3, #2
 800a0ce:	bfcc      	ite	gt
 800a0d0:	2500      	movgt	r5, #0
 800a0d2:	2501      	movle	r5, #1
 800a0d4:	2b03      	cmp	r3, #3
 800a0d6:	f200 8085 	bhi.w	800a1e4 <_dtoa_r+0x30c>
 800a0da:	e8df f003 	tbb	[pc, r3]
 800a0de:	3b2e      	.short	0x3b2e
 800a0e0:	5839      	.short	0x5839
 800a0e2:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800a0e6:	441d      	add	r5, r3
 800a0e8:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800a0ec:	2b20      	cmp	r3, #32
 800a0ee:	bfc1      	itttt	gt
 800a0f0:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800a0f4:	fa08 f803 	lslgt.w	r8, r8, r3
 800a0f8:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 800a0fc:	fa26 f303 	lsrgt.w	r3, r6, r3
 800a100:	bfd6      	itet	le
 800a102:	f1c3 0320 	rsble	r3, r3, #32
 800a106:	ea48 0003 	orrgt.w	r0, r8, r3
 800a10a:	fa06 f003 	lslle.w	r0, r6, r3
 800a10e:	f7f6 f9f9 	bl	8000504 <__aeabi_ui2d>
 800a112:	2201      	movs	r2, #1
 800a114:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 800a118:	3d01      	subs	r5, #1
 800a11a:	920e      	str	r2, [sp, #56]	; 0x38
 800a11c:	e76f      	b.n	8009ffe <_dtoa_r+0x126>
 800a11e:	2301      	movs	r3, #1
 800a120:	e7b3      	b.n	800a08a <_dtoa_r+0x1b2>
 800a122:	900c      	str	r0, [sp, #48]	; 0x30
 800a124:	e7b2      	b.n	800a08c <_dtoa_r+0x1b4>
 800a126:	9b05      	ldr	r3, [sp, #20]
 800a128:	eba3 030b 	sub.w	r3, r3, fp
 800a12c:	9305      	str	r3, [sp, #20]
 800a12e:	f1cb 0300 	rsb	r3, fp, #0
 800a132:	9308      	str	r3, [sp, #32]
 800a134:	2300      	movs	r3, #0
 800a136:	930b      	str	r3, [sp, #44]	; 0x2c
 800a138:	e7bf      	b.n	800a0ba <_dtoa_r+0x1e2>
 800a13a:	2300      	movs	r3, #0
 800a13c:	9309      	str	r3, [sp, #36]	; 0x24
 800a13e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a140:	2b00      	cmp	r3, #0
 800a142:	dc52      	bgt.n	800a1ea <_dtoa_r+0x312>
 800a144:	2301      	movs	r3, #1
 800a146:	9301      	str	r3, [sp, #4]
 800a148:	9304      	str	r3, [sp, #16]
 800a14a:	461a      	mov	r2, r3
 800a14c:	920a      	str	r2, [sp, #40]	; 0x28
 800a14e:	e00b      	b.n	800a168 <_dtoa_r+0x290>
 800a150:	2301      	movs	r3, #1
 800a152:	e7f3      	b.n	800a13c <_dtoa_r+0x264>
 800a154:	2300      	movs	r3, #0
 800a156:	9309      	str	r3, [sp, #36]	; 0x24
 800a158:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a15a:	445b      	add	r3, fp
 800a15c:	9301      	str	r3, [sp, #4]
 800a15e:	3301      	adds	r3, #1
 800a160:	2b01      	cmp	r3, #1
 800a162:	9304      	str	r3, [sp, #16]
 800a164:	bfb8      	it	lt
 800a166:	2301      	movlt	r3, #1
 800a168:	69e0      	ldr	r0, [r4, #28]
 800a16a:	2100      	movs	r1, #0
 800a16c:	2204      	movs	r2, #4
 800a16e:	f102 0614 	add.w	r6, r2, #20
 800a172:	429e      	cmp	r6, r3
 800a174:	d93d      	bls.n	800a1f2 <_dtoa_r+0x31a>
 800a176:	6041      	str	r1, [r0, #4]
 800a178:	4620      	mov	r0, r4
 800a17a:	f000 fd9f 	bl	800acbc <_Balloc>
 800a17e:	9000      	str	r0, [sp, #0]
 800a180:	2800      	cmp	r0, #0
 800a182:	d139      	bne.n	800a1f8 <_dtoa_r+0x320>
 800a184:	4b16      	ldr	r3, [pc, #88]	; (800a1e0 <_dtoa_r+0x308>)
 800a186:	4602      	mov	r2, r0
 800a188:	f240 11af 	movw	r1, #431	; 0x1af
 800a18c:	e6bd      	b.n	8009f0a <_dtoa_r+0x32>
 800a18e:	2301      	movs	r3, #1
 800a190:	e7e1      	b.n	800a156 <_dtoa_r+0x27e>
 800a192:	2501      	movs	r5, #1
 800a194:	2300      	movs	r3, #0
 800a196:	9307      	str	r3, [sp, #28]
 800a198:	9509      	str	r5, [sp, #36]	; 0x24
 800a19a:	f04f 33ff 	mov.w	r3, #4294967295
 800a19e:	9301      	str	r3, [sp, #4]
 800a1a0:	9304      	str	r3, [sp, #16]
 800a1a2:	2200      	movs	r2, #0
 800a1a4:	2312      	movs	r3, #18
 800a1a6:	e7d1      	b.n	800a14c <_dtoa_r+0x274>
 800a1a8:	636f4361 	.word	0x636f4361
 800a1ac:	3fd287a7 	.word	0x3fd287a7
 800a1b0:	8b60c8b3 	.word	0x8b60c8b3
 800a1b4:	3fc68a28 	.word	0x3fc68a28
 800a1b8:	509f79fb 	.word	0x509f79fb
 800a1bc:	3fd34413 	.word	0x3fd34413
 800a1c0:	0800ffc1 	.word	0x0800ffc1
 800a1c4:	0800ffd8 	.word	0x0800ffd8
 800a1c8:	7ff00000 	.word	0x7ff00000
 800a1cc:	0800ffbd 	.word	0x0800ffbd
 800a1d0:	0800ffb4 	.word	0x0800ffb4
 800a1d4:	0800ff91 	.word	0x0800ff91
 800a1d8:	3ff80000 	.word	0x3ff80000
 800a1dc:	080100c8 	.word	0x080100c8
 800a1e0:	08010030 	.word	0x08010030
 800a1e4:	2301      	movs	r3, #1
 800a1e6:	9309      	str	r3, [sp, #36]	; 0x24
 800a1e8:	e7d7      	b.n	800a19a <_dtoa_r+0x2c2>
 800a1ea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a1ec:	9301      	str	r3, [sp, #4]
 800a1ee:	9304      	str	r3, [sp, #16]
 800a1f0:	e7ba      	b.n	800a168 <_dtoa_r+0x290>
 800a1f2:	3101      	adds	r1, #1
 800a1f4:	0052      	lsls	r2, r2, #1
 800a1f6:	e7ba      	b.n	800a16e <_dtoa_r+0x296>
 800a1f8:	69e3      	ldr	r3, [r4, #28]
 800a1fa:	9a00      	ldr	r2, [sp, #0]
 800a1fc:	601a      	str	r2, [r3, #0]
 800a1fe:	9b04      	ldr	r3, [sp, #16]
 800a200:	2b0e      	cmp	r3, #14
 800a202:	f200 80a8 	bhi.w	800a356 <_dtoa_r+0x47e>
 800a206:	2d00      	cmp	r5, #0
 800a208:	f000 80a5 	beq.w	800a356 <_dtoa_r+0x47e>
 800a20c:	f1bb 0f00 	cmp.w	fp, #0
 800a210:	dd38      	ble.n	800a284 <_dtoa_r+0x3ac>
 800a212:	4bc0      	ldr	r3, [pc, #768]	; (800a514 <_dtoa_r+0x63c>)
 800a214:	f00b 020f 	and.w	r2, fp, #15
 800a218:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a21c:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800a220:	e9d3 6700 	ldrd	r6, r7, [r3]
 800a224:	ea4f 182b 	mov.w	r8, fp, asr #4
 800a228:	d019      	beq.n	800a25e <_dtoa_r+0x386>
 800a22a:	4bbb      	ldr	r3, [pc, #748]	; (800a518 <_dtoa_r+0x640>)
 800a22c:	ec51 0b18 	vmov	r0, r1, d8
 800a230:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800a234:	f7f6 fb0a 	bl	800084c <__aeabi_ddiv>
 800a238:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a23c:	f008 080f 	and.w	r8, r8, #15
 800a240:	2503      	movs	r5, #3
 800a242:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 800a518 <_dtoa_r+0x640>
 800a246:	f1b8 0f00 	cmp.w	r8, #0
 800a24a:	d10a      	bne.n	800a262 <_dtoa_r+0x38a>
 800a24c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a250:	4632      	mov	r2, r6
 800a252:	463b      	mov	r3, r7
 800a254:	f7f6 fafa 	bl	800084c <__aeabi_ddiv>
 800a258:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a25c:	e02b      	b.n	800a2b6 <_dtoa_r+0x3de>
 800a25e:	2502      	movs	r5, #2
 800a260:	e7ef      	b.n	800a242 <_dtoa_r+0x36a>
 800a262:	f018 0f01 	tst.w	r8, #1
 800a266:	d008      	beq.n	800a27a <_dtoa_r+0x3a2>
 800a268:	4630      	mov	r0, r6
 800a26a:	4639      	mov	r1, r7
 800a26c:	e9d9 2300 	ldrd	r2, r3, [r9]
 800a270:	f7f6 f9c2 	bl	80005f8 <__aeabi_dmul>
 800a274:	3501      	adds	r5, #1
 800a276:	4606      	mov	r6, r0
 800a278:	460f      	mov	r7, r1
 800a27a:	ea4f 0868 	mov.w	r8, r8, asr #1
 800a27e:	f109 0908 	add.w	r9, r9, #8
 800a282:	e7e0      	b.n	800a246 <_dtoa_r+0x36e>
 800a284:	f000 809f 	beq.w	800a3c6 <_dtoa_r+0x4ee>
 800a288:	f1cb 0600 	rsb	r6, fp, #0
 800a28c:	4ba1      	ldr	r3, [pc, #644]	; (800a514 <_dtoa_r+0x63c>)
 800a28e:	4fa2      	ldr	r7, [pc, #648]	; (800a518 <_dtoa_r+0x640>)
 800a290:	f006 020f 	and.w	r2, r6, #15
 800a294:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a298:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a29c:	ec51 0b18 	vmov	r0, r1, d8
 800a2a0:	f7f6 f9aa 	bl	80005f8 <__aeabi_dmul>
 800a2a4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a2a8:	1136      	asrs	r6, r6, #4
 800a2aa:	2300      	movs	r3, #0
 800a2ac:	2502      	movs	r5, #2
 800a2ae:	2e00      	cmp	r6, #0
 800a2b0:	d17e      	bne.n	800a3b0 <_dtoa_r+0x4d8>
 800a2b2:	2b00      	cmp	r3, #0
 800a2b4:	d1d0      	bne.n	800a258 <_dtoa_r+0x380>
 800a2b6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a2b8:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800a2bc:	2b00      	cmp	r3, #0
 800a2be:	f000 8084 	beq.w	800a3ca <_dtoa_r+0x4f2>
 800a2c2:	4b96      	ldr	r3, [pc, #600]	; (800a51c <_dtoa_r+0x644>)
 800a2c4:	2200      	movs	r2, #0
 800a2c6:	4640      	mov	r0, r8
 800a2c8:	4649      	mov	r1, r9
 800a2ca:	f7f6 fc07 	bl	8000adc <__aeabi_dcmplt>
 800a2ce:	2800      	cmp	r0, #0
 800a2d0:	d07b      	beq.n	800a3ca <_dtoa_r+0x4f2>
 800a2d2:	9b04      	ldr	r3, [sp, #16]
 800a2d4:	2b00      	cmp	r3, #0
 800a2d6:	d078      	beq.n	800a3ca <_dtoa_r+0x4f2>
 800a2d8:	9b01      	ldr	r3, [sp, #4]
 800a2da:	2b00      	cmp	r3, #0
 800a2dc:	dd39      	ble.n	800a352 <_dtoa_r+0x47a>
 800a2de:	4b90      	ldr	r3, [pc, #576]	; (800a520 <_dtoa_r+0x648>)
 800a2e0:	2200      	movs	r2, #0
 800a2e2:	4640      	mov	r0, r8
 800a2e4:	4649      	mov	r1, r9
 800a2e6:	f7f6 f987 	bl	80005f8 <__aeabi_dmul>
 800a2ea:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a2ee:	9e01      	ldr	r6, [sp, #4]
 800a2f0:	f10b 37ff 	add.w	r7, fp, #4294967295
 800a2f4:	3501      	adds	r5, #1
 800a2f6:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800a2fa:	4628      	mov	r0, r5
 800a2fc:	f7f6 f912 	bl	8000524 <__aeabi_i2d>
 800a300:	4642      	mov	r2, r8
 800a302:	464b      	mov	r3, r9
 800a304:	f7f6 f978 	bl	80005f8 <__aeabi_dmul>
 800a308:	4b86      	ldr	r3, [pc, #536]	; (800a524 <_dtoa_r+0x64c>)
 800a30a:	2200      	movs	r2, #0
 800a30c:	f7f5 ffbe 	bl	800028c <__adddf3>
 800a310:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800a314:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a318:	9303      	str	r3, [sp, #12]
 800a31a:	2e00      	cmp	r6, #0
 800a31c:	d158      	bne.n	800a3d0 <_dtoa_r+0x4f8>
 800a31e:	4b82      	ldr	r3, [pc, #520]	; (800a528 <_dtoa_r+0x650>)
 800a320:	2200      	movs	r2, #0
 800a322:	4640      	mov	r0, r8
 800a324:	4649      	mov	r1, r9
 800a326:	f7f5 ffaf 	bl	8000288 <__aeabi_dsub>
 800a32a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a32e:	4680      	mov	r8, r0
 800a330:	4689      	mov	r9, r1
 800a332:	f7f6 fbf1 	bl	8000b18 <__aeabi_dcmpgt>
 800a336:	2800      	cmp	r0, #0
 800a338:	f040 8296 	bne.w	800a868 <_dtoa_r+0x990>
 800a33c:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800a340:	4640      	mov	r0, r8
 800a342:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a346:	4649      	mov	r1, r9
 800a348:	f7f6 fbc8 	bl	8000adc <__aeabi_dcmplt>
 800a34c:	2800      	cmp	r0, #0
 800a34e:	f040 8289 	bne.w	800a864 <_dtoa_r+0x98c>
 800a352:	ed8d 8b02 	vstr	d8, [sp, #8]
 800a356:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a358:	2b00      	cmp	r3, #0
 800a35a:	f2c0 814e 	blt.w	800a5fa <_dtoa_r+0x722>
 800a35e:	f1bb 0f0e 	cmp.w	fp, #14
 800a362:	f300 814a 	bgt.w	800a5fa <_dtoa_r+0x722>
 800a366:	4b6b      	ldr	r3, [pc, #428]	; (800a514 <_dtoa_r+0x63c>)
 800a368:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800a36c:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a370:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a372:	2b00      	cmp	r3, #0
 800a374:	f280 80dc 	bge.w	800a530 <_dtoa_r+0x658>
 800a378:	9b04      	ldr	r3, [sp, #16]
 800a37a:	2b00      	cmp	r3, #0
 800a37c:	f300 80d8 	bgt.w	800a530 <_dtoa_r+0x658>
 800a380:	f040 826f 	bne.w	800a862 <_dtoa_r+0x98a>
 800a384:	4b68      	ldr	r3, [pc, #416]	; (800a528 <_dtoa_r+0x650>)
 800a386:	2200      	movs	r2, #0
 800a388:	4640      	mov	r0, r8
 800a38a:	4649      	mov	r1, r9
 800a38c:	f7f6 f934 	bl	80005f8 <__aeabi_dmul>
 800a390:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a394:	f7f6 fbb6 	bl	8000b04 <__aeabi_dcmpge>
 800a398:	9e04      	ldr	r6, [sp, #16]
 800a39a:	4637      	mov	r7, r6
 800a39c:	2800      	cmp	r0, #0
 800a39e:	f040 8245 	bne.w	800a82c <_dtoa_r+0x954>
 800a3a2:	9d00      	ldr	r5, [sp, #0]
 800a3a4:	2331      	movs	r3, #49	; 0x31
 800a3a6:	f805 3b01 	strb.w	r3, [r5], #1
 800a3aa:	f10b 0b01 	add.w	fp, fp, #1
 800a3ae:	e241      	b.n	800a834 <_dtoa_r+0x95c>
 800a3b0:	07f2      	lsls	r2, r6, #31
 800a3b2:	d505      	bpl.n	800a3c0 <_dtoa_r+0x4e8>
 800a3b4:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a3b8:	f7f6 f91e 	bl	80005f8 <__aeabi_dmul>
 800a3bc:	3501      	adds	r5, #1
 800a3be:	2301      	movs	r3, #1
 800a3c0:	1076      	asrs	r6, r6, #1
 800a3c2:	3708      	adds	r7, #8
 800a3c4:	e773      	b.n	800a2ae <_dtoa_r+0x3d6>
 800a3c6:	2502      	movs	r5, #2
 800a3c8:	e775      	b.n	800a2b6 <_dtoa_r+0x3de>
 800a3ca:	9e04      	ldr	r6, [sp, #16]
 800a3cc:	465f      	mov	r7, fp
 800a3ce:	e792      	b.n	800a2f6 <_dtoa_r+0x41e>
 800a3d0:	9900      	ldr	r1, [sp, #0]
 800a3d2:	4b50      	ldr	r3, [pc, #320]	; (800a514 <_dtoa_r+0x63c>)
 800a3d4:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a3d8:	4431      	add	r1, r6
 800a3da:	9102      	str	r1, [sp, #8]
 800a3dc:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a3de:	eeb0 9a47 	vmov.f32	s18, s14
 800a3e2:	eef0 9a67 	vmov.f32	s19, s15
 800a3e6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800a3ea:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800a3ee:	2900      	cmp	r1, #0
 800a3f0:	d044      	beq.n	800a47c <_dtoa_r+0x5a4>
 800a3f2:	494e      	ldr	r1, [pc, #312]	; (800a52c <_dtoa_r+0x654>)
 800a3f4:	2000      	movs	r0, #0
 800a3f6:	f7f6 fa29 	bl	800084c <__aeabi_ddiv>
 800a3fa:	ec53 2b19 	vmov	r2, r3, d9
 800a3fe:	f7f5 ff43 	bl	8000288 <__aeabi_dsub>
 800a402:	9d00      	ldr	r5, [sp, #0]
 800a404:	ec41 0b19 	vmov	d9, r0, r1
 800a408:	4649      	mov	r1, r9
 800a40a:	4640      	mov	r0, r8
 800a40c:	f7f6 fba4 	bl	8000b58 <__aeabi_d2iz>
 800a410:	4606      	mov	r6, r0
 800a412:	f7f6 f887 	bl	8000524 <__aeabi_i2d>
 800a416:	4602      	mov	r2, r0
 800a418:	460b      	mov	r3, r1
 800a41a:	4640      	mov	r0, r8
 800a41c:	4649      	mov	r1, r9
 800a41e:	f7f5 ff33 	bl	8000288 <__aeabi_dsub>
 800a422:	3630      	adds	r6, #48	; 0x30
 800a424:	f805 6b01 	strb.w	r6, [r5], #1
 800a428:	ec53 2b19 	vmov	r2, r3, d9
 800a42c:	4680      	mov	r8, r0
 800a42e:	4689      	mov	r9, r1
 800a430:	f7f6 fb54 	bl	8000adc <__aeabi_dcmplt>
 800a434:	2800      	cmp	r0, #0
 800a436:	d164      	bne.n	800a502 <_dtoa_r+0x62a>
 800a438:	4642      	mov	r2, r8
 800a43a:	464b      	mov	r3, r9
 800a43c:	4937      	ldr	r1, [pc, #220]	; (800a51c <_dtoa_r+0x644>)
 800a43e:	2000      	movs	r0, #0
 800a440:	f7f5 ff22 	bl	8000288 <__aeabi_dsub>
 800a444:	ec53 2b19 	vmov	r2, r3, d9
 800a448:	f7f6 fb48 	bl	8000adc <__aeabi_dcmplt>
 800a44c:	2800      	cmp	r0, #0
 800a44e:	f040 80b6 	bne.w	800a5be <_dtoa_r+0x6e6>
 800a452:	9b02      	ldr	r3, [sp, #8]
 800a454:	429d      	cmp	r5, r3
 800a456:	f43f af7c 	beq.w	800a352 <_dtoa_r+0x47a>
 800a45a:	4b31      	ldr	r3, [pc, #196]	; (800a520 <_dtoa_r+0x648>)
 800a45c:	ec51 0b19 	vmov	r0, r1, d9
 800a460:	2200      	movs	r2, #0
 800a462:	f7f6 f8c9 	bl	80005f8 <__aeabi_dmul>
 800a466:	4b2e      	ldr	r3, [pc, #184]	; (800a520 <_dtoa_r+0x648>)
 800a468:	ec41 0b19 	vmov	d9, r0, r1
 800a46c:	2200      	movs	r2, #0
 800a46e:	4640      	mov	r0, r8
 800a470:	4649      	mov	r1, r9
 800a472:	f7f6 f8c1 	bl	80005f8 <__aeabi_dmul>
 800a476:	4680      	mov	r8, r0
 800a478:	4689      	mov	r9, r1
 800a47a:	e7c5      	b.n	800a408 <_dtoa_r+0x530>
 800a47c:	ec51 0b17 	vmov	r0, r1, d7
 800a480:	f7f6 f8ba 	bl	80005f8 <__aeabi_dmul>
 800a484:	9b02      	ldr	r3, [sp, #8]
 800a486:	9d00      	ldr	r5, [sp, #0]
 800a488:	930f      	str	r3, [sp, #60]	; 0x3c
 800a48a:	ec41 0b19 	vmov	d9, r0, r1
 800a48e:	4649      	mov	r1, r9
 800a490:	4640      	mov	r0, r8
 800a492:	f7f6 fb61 	bl	8000b58 <__aeabi_d2iz>
 800a496:	4606      	mov	r6, r0
 800a498:	f7f6 f844 	bl	8000524 <__aeabi_i2d>
 800a49c:	3630      	adds	r6, #48	; 0x30
 800a49e:	4602      	mov	r2, r0
 800a4a0:	460b      	mov	r3, r1
 800a4a2:	4640      	mov	r0, r8
 800a4a4:	4649      	mov	r1, r9
 800a4a6:	f7f5 feef 	bl	8000288 <__aeabi_dsub>
 800a4aa:	f805 6b01 	strb.w	r6, [r5], #1
 800a4ae:	9b02      	ldr	r3, [sp, #8]
 800a4b0:	429d      	cmp	r5, r3
 800a4b2:	4680      	mov	r8, r0
 800a4b4:	4689      	mov	r9, r1
 800a4b6:	f04f 0200 	mov.w	r2, #0
 800a4ba:	d124      	bne.n	800a506 <_dtoa_r+0x62e>
 800a4bc:	4b1b      	ldr	r3, [pc, #108]	; (800a52c <_dtoa_r+0x654>)
 800a4be:	ec51 0b19 	vmov	r0, r1, d9
 800a4c2:	f7f5 fee3 	bl	800028c <__adddf3>
 800a4c6:	4602      	mov	r2, r0
 800a4c8:	460b      	mov	r3, r1
 800a4ca:	4640      	mov	r0, r8
 800a4cc:	4649      	mov	r1, r9
 800a4ce:	f7f6 fb23 	bl	8000b18 <__aeabi_dcmpgt>
 800a4d2:	2800      	cmp	r0, #0
 800a4d4:	d173      	bne.n	800a5be <_dtoa_r+0x6e6>
 800a4d6:	ec53 2b19 	vmov	r2, r3, d9
 800a4da:	4914      	ldr	r1, [pc, #80]	; (800a52c <_dtoa_r+0x654>)
 800a4dc:	2000      	movs	r0, #0
 800a4de:	f7f5 fed3 	bl	8000288 <__aeabi_dsub>
 800a4e2:	4602      	mov	r2, r0
 800a4e4:	460b      	mov	r3, r1
 800a4e6:	4640      	mov	r0, r8
 800a4e8:	4649      	mov	r1, r9
 800a4ea:	f7f6 faf7 	bl	8000adc <__aeabi_dcmplt>
 800a4ee:	2800      	cmp	r0, #0
 800a4f0:	f43f af2f 	beq.w	800a352 <_dtoa_r+0x47a>
 800a4f4:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800a4f6:	1e6b      	subs	r3, r5, #1
 800a4f8:	930f      	str	r3, [sp, #60]	; 0x3c
 800a4fa:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800a4fe:	2b30      	cmp	r3, #48	; 0x30
 800a500:	d0f8      	beq.n	800a4f4 <_dtoa_r+0x61c>
 800a502:	46bb      	mov	fp, r7
 800a504:	e04a      	b.n	800a59c <_dtoa_r+0x6c4>
 800a506:	4b06      	ldr	r3, [pc, #24]	; (800a520 <_dtoa_r+0x648>)
 800a508:	f7f6 f876 	bl	80005f8 <__aeabi_dmul>
 800a50c:	4680      	mov	r8, r0
 800a50e:	4689      	mov	r9, r1
 800a510:	e7bd      	b.n	800a48e <_dtoa_r+0x5b6>
 800a512:	bf00      	nop
 800a514:	080100c8 	.word	0x080100c8
 800a518:	080100a0 	.word	0x080100a0
 800a51c:	3ff00000 	.word	0x3ff00000
 800a520:	40240000 	.word	0x40240000
 800a524:	401c0000 	.word	0x401c0000
 800a528:	40140000 	.word	0x40140000
 800a52c:	3fe00000 	.word	0x3fe00000
 800a530:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800a534:	9d00      	ldr	r5, [sp, #0]
 800a536:	4642      	mov	r2, r8
 800a538:	464b      	mov	r3, r9
 800a53a:	4630      	mov	r0, r6
 800a53c:	4639      	mov	r1, r7
 800a53e:	f7f6 f985 	bl	800084c <__aeabi_ddiv>
 800a542:	f7f6 fb09 	bl	8000b58 <__aeabi_d2iz>
 800a546:	9001      	str	r0, [sp, #4]
 800a548:	f7f5 ffec 	bl	8000524 <__aeabi_i2d>
 800a54c:	4642      	mov	r2, r8
 800a54e:	464b      	mov	r3, r9
 800a550:	f7f6 f852 	bl	80005f8 <__aeabi_dmul>
 800a554:	4602      	mov	r2, r0
 800a556:	460b      	mov	r3, r1
 800a558:	4630      	mov	r0, r6
 800a55a:	4639      	mov	r1, r7
 800a55c:	f7f5 fe94 	bl	8000288 <__aeabi_dsub>
 800a560:	9e01      	ldr	r6, [sp, #4]
 800a562:	9f04      	ldr	r7, [sp, #16]
 800a564:	3630      	adds	r6, #48	; 0x30
 800a566:	f805 6b01 	strb.w	r6, [r5], #1
 800a56a:	9e00      	ldr	r6, [sp, #0]
 800a56c:	1bae      	subs	r6, r5, r6
 800a56e:	42b7      	cmp	r7, r6
 800a570:	4602      	mov	r2, r0
 800a572:	460b      	mov	r3, r1
 800a574:	d134      	bne.n	800a5e0 <_dtoa_r+0x708>
 800a576:	f7f5 fe89 	bl	800028c <__adddf3>
 800a57a:	4642      	mov	r2, r8
 800a57c:	464b      	mov	r3, r9
 800a57e:	4606      	mov	r6, r0
 800a580:	460f      	mov	r7, r1
 800a582:	f7f6 fac9 	bl	8000b18 <__aeabi_dcmpgt>
 800a586:	b9c8      	cbnz	r0, 800a5bc <_dtoa_r+0x6e4>
 800a588:	4642      	mov	r2, r8
 800a58a:	464b      	mov	r3, r9
 800a58c:	4630      	mov	r0, r6
 800a58e:	4639      	mov	r1, r7
 800a590:	f7f6 fa9a 	bl	8000ac8 <__aeabi_dcmpeq>
 800a594:	b110      	cbz	r0, 800a59c <_dtoa_r+0x6c4>
 800a596:	9b01      	ldr	r3, [sp, #4]
 800a598:	07db      	lsls	r3, r3, #31
 800a59a:	d40f      	bmi.n	800a5bc <_dtoa_r+0x6e4>
 800a59c:	4651      	mov	r1, sl
 800a59e:	4620      	mov	r0, r4
 800a5a0:	f000 fbcc 	bl	800ad3c <_Bfree>
 800a5a4:	2300      	movs	r3, #0
 800a5a6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a5a8:	702b      	strb	r3, [r5, #0]
 800a5aa:	f10b 0301 	add.w	r3, fp, #1
 800a5ae:	6013      	str	r3, [r2, #0]
 800a5b0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a5b2:	2b00      	cmp	r3, #0
 800a5b4:	f43f ace2 	beq.w	8009f7c <_dtoa_r+0xa4>
 800a5b8:	601d      	str	r5, [r3, #0]
 800a5ba:	e4df      	b.n	8009f7c <_dtoa_r+0xa4>
 800a5bc:	465f      	mov	r7, fp
 800a5be:	462b      	mov	r3, r5
 800a5c0:	461d      	mov	r5, r3
 800a5c2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a5c6:	2a39      	cmp	r2, #57	; 0x39
 800a5c8:	d106      	bne.n	800a5d8 <_dtoa_r+0x700>
 800a5ca:	9a00      	ldr	r2, [sp, #0]
 800a5cc:	429a      	cmp	r2, r3
 800a5ce:	d1f7      	bne.n	800a5c0 <_dtoa_r+0x6e8>
 800a5d0:	9900      	ldr	r1, [sp, #0]
 800a5d2:	2230      	movs	r2, #48	; 0x30
 800a5d4:	3701      	adds	r7, #1
 800a5d6:	700a      	strb	r2, [r1, #0]
 800a5d8:	781a      	ldrb	r2, [r3, #0]
 800a5da:	3201      	adds	r2, #1
 800a5dc:	701a      	strb	r2, [r3, #0]
 800a5de:	e790      	b.n	800a502 <_dtoa_r+0x62a>
 800a5e0:	4ba3      	ldr	r3, [pc, #652]	; (800a870 <_dtoa_r+0x998>)
 800a5e2:	2200      	movs	r2, #0
 800a5e4:	f7f6 f808 	bl	80005f8 <__aeabi_dmul>
 800a5e8:	2200      	movs	r2, #0
 800a5ea:	2300      	movs	r3, #0
 800a5ec:	4606      	mov	r6, r0
 800a5ee:	460f      	mov	r7, r1
 800a5f0:	f7f6 fa6a 	bl	8000ac8 <__aeabi_dcmpeq>
 800a5f4:	2800      	cmp	r0, #0
 800a5f6:	d09e      	beq.n	800a536 <_dtoa_r+0x65e>
 800a5f8:	e7d0      	b.n	800a59c <_dtoa_r+0x6c4>
 800a5fa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a5fc:	2a00      	cmp	r2, #0
 800a5fe:	f000 80ca 	beq.w	800a796 <_dtoa_r+0x8be>
 800a602:	9a07      	ldr	r2, [sp, #28]
 800a604:	2a01      	cmp	r2, #1
 800a606:	f300 80ad 	bgt.w	800a764 <_dtoa_r+0x88c>
 800a60a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a60c:	2a00      	cmp	r2, #0
 800a60e:	f000 80a5 	beq.w	800a75c <_dtoa_r+0x884>
 800a612:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800a616:	9e08      	ldr	r6, [sp, #32]
 800a618:	9d05      	ldr	r5, [sp, #20]
 800a61a:	9a05      	ldr	r2, [sp, #20]
 800a61c:	441a      	add	r2, r3
 800a61e:	9205      	str	r2, [sp, #20]
 800a620:	9a06      	ldr	r2, [sp, #24]
 800a622:	2101      	movs	r1, #1
 800a624:	441a      	add	r2, r3
 800a626:	4620      	mov	r0, r4
 800a628:	9206      	str	r2, [sp, #24]
 800a62a:	f000 fc3d 	bl	800aea8 <__i2b>
 800a62e:	4607      	mov	r7, r0
 800a630:	b165      	cbz	r5, 800a64c <_dtoa_r+0x774>
 800a632:	9b06      	ldr	r3, [sp, #24]
 800a634:	2b00      	cmp	r3, #0
 800a636:	dd09      	ble.n	800a64c <_dtoa_r+0x774>
 800a638:	42ab      	cmp	r3, r5
 800a63a:	9a05      	ldr	r2, [sp, #20]
 800a63c:	bfa8      	it	ge
 800a63e:	462b      	movge	r3, r5
 800a640:	1ad2      	subs	r2, r2, r3
 800a642:	9205      	str	r2, [sp, #20]
 800a644:	9a06      	ldr	r2, [sp, #24]
 800a646:	1aed      	subs	r5, r5, r3
 800a648:	1ad3      	subs	r3, r2, r3
 800a64a:	9306      	str	r3, [sp, #24]
 800a64c:	9b08      	ldr	r3, [sp, #32]
 800a64e:	b1f3      	cbz	r3, 800a68e <_dtoa_r+0x7b6>
 800a650:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a652:	2b00      	cmp	r3, #0
 800a654:	f000 80a3 	beq.w	800a79e <_dtoa_r+0x8c6>
 800a658:	2e00      	cmp	r6, #0
 800a65a:	dd10      	ble.n	800a67e <_dtoa_r+0x7a6>
 800a65c:	4639      	mov	r1, r7
 800a65e:	4632      	mov	r2, r6
 800a660:	4620      	mov	r0, r4
 800a662:	f000 fce1 	bl	800b028 <__pow5mult>
 800a666:	4652      	mov	r2, sl
 800a668:	4601      	mov	r1, r0
 800a66a:	4607      	mov	r7, r0
 800a66c:	4620      	mov	r0, r4
 800a66e:	f000 fc31 	bl	800aed4 <__multiply>
 800a672:	4651      	mov	r1, sl
 800a674:	4680      	mov	r8, r0
 800a676:	4620      	mov	r0, r4
 800a678:	f000 fb60 	bl	800ad3c <_Bfree>
 800a67c:	46c2      	mov	sl, r8
 800a67e:	9b08      	ldr	r3, [sp, #32]
 800a680:	1b9a      	subs	r2, r3, r6
 800a682:	d004      	beq.n	800a68e <_dtoa_r+0x7b6>
 800a684:	4651      	mov	r1, sl
 800a686:	4620      	mov	r0, r4
 800a688:	f000 fcce 	bl	800b028 <__pow5mult>
 800a68c:	4682      	mov	sl, r0
 800a68e:	2101      	movs	r1, #1
 800a690:	4620      	mov	r0, r4
 800a692:	f000 fc09 	bl	800aea8 <__i2b>
 800a696:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a698:	2b00      	cmp	r3, #0
 800a69a:	4606      	mov	r6, r0
 800a69c:	f340 8081 	ble.w	800a7a2 <_dtoa_r+0x8ca>
 800a6a0:	461a      	mov	r2, r3
 800a6a2:	4601      	mov	r1, r0
 800a6a4:	4620      	mov	r0, r4
 800a6a6:	f000 fcbf 	bl	800b028 <__pow5mult>
 800a6aa:	9b07      	ldr	r3, [sp, #28]
 800a6ac:	2b01      	cmp	r3, #1
 800a6ae:	4606      	mov	r6, r0
 800a6b0:	dd7a      	ble.n	800a7a8 <_dtoa_r+0x8d0>
 800a6b2:	f04f 0800 	mov.w	r8, #0
 800a6b6:	6933      	ldr	r3, [r6, #16]
 800a6b8:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800a6bc:	6918      	ldr	r0, [r3, #16]
 800a6be:	f000 fba5 	bl	800ae0c <__hi0bits>
 800a6c2:	f1c0 0020 	rsb	r0, r0, #32
 800a6c6:	9b06      	ldr	r3, [sp, #24]
 800a6c8:	4418      	add	r0, r3
 800a6ca:	f010 001f 	ands.w	r0, r0, #31
 800a6ce:	f000 8094 	beq.w	800a7fa <_dtoa_r+0x922>
 800a6d2:	f1c0 0320 	rsb	r3, r0, #32
 800a6d6:	2b04      	cmp	r3, #4
 800a6d8:	f340 8085 	ble.w	800a7e6 <_dtoa_r+0x90e>
 800a6dc:	9b05      	ldr	r3, [sp, #20]
 800a6de:	f1c0 001c 	rsb	r0, r0, #28
 800a6e2:	4403      	add	r3, r0
 800a6e4:	9305      	str	r3, [sp, #20]
 800a6e6:	9b06      	ldr	r3, [sp, #24]
 800a6e8:	4403      	add	r3, r0
 800a6ea:	4405      	add	r5, r0
 800a6ec:	9306      	str	r3, [sp, #24]
 800a6ee:	9b05      	ldr	r3, [sp, #20]
 800a6f0:	2b00      	cmp	r3, #0
 800a6f2:	dd05      	ble.n	800a700 <_dtoa_r+0x828>
 800a6f4:	4651      	mov	r1, sl
 800a6f6:	461a      	mov	r2, r3
 800a6f8:	4620      	mov	r0, r4
 800a6fa:	f000 fcef 	bl	800b0dc <__lshift>
 800a6fe:	4682      	mov	sl, r0
 800a700:	9b06      	ldr	r3, [sp, #24]
 800a702:	2b00      	cmp	r3, #0
 800a704:	dd05      	ble.n	800a712 <_dtoa_r+0x83a>
 800a706:	4631      	mov	r1, r6
 800a708:	461a      	mov	r2, r3
 800a70a:	4620      	mov	r0, r4
 800a70c:	f000 fce6 	bl	800b0dc <__lshift>
 800a710:	4606      	mov	r6, r0
 800a712:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a714:	2b00      	cmp	r3, #0
 800a716:	d072      	beq.n	800a7fe <_dtoa_r+0x926>
 800a718:	4631      	mov	r1, r6
 800a71a:	4650      	mov	r0, sl
 800a71c:	f000 fd4a 	bl	800b1b4 <__mcmp>
 800a720:	2800      	cmp	r0, #0
 800a722:	da6c      	bge.n	800a7fe <_dtoa_r+0x926>
 800a724:	2300      	movs	r3, #0
 800a726:	4651      	mov	r1, sl
 800a728:	220a      	movs	r2, #10
 800a72a:	4620      	mov	r0, r4
 800a72c:	f000 fb28 	bl	800ad80 <__multadd>
 800a730:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a732:	f10b 3bff 	add.w	fp, fp, #4294967295
 800a736:	4682      	mov	sl, r0
 800a738:	2b00      	cmp	r3, #0
 800a73a:	f000 81b0 	beq.w	800aa9e <_dtoa_r+0xbc6>
 800a73e:	2300      	movs	r3, #0
 800a740:	4639      	mov	r1, r7
 800a742:	220a      	movs	r2, #10
 800a744:	4620      	mov	r0, r4
 800a746:	f000 fb1b 	bl	800ad80 <__multadd>
 800a74a:	9b01      	ldr	r3, [sp, #4]
 800a74c:	2b00      	cmp	r3, #0
 800a74e:	4607      	mov	r7, r0
 800a750:	f300 8096 	bgt.w	800a880 <_dtoa_r+0x9a8>
 800a754:	9b07      	ldr	r3, [sp, #28]
 800a756:	2b02      	cmp	r3, #2
 800a758:	dc59      	bgt.n	800a80e <_dtoa_r+0x936>
 800a75a:	e091      	b.n	800a880 <_dtoa_r+0x9a8>
 800a75c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a75e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800a762:	e758      	b.n	800a616 <_dtoa_r+0x73e>
 800a764:	9b04      	ldr	r3, [sp, #16]
 800a766:	1e5e      	subs	r6, r3, #1
 800a768:	9b08      	ldr	r3, [sp, #32]
 800a76a:	42b3      	cmp	r3, r6
 800a76c:	bfbf      	itttt	lt
 800a76e:	9b08      	ldrlt	r3, [sp, #32]
 800a770:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 800a772:	9608      	strlt	r6, [sp, #32]
 800a774:	1af3      	sublt	r3, r6, r3
 800a776:	bfb4      	ite	lt
 800a778:	18d2      	addlt	r2, r2, r3
 800a77a:	1b9e      	subge	r6, r3, r6
 800a77c:	9b04      	ldr	r3, [sp, #16]
 800a77e:	bfbc      	itt	lt
 800a780:	920b      	strlt	r2, [sp, #44]	; 0x2c
 800a782:	2600      	movlt	r6, #0
 800a784:	2b00      	cmp	r3, #0
 800a786:	bfb7      	itett	lt
 800a788:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 800a78c:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 800a790:	1a9d      	sublt	r5, r3, r2
 800a792:	2300      	movlt	r3, #0
 800a794:	e741      	b.n	800a61a <_dtoa_r+0x742>
 800a796:	9e08      	ldr	r6, [sp, #32]
 800a798:	9d05      	ldr	r5, [sp, #20]
 800a79a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800a79c:	e748      	b.n	800a630 <_dtoa_r+0x758>
 800a79e:	9a08      	ldr	r2, [sp, #32]
 800a7a0:	e770      	b.n	800a684 <_dtoa_r+0x7ac>
 800a7a2:	9b07      	ldr	r3, [sp, #28]
 800a7a4:	2b01      	cmp	r3, #1
 800a7a6:	dc19      	bgt.n	800a7dc <_dtoa_r+0x904>
 800a7a8:	9b02      	ldr	r3, [sp, #8]
 800a7aa:	b9bb      	cbnz	r3, 800a7dc <_dtoa_r+0x904>
 800a7ac:	9b03      	ldr	r3, [sp, #12]
 800a7ae:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a7b2:	b99b      	cbnz	r3, 800a7dc <_dtoa_r+0x904>
 800a7b4:	9b03      	ldr	r3, [sp, #12]
 800a7b6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a7ba:	0d1b      	lsrs	r3, r3, #20
 800a7bc:	051b      	lsls	r3, r3, #20
 800a7be:	b183      	cbz	r3, 800a7e2 <_dtoa_r+0x90a>
 800a7c0:	9b05      	ldr	r3, [sp, #20]
 800a7c2:	3301      	adds	r3, #1
 800a7c4:	9305      	str	r3, [sp, #20]
 800a7c6:	9b06      	ldr	r3, [sp, #24]
 800a7c8:	3301      	adds	r3, #1
 800a7ca:	9306      	str	r3, [sp, #24]
 800a7cc:	f04f 0801 	mov.w	r8, #1
 800a7d0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a7d2:	2b00      	cmp	r3, #0
 800a7d4:	f47f af6f 	bne.w	800a6b6 <_dtoa_r+0x7de>
 800a7d8:	2001      	movs	r0, #1
 800a7da:	e774      	b.n	800a6c6 <_dtoa_r+0x7ee>
 800a7dc:	f04f 0800 	mov.w	r8, #0
 800a7e0:	e7f6      	b.n	800a7d0 <_dtoa_r+0x8f8>
 800a7e2:	4698      	mov	r8, r3
 800a7e4:	e7f4      	b.n	800a7d0 <_dtoa_r+0x8f8>
 800a7e6:	d082      	beq.n	800a6ee <_dtoa_r+0x816>
 800a7e8:	9a05      	ldr	r2, [sp, #20]
 800a7ea:	331c      	adds	r3, #28
 800a7ec:	441a      	add	r2, r3
 800a7ee:	9205      	str	r2, [sp, #20]
 800a7f0:	9a06      	ldr	r2, [sp, #24]
 800a7f2:	441a      	add	r2, r3
 800a7f4:	441d      	add	r5, r3
 800a7f6:	9206      	str	r2, [sp, #24]
 800a7f8:	e779      	b.n	800a6ee <_dtoa_r+0x816>
 800a7fa:	4603      	mov	r3, r0
 800a7fc:	e7f4      	b.n	800a7e8 <_dtoa_r+0x910>
 800a7fe:	9b04      	ldr	r3, [sp, #16]
 800a800:	2b00      	cmp	r3, #0
 800a802:	dc37      	bgt.n	800a874 <_dtoa_r+0x99c>
 800a804:	9b07      	ldr	r3, [sp, #28]
 800a806:	2b02      	cmp	r3, #2
 800a808:	dd34      	ble.n	800a874 <_dtoa_r+0x99c>
 800a80a:	9b04      	ldr	r3, [sp, #16]
 800a80c:	9301      	str	r3, [sp, #4]
 800a80e:	9b01      	ldr	r3, [sp, #4]
 800a810:	b963      	cbnz	r3, 800a82c <_dtoa_r+0x954>
 800a812:	4631      	mov	r1, r6
 800a814:	2205      	movs	r2, #5
 800a816:	4620      	mov	r0, r4
 800a818:	f000 fab2 	bl	800ad80 <__multadd>
 800a81c:	4601      	mov	r1, r0
 800a81e:	4606      	mov	r6, r0
 800a820:	4650      	mov	r0, sl
 800a822:	f000 fcc7 	bl	800b1b4 <__mcmp>
 800a826:	2800      	cmp	r0, #0
 800a828:	f73f adbb 	bgt.w	800a3a2 <_dtoa_r+0x4ca>
 800a82c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a82e:	9d00      	ldr	r5, [sp, #0]
 800a830:	ea6f 0b03 	mvn.w	fp, r3
 800a834:	f04f 0800 	mov.w	r8, #0
 800a838:	4631      	mov	r1, r6
 800a83a:	4620      	mov	r0, r4
 800a83c:	f000 fa7e 	bl	800ad3c <_Bfree>
 800a840:	2f00      	cmp	r7, #0
 800a842:	f43f aeab 	beq.w	800a59c <_dtoa_r+0x6c4>
 800a846:	f1b8 0f00 	cmp.w	r8, #0
 800a84a:	d005      	beq.n	800a858 <_dtoa_r+0x980>
 800a84c:	45b8      	cmp	r8, r7
 800a84e:	d003      	beq.n	800a858 <_dtoa_r+0x980>
 800a850:	4641      	mov	r1, r8
 800a852:	4620      	mov	r0, r4
 800a854:	f000 fa72 	bl	800ad3c <_Bfree>
 800a858:	4639      	mov	r1, r7
 800a85a:	4620      	mov	r0, r4
 800a85c:	f000 fa6e 	bl	800ad3c <_Bfree>
 800a860:	e69c      	b.n	800a59c <_dtoa_r+0x6c4>
 800a862:	2600      	movs	r6, #0
 800a864:	4637      	mov	r7, r6
 800a866:	e7e1      	b.n	800a82c <_dtoa_r+0x954>
 800a868:	46bb      	mov	fp, r7
 800a86a:	4637      	mov	r7, r6
 800a86c:	e599      	b.n	800a3a2 <_dtoa_r+0x4ca>
 800a86e:	bf00      	nop
 800a870:	40240000 	.word	0x40240000
 800a874:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a876:	2b00      	cmp	r3, #0
 800a878:	f000 80c8 	beq.w	800aa0c <_dtoa_r+0xb34>
 800a87c:	9b04      	ldr	r3, [sp, #16]
 800a87e:	9301      	str	r3, [sp, #4]
 800a880:	2d00      	cmp	r5, #0
 800a882:	dd05      	ble.n	800a890 <_dtoa_r+0x9b8>
 800a884:	4639      	mov	r1, r7
 800a886:	462a      	mov	r2, r5
 800a888:	4620      	mov	r0, r4
 800a88a:	f000 fc27 	bl	800b0dc <__lshift>
 800a88e:	4607      	mov	r7, r0
 800a890:	f1b8 0f00 	cmp.w	r8, #0
 800a894:	d05b      	beq.n	800a94e <_dtoa_r+0xa76>
 800a896:	6879      	ldr	r1, [r7, #4]
 800a898:	4620      	mov	r0, r4
 800a89a:	f000 fa0f 	bl	800acbc <_Balloc>
 800a89e:	4605      	mov	r5, r0
 800a8a0:	b928      	cbnz	r0, 800a8ae <_dtoa_r+0x9d6>
 800a8a2:	4b83      	ldr	r3, [pc, #524]	; (800aab0 <_dtoa_r+0xbd8>)
 800a8a4:	4602      	mov	r2, r0
 800a8a6:	f240 21ef 	movw	r1, #751	; 0x2ef
 800a8aa:	f7ff bb2e 	b.w	8009f0a <_dtoa_r+0x32>
 800a8ae:	693a      	ldr	r2, [r7, #16]
 800a8b0:	3202      	adds	r2, #2
 800a8b2:	0092      	lsls	r2, r2, #2
 800a8b4:	f107 010c 	add.w	r1, r7, #12
 800a8b8:	300c      	adds	r0, #12
 800a8ba:	f7ff fa76 	bl	8009daa <memcpy>
 800a8be:	2201      	movs	r2, #1
 800a8c0:	4629      	mov	r1, r5
 800a8c2:	4620      	mov	r0, r4
 800a8c4:	f000 fc0a 	bl	800b0dc <__lshift>
 800a8c8:	9b00      	ldr	r3, [sp, #0]
 800a8ca:	3301      	adds	r3, #1
 800a8cc:	9304      	str	r3, [sp, #16]
 800a8ce:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a8d2:	4413      	add	r3, r2
 800a8d4:	9308      	str	r3, [sp, #32]
 800a8d6:	9b02      	ldr	r3, [sp, #8]
 800a8d8:	f003 0301 	and.w	r3, r3, #1
 800a8dc:	46b8      	mov	r8, r7
 800a8de:	9306      	str	r3, [sp, #24]
 800a8e0:	4607      	mov	r7, r0
 800a8e2:	9b04      	ldr	r3, [sp, #16]
 800a8e4:	4631      	mov	r1, r6
 800a8e6:	3b01      	subs	r3, #1
 800a8e8:	4650      	mov	r0, sl
 800a8ea:	9301      	str	r3, [sp, #4]
 800a8ec:	f7ff fa6b 	bl	8009dc6 <quorem>
 800a8f0:	4641      	mov	r1, r8
 800a8f2:	9002      	str	r0, [sp, #8]
 800a8f4:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800a8f8:	4650      	mov	r0, sl
 800a8fa:	f000 fc5b 	bl	800b1b4 <__mcmp>
 800a8fe:	463a      	mov	r2, r7
 800a900:	9005      	str	r0, [sp, #20]
 800a902:	4631      	mov	r1, r6
 800a904:	4620      	mov	r0, r4
 800a906:	f000 fc71 	bl	800b1ec <__mdiff>
 800a90a:	68c2      	ldr	r2, [r0, #12]
 800a90c:	4605      	mov	r5, r0
 800a90e:	bb02      	cbnz	r2, 800a952 <_dtoa_r+0xa7a>
 800a910:	4601      	mov	r1, r0
 800a912:	4650      	mov	r0, sl
 800a914:	f000 fc4e 	bl	800b1b4 <__mcmp>
 800a918:	4602      	mov	r2, r0
 800a91a:	4629      	mov	r1, r5
 800a91c:	4620      	mov	r0, r4
 800a91e:	9209      	str	r2, [sp, #36]	; 0x24
 800a920:	f000 fa0c 	bl	800ad3c <_Bfree>
 800a924:	9b07      	ldr	r3, [sp, #28]
 800a926:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a928:	9d04      	ldr	r5, [sp, #16]
 800a92a:	ea43 0102 	orr.w	r1, r3, r2
 800a92e:	9b06      	ldr	r3, [sp, #24]
 800a930:	4319      	orrs	r1, r3
 800a932:	d110      	bne.n	800a956 <_dtoa_r+0xa7e>
 800a934:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800a938:	d029      	beq.n	800a98e <_dtoa_r+0xab6>
 800a93a:	9b05      	ldr	r3, [sp, #20]
 800a93c:	2b00      	cmp	r3, #0
 800a93e:	dd02      	ble.n	800a946 <_dtoa_r+0xa6e>
 800a940:	9b02      	ldr	r3, [sp, #8]
 800a942:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800a946:	9b01      	ldr	r3, [sp, #4]
 800a948:	f883 9000 	strb.w	r9, [r3]
 800a94c:	e774      	b.n	800a838 <_dtoa_r+0x960>
 800a94e:	4638      	mov	r0, r7
 800a950:	e7ba      	b.n	800a8c8 <_dtoa_r+0x9f0>
 800a952:	2201      	movs	r2, #1
 800a954:	e7e1      	b.n	800a91a <_dtoa_r+0xa42>
 800a956:	9b05      	ldr	r3, [sp, #20]
 800a958:	2b00      	cmp	r3, #0
 800a95a:	db04      	blt.n	800a966 <_dtoa_r+0xa8e>
 800a95c:	9907      	ldr	r1, [sp, #28]
 800a95e:	430b      	orrs	r3, r1
 800a960:	9906      	ldr	r1, [sp, #24]
 800a962:	430b      	orrs	r3, r1
 800a964:	d120      	bne.n	800a9a8 <_dtoa_r+0xad0>
 800a966:	2a00      	cmp	r2, #0
 800a968:	dded      	ble.n	800a946 <_dtoa_r+0xa6e>
 800a96a:	4651      	mov	r1, sl
 800a96c:	2201      	movs	r2, #1
 800a96e:	4620      	mov	r0, r4
 800a970:	f000 fbb4 	bl	800b0dc <__lshift>
 800a974:	4631      	mov	r1, r6
 800a976:	4682      	mov	sl, r0
 800a978:	f000 fc1c 	bl	800b1b4 <__mcmp>
 800a97c:	2800      	cmp	r0, #0
 800a97e:	dc03      	bgt.n	800a988 <_dtoa_r+0xab0>
 800a980:	d1e1      	bne.n	800a946 <_dtoa_r+0xa6e>
 800a982:	f019 0f01 	tst.w	r9, #1
 800a986:	d0de      	beq.n	800a946 <_dtoa_r+0xa6e>
 800a988:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800a98c:	d1d8      	bne.n	800a940 <_dtoa_r+0xa68>
 800a98e:	9a01      	ldr	r2, [sp, #4]
 800a990:	2339      	movs	r3, #57	; 0x39
 800a992:	7013      	strb	r3, [r2, #0]
 800a994:	462b      	mov	r3, r5
 800a996:	461d      	mov	r5, r3
 800a998:	3b01      	subs	r3, #1
 800a99a:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800a99e:	2a39      	cmp	r2, #57	; 0x39
 800a9a0:	d06c      	beq.n	800aa7c <_dtoa_r+0xba4>
 800a9a2:	3201      	adds	r2, #1
 800a9a4:	701a      	strb	r2, [r3, #0]
 800a9a6:	e747      	b.n	800a838 <_dtoa_r+0x960>
 800a9a8:	2a00      	cmp	r2, #0
 800a9aa:	dd07      	ble.n	800a9bc <_dtoa_r+0xae4>
 800a9ac:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800a9b0:	d0ed      	beq.n	800a98e <_dtoa_r+0xab6>
 800a9b2:	9a01      	ldr	r2, [sp, #4]
 800a9b4:	f109 0301 	add.w	r3, r9, #1
 800a9b8:	7013      	strb	r3, [r2, #0]
 800a9ba:	e73d      	b.n	800a838 <_dtoa_r+0x960>
 800a9bc:	9b04      	ldr	r3, [sp, #16]
 800a9be:	9a08      	ldr	r2, [sp, #32]
 800a9c0:	f803 9c01 	strb.w	r9, [r3, #-1]
 800a9c4:	4293      	cmp	r3, r2
 800a9c6:	d043      	beq.n	800aa50 <_dtoa_r+0xb78>
 800a9c8:	4651      	mov	r1, sl
 800a9ca:	2300      	movs	r3, #0
 800a9cc:	220a      	movs	r2, #10
 800a9ce:	4620      	mov	r0, r4
 800a9d0:	f000 f9d6 	bl	800ad80 <__multadd>
 800a9d4:	45b8      	cmp	r8, r7
 800a9d6:	4682      	mov	sl, r0
 800a9d8:	f04f 0300 	mov.w	r3, #0
 800a9dc:	f04f 020a 	mov.w	r2, #10
 800a9e0:	4641      	mov	r1, r8
 800a9e2:	4620      	mov	r0, r4
 800a9e4:	d107      	bne.n	800a9f6 <_dtoa_r+0xb1e>
 800a9e6:	f000 f9cb 	bl	800ad80 <__multadd>
 800a9ea:	4680      	mov	r8, r0
 800a9ec:	4607      	mov	r7, r0
 800a9ee:	9b04      	ldr	r3, [sp, #16]
 800a9f0:	3301      	adds	r3, #1
 800a9f2:	9304      	str	r3, [sp, #16]
 800a9f4:	e775      	b.n	800a8e2 <_dtoa_r+0xa0a>
 800a9f6:	f000 f9c3 	bl	800ad80 <__multadd>
 800a9fa:	4639      	mov	r1, r7
 800a9fc:	4680      	mov	r8, r0
 800a9fe:	2300      	movs	r3, #0
 800aa00:	220a      	movs	r2, #10
 800aa02:	4620      	mov	r0, r4
 800aa04:	f000 f9bc 	bl	800ad80 <__multadd>
 800aa08:	4607      	mov	r7, r0
 800aa0a:	e7f0      	b.n	800a9ee <_dtoa_r+0xb16>
 800aa0c:	9b04      	ldr	r3, [sp, #16]
 800aa0e:	9301      	str	r3, [sp, #4]
 800aa10:	9d00      	ldr	r5, [sp, #0]
 800aa12:	4631      	mov	r1, r6
 800aa14:	4650      	mov	r0, sl
 800aa16:	f7ff f9d6 	bl	8009dc6 <quorem>
 800aa1a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800aa1e:	9b00      	ldr	r3, [sp, #0]
 800aa20:	f805 9b01 	strb.w	r9, [r5], #1
 800aa24:	1aea      	subs	r2, r5, r3
 800aa26:	9b01      	ldr	r3, [sp, #4]
 800aa28:	4293      	cmp	r3, r2
 800aa2a:	dd07      	ble.n	800aa3c <_dtoa_r+0xb64>
 800aa2c:	4651      	mov	r1, sl
 800aa2e:	2300      	movs	r3, #0
 800aa30:	220a      	movs	r2, #10
 800aa32:	4620      	mov	r0, r4
 800aa34:	f000 f9a4 	bl	800ad80 <__multadd>
 800aa38:	4682      	mov	sl, r0
 800aa3a:	e7ea      	b.n	800aa12 <_dtoa_r+0xb3a>
 800aa3c:	9b01      	ldr	r3, [sp, #4]
 800aa3e:	2b00      	cmp	r3, #0
 800aa40:	bfc8      	it	gt
 800aa42:	461d      	movgt	r5, r3
 800aa44:	9b00      	ldr	r3, [sp, #0]
 800aa46:	bfd8      	it	le
 800aa48:	2501      	movle	r5, #1
 800aa4a:	441d      	add	r5, r3
 800aa4c:	f04f 0800 	mov.w	r8, #0
 800aa50:	4651      	mov	r1, sl
 800aa52:	2201      	movs	r2, #1
 800aa54:	4620      	mov	r0, r4
 800aa56:	f000 fb41 	bl	800b0dc <__lshift>
 800aa5a:	4631      	mov	r1, r6
 800aa5c:	4682      	mov	sl, r0
 800aa5e:	f000 fba9 	bl	800b1b4 <__mcmp>
 800aa62:	2800      	cmp	r0, #0
 800aa64:	dc96      	bgt.n	800a994 <_dtoa_r+0xabc>
 800aa66:	d102      	bne.n	800aa6e <_dtoa_r+0xb96>
 800aa68:	f019 0f01 	tst.w	r9, #1
 800aa6c:	d192      	bne.n	800a994 <_dtoa_r+0xabc>
 800aa6e:	462b      	mov	r3, r5
 800aa70:	461d      	mov	r5, r3
 800aa72:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800aa76:	2a30      	cmp	r2, #48	; 0x30
 800aa78:	d0fa      	beq.n	800aa70 <_dtoa_r+0xb98>
 800aa7a:	e6dd      	b.n	800a838 <_dtoa_r+0x960>
 800aa7c:	9a00      	ldr	r2, [sp, #0]
 800aa7e:	429a      	cmp	r2, r3
 800aa80:	d189      	bne.n	800a996 <_dtoa_r+0xabe>
 800aa82:	f10b 0b01 	add.w	fp, fp, #1
 800aa86:	2331      	movs	r3, #49	; 0x31
 800aa88:	e796      	b.n	800a9b8 <_dtoa_r+0xae0>
 800aa8a:	4b0a      	ldr	r3, [pc, #40]	; (800aab4 <_dtoa_r+0xbdc>)
 800aa8c:	f7ff ba99 	b.w	8009fc2 <_dtoa_r+0xea>
 800aa90:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800aa92:	2b00      	cmp	r3, #0
 800aa94:	f47f aa6d 	bne.w	8009f72 <_dtoa_r+0x9a>
 800aa98:	4b07      	ldr	r3, [pc, #28]	; (800aab8 <_dtoa_r+0xbe0>)
 800aa9a:	f7ff ba92 	b.w	8009fc2 <_dtoa_r+0xea>
 800aa9e:	9b01      	ldr	r3, [sp, #4]
 800aaa0:	2b00      	cmp	r3, #0
 800aaa2:	dcb5      	bgt.n	800aa10 <_dtoa_r+0xb38>
 800aaa4:	9b07      	ldr	r3, [sp, #28]
 800aaa6:	2b02      	cmp	r3, #2
 800aaa8:	f73f aeb1 	bgt.w	800a80e <_dtoa_r+0x936>
 800aaac:	e7b0      	b.n	800aa10 <_dtoa_r+0xb38>
 800aaae:	bf00      	nop
 800aab0:	08010030 	.word	0x08010030
 800aab4:	0800ff90 	.word	0x0800ff90
 800aab8:	0800ffb4 	.word	0x0800ffb4

0800aabc <_free_r>:
 800aabc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800aabe:	2900      	cmp	r1, #0
 800aac0:	d044      	beq.n	800ab4c <_free_r+0x90>
 800aac2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800aac6:	9001      	str	r0, [sp, #4]
 800aac8:	2b00      	cmp	r3, #0
 800aaca:	f1a1 0404 	sub.w	r4, r1, #4
 800aace:	bfb8      	it	lt
 800aad0:	18e4      	addlt	r4, r4, r3
 800aad2:	f000 f8e7 	bl	800aca4 <__malloc_lock>
 800aad6:	4a1e      	ldr	r2, [pc, #120]	; (800ab50 <_free_r+0x94>)
 800aad8:	9801      	ldr	r0, [sp, #4]
 800aada:	6813      	ldr	r3, [r2, #0]
 800aadc:	b933      	cbnz	r3, 800aaec <_free_r+0x30>
 800aade:	6063      	str	r3, [r4, #4]
 800aae0:	6014      	str	r4, [r2, #0]
 800aae2:	b003      	add	sp, #12
 800aae4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800aae8:	f000 b8e2 	b.w	800acb0 <__malloc_unlock>
 800aaec:	42a3      	cmp	r3, r4
 800aaee:	d908      	bls.n	800ab02 <_free_r+0x46>
 800aaf0:	6825      	ldr	r5, [r4, #0]
 800aaf2:	1961      	adds	r1, r4, r5
 800aaf4:	428b      	cmp	r3, r1
 800aaf6:	bf01      	itttt	eq
 800aaf8:	6819      	ldreq	r1, [r3, #0]
 800aafa:	685b      	ldreq	r3, [r3, #4]
 800aafc:	1949      	addeq	r1, r1, r5
 800aafe:	6021      	streq	r1, [r4, #0]
 800ab00:	e7ed      	b.n	800aade <_free_r+0x22>
 800ab02:	461a      	mov	r2, r3
 800ab04:	685b      	ldr	r3, [r3, #4]
 800ab06:	b10b      	cbz	r3, 800ab0c <_free_r+0x50>
 800ab08:	42a3      	cmp	r3, r4
 800ab0a:	d9fa      	bls.n	800ab02 <_free_r+0x46>
 800ab0c:	6811      	ldr	r1, [r2, #0]
 800ab0e:	1855      	adds	r5, r2, r1
 800ab10:	42a5      	cmp	r5, r4
 800ab12:	d10b      	bne.n	800ab2c <_free_r+0x70>
 800ab14:	6824      	ldr	r4, [r4, #0]
 800ab16:	4421      	add	r1, r4
 800ab18:	1854      	adds	r4, r2, r1
 800ab1a:	42a3      	cmp	r3, r4
 800ab1c:	6011      	str	r1, [r2, #0]
 800ab1e:	d1e0      	bne.n	800aae2 <_free_r+0x26>
 800ab20:	681c      	ldr	r4, [r3, #0]
 800ab22:	685b      	ldr	r3, [r3, #4]
 800ab24:	6053      	str	r3, [r2, #4]
 800ab26:	440c      	add	r4, r1
 800ab28:	6014      	str	r4, [r2, #0]
 800ab2a:	e7da      	b.n	800aae2 <_free_r+0x26>
 800ab2c:	d902      	bls.n	800ab34 <_free_r+0x78>
 800ab2e:	230c      	movs	r3, #12
 800ab30:	6003      	str	r3, [r0, #0]
 800ab32:	e7d6      	b.n	800aae2 <_free_r+0x26>
 800ab34:	6825      	ldr	r5, [r4, #0]
 800ab36:	1961      	adds	r1, r4, r5
 800ab38:	428b      	cmp	r3, r1
 800ab3a:	bf04      	itt	eq
 800ab3c:	6819      	ldreq	r1, [r3, #0]
 800ab3e:	685b      	ldreq	r3, [r3, #4]
 800ab40:	6063      	str	r3, [r4, #4]
 800ab42:	bf04      	itt	eq
 800ab44:	1949      	addeq	r1, r1, r5
 800ab46:	6021      	streq	r1, [r4, #0]
 800ab48:	6054      	str	r4, [r2, #4]
 800ab4a:	e7ca      	b.n	800aae2 <_free_r+0x26>
 800ab4c:	b003      	add	sp, #12
 800ab4e:	bd30      	pop	{r4, r5, pc}
 800ab50:	2000a7c0 	.word	0x2000a7c0

0800ab54 <malloc>:
 800ab54:	4b02      	ldr	r3, [pc, #8]	; (800ab60 <malloc+0xc>)
 800ab56:	4601      	mov	r1, r0
 800ab58:	6818      	ldr	r0, [r3, #0]
 800ab5a:	f000 b823 	b.w	800aba4 <_malloc_r>
 800ab5e:	bf00      	nop
 800ab60:	20000070 	.word	0x20000070

0800ab64 <sbrk_aligned>:
 800ab64:	b570      	push	{r4, r5, r6, lr}
 800ab66:	4e0e      	ldr	r6, [pc, #56]	; (800aba0 <sbrk_aligned+0x3c>)
 800ab68:	460c      	mov	r4, r1
 800ab6a:	6831      	ldr	r1, [r6, #0]
 800ab6c:	4605      	mov	r5, r0
 800ab6e:	b911      	cbnz	r1, 800ab76 <sbrk_aligned+0x12>
 800ab70:	f001 faa2 	bl	800c0b8 <_sbrk_r>
 800ab74:	6030      	str	r0, [r6, #0]
 800ab76:	4621      	mov	r1, r4
 800ab78:	4628      	mov	r0, r5
 800ab7a:	f001 fa9d 	bl	800c0b8 <_sbrk_r>
 800ab7e:	1c43      	adds	r3, r0, #1
 800ab80:	d00a      	beq.n	800ab98 <sbrk_aligned+0x34>
 800ab82:	1cc4      	adds	r4, r0, #3
 800ab84:	f024 0403 	bic.w	r4, r4, #3
 800ab88:	42a0      	cmp	r0, r4
 800ab8a:	d007      	beq.n	800ab9c <sbrk_aligned+0x38>
 800ab8c:	1a21      	subs	r1, r4, r0
 800ab8e:	4628      	mov	r0, r5
 800ab90:	f001 fa92 	bl	800c0b8 <_sbrk_r>
 800ab94:	3001      	adds	r0, #1
 800ab96:	d101      	bne.n	800ab9c <sbrk_aligned+0x38>
 800ab98:	f04f 34ff 	mov.w	r4, #4294967295
 800ab9c:	4620      	mov	r0, r4
 800ab9e:	bd70      	pop	{r4, r5, r6, pc}
 800aba0:	2000a7c4 	.word	0x2000a7c4

0800aba4 <_malloc_r>:
 800aba4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800aba8:	1ccd      	adds	r5, r1, #3
 800abaa:	f025 0503 	bic.w	r5, r5, #3
 800abae:	3508      	adds	r5, #8
 800abb0:	2d0c      	cmp	r5, #12
 800abb2:	bf38      	it	cc
 800abb4:	250c      	movcc	r5, #12
 800abb6:	2d00      	cmp	r5, #0
 800abb8:	4607      	mov	r7, r0
 800abba:	db01      	blt.n	800abc0 <_malloc_r+0x1c>
 800abbc:	42a9      	cmp	r1, r5
 800abbe:	d905      	bls.n	800abcc <_malloc_r+0x28>
 800abc0:	230c      	movs	r3, #12
 800abc2:	603b      	str	r3, [r7, #0]
 800abc4:	2600      	movs	r6, #0
 800abc6:	4630      	mov	r0, r6
 800abc8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800abcc:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800aca0 <_malloc_r+0xfc>
 800abd0:	f000 f868 	bl	800aca4 <__malloc_lock>
 800abd4:	f8d8 3000 	ldr.w	r3, [r8]
 800abd8:	461c      	mov	r4, r3
 800abda:	bb5c      	cbnz	r4, 800ac34 <_malloc_r+0x90>
 800abdc:	4629      	mov	r1, r5
 800abde:	4638      	mov	r0, r7
 800abe0:	f7ff ffc0 	bl	800ab64 <sbrk_aligned>
 800abe4:	1c43      	adds	r3, r0, #1
 800abe6:	4604      	mov	r4, r0
 800abe8:	d155      	bne.n	800ac96 <_malloc_r+0xf2>
 800abea:	f8d8 4000 	ldr.w	r4, [r8]
 800abee:	4626      	mov	r6, r4
 800abf0:	2e00      	cmp	r6, #0
 800abf2:	d145      	bne.n	800ac80 <_malloc_r+0xdc>
 800abf4:	2c00      	cmp	r4, #0
 800abf6:	d048      	beq.n	800ac8a <_malloc_r+0xe6>
 800abf8:	6823      	ldr	r3, [r4, #0]
 800abfa:	4631      	mov	r1, r6
 800abfc:	4638      	mov	r0, r7
 800abfe:	eb04 0903 	add.w	r9, r4, r3
 800ac02:	f001 fa59 	bl	800c0b8 <_sbrk_r>
 800ac06:	4581      	cmp	r9, r0
 800ac08:	d13f      	bne.n	800ac8a <_malloc_r+0xe6>
 800ac0a:	6821      	ldr	r1, [r4, #0]
 800ac0c:	1a6d      	subs	r5, r5, r1
 800ac0e:	4629      	mov	r1, r5
 800ac10:	4638      	mov	r0, r7
 800ac12:	f7ff ffa7 	bl	800ab64 <sbrk_aligned>
 800ac16:	3001      	adds	r0, #1
 800ac18:	d037      	beq.n	800ac8a <_malloc_r+0xe6>
 800ac1a:	6823      	ldr	r3, [r4, #0]
 800ac1c:	442b      	add	r3, r5
 800ac1e:	6023      	str	r3, [r4, #0]
 800ac20:	f8d8 3000 	ldr.w	r3, [r8]
 800ac24:	2b00      	cmp	r3, #0
 800ac26:	d038      	beq.n	800ac9a <_malloc_r+0xf6>
 800ac28:	685a      	ldr	r2, [r3, #4]
 800ac2a:	42a2      	cmp	r2, r4
 800ac2c:	d12b      	bne.n	800ac86 <_malloc_r+0xe2>
 800ac2e:	2200      	movs	r2, #0
 800ac30:	605a      	str	r2, [r3, #4]
 800ac32:	e00f      	b.n	800ac54 <_malloc_r+0xb0>
 800ac34:	6822      	ldr	r2, [r4, #0]
 800ac36:	1b52      	subs	r2, r2, r5
 800ac38:	d41f      	bmi.n	800ac7a <_malloc_r+0xd6>
 800ac3a:	2a0b      	cmp	r2, #11
 800ac3c:	d917      	bls.n	800ac6e <_malloc_r+0xca>
 800ac3e:	1961      	adds	r1, r4, r5
 800ac40:	42a3      	cmp	r3, r4
 800ac42:	6025      	str	r5, [r4, #0]
 800ac44:	bf18      	it	ne
 800ac46:	6059      	strne	r1, [r3, #4]
 800ac48:	6863      	ldr	r3, [r4, #4]
 800ac4a:	bf08      	it	eq
 800ac4c:	f8c8 1000 	streq.w	r1, [r8]
 800ac50:	5162      	str	r2, [r4, r5]
 800ac52:	604b      	str	r3, [r1, #4]
 800ac54:	4638      	mov	r0, r7
 800ac56:	f104 060b 	add.w	r6, r4, #11
 800ac5a:	f000 f829 	bl	800acb0 <__malloc_unlock>
 800ac5e:	f026 0607 	bic.w	r6, r6, #7
 800ac62:	1d23      	adds	r3, r4, #4
 800ac64:	1af2      	subs	r2, r6, r3
 800ac66:	d0ae      	beq.n	800abc6 <_malloc_r+0x22>
 800ac68:	1b9b      	subs	r3, r3, r6
 800ac6a:	50a3      	str	r3, [r4, r2]
 800ac6c:	e7ab      	b.n	800abc6 <_malloc_r+0x22>
 800ac6e:	42a3      	cmp	r3, r4
 800ac70:	6862      	ldr	r2, [r4, #4]
 800ac72:	d1dd      	bne.n	800ac30 <_malloc_r+0x8c>
 800ac74:	f8c8 2000 	str.w	r2, [r8]
 800ac78:	e7ec      	b.n	800ac54 <_malloc_r+0xb0>
 800ac7a:	4623      	mov	r3, r4
 800ac7c:	6864      	ldr	r4, [r4, #4]
 800ac7e:	e7ac      	b.n	800abda <_malloc_r+0x36>
 800ac80:	4634      	mov	r4, r6
 800ac82:	6876      	ldr	r6, [r6, #4]
 800ac84:	e7b4      	b.n	800abf0 <_malloc_r+0x4c>
 800ac86:	4613      	mov	r3, r2
 800ac88:	e7cc      	b.n	800ac24 <_malloc_r+0x80>
 800ac8a:	230c      	movs	r3, #12
 800ac8c:	603b      	str	r3, [r7, #0]
 800ac8e:	4638      	mov	r0, r7
 800ac90:	f000 f80e 	bl	800acb0 <__malloc_unlock>
 800ac94:	e797      	b.n	800abc6 <_malloc_r+0x22>
 800ac96:	6025      	str	r5, [r4, #0]
 800ac98:	e7dc      	b.n	800ac54 <_malloc_r+0xb0>
 800ac9a:	605b      	str	r3, [r3, #4]
 800ac9c:	deff      	udf	#255	; 0xff
 800ac9e:	bf00      	nop
 800aca0:	2000a7c0 	.word	0x2000a7c0

0800aca4 <__malloc_lock>:
 800aca4:	4801      	ldr	r0, [pc, #4]	; (800acac <__malloc_lock+0x8>)
 800aca6:	f7ff b87e 	b.w	8009da6 <__retarget_lock_acquire_recursive>
 800acaa:	bf00      	nop
 800acac:	2000a7bc 	.word	0x2000a7bc

0800acb0 <__malloc_unlock>:
 800acb0:	4801      	ldr	r0, [pc, #4]	; (800acb8 <__malloc_unlock+0x8>)
 800acb2:	f7ff b879 	b.w	8009da8 <__retarget_lock_release_recursive>
 800acb6:	bf00      	nop
 800acb8:	2000a7bc 	.word	0x2000a7bc

0800acbc <_Balloc>:
 800acbc:	b570      	push	{r4, r5, r6, lr}
 800acbe:	69c6      	ldr	r6, [r0, #28]
 800acc0:	4604      	mov	r4, r0
 800acc2:	460d      	mov	r5, r1
 800acc4:	b976      	cbnz	r6, 800ace4 <_Balloc+0x28>
 800acc6:	2010      	movs	r0, #16
 800acc8:	f7ff ff44 	bl	800ab54 <malloc>
 800accc:	4602      	mov	r2, r0
 800acce:	61e0      	str	r0, [r4, #28]
 800acd0:	b920      	cbnz	r0, 800acdc <_Balloc+0x20>
 800acd2:	4b18      	ldr	r3, [pc, #96]	; (800ad34 <_Balloc+0x78>)
 800acd4:	4818      	ldr	r0, [pc, #96]	; (800ad38 <_Balloc+0x7c>)
 800acd6:	216b      	movs	r1, #107	; 0x6b
 800acd8:	f001 f9fe 	bl	800c0d8 <__assert_func>
 800acdc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ace0:	6006      	str	r6, [r0, #0]
 800ace2:	60c6      	str	r6, [r0, #12]
 800ace4:	69e6      	ldr	r6, [r4, #28]
 800ace6:	68f3      	ldr	r3, [r6, #12]
 800ace8:	b183      	cbz	r3, 800ad0c <_Balloc+0x50>
 800acea:	69e3      	ldr	r3, [r4, #28]
 800acec:	68db      	ldr	r3, [r3, #12]
 800acee:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800acf2:	b9b8      	cbnz	r0, 800ad24 <_Balloc+0x68>
 800acf4:	2101      	movs	r1, #1
 800acf6:	fa01 f605 	lsl.w	r6, r1, r5
 800acfa:	1d72      	adds	r2, r6, #5
 800acfc:	0092      	lsls	r2, r2, #2
 800acfe:	4620      	mov	r0, r4
 800ad00:	f001 fa08 	bl	800c114 <_calloc_r>
 800ad04:	b160      	cbz	r0, 800ad20 <_Balloc+0x64>
 800ad06:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800ad0a:	e00e      	b.n	800ad2a <_Balloc+0x6e>
 800ad0c:	2221      	movs	r2, #33	; 0x21
 800ad0e:	2104      	movs	r1, #4
 800ad10:	4620      	mov	r0, r4
 800ad12:	f001 f9ff 	bl	800c114 <_calloc_r>
 800ad16:	69e3      	ldr	r3, [r4, #28]
 800ad18:	60f0      	str	r0, [r6, #12]
 800ad1a:	68db      	ldr	r3, [r3, #12]
 800ad1c:	2b00      	cmp	r3, #0
 800ad1e:	d1e4      	bne.n	800acea <_Balloc+0x2e>
 800ad20:	2000      	movs	r0, #0
 800ad22:	bd70      	pop	{r4, r5, r6, pc}
 800ad24:	6802      	ldr	r2, [r0, #0]
 800ad26:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800ad2a:	2300      	movs	r3, #0
 800ad2c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800ad30:	e7f7      	b.n	800ad22 <_Balloc+0x66>
 800ad32:	bf00      	nop
 800ad34:	0800ffc1 	.word	0x0800ffc1
 800ad38:	08010041 	.word	0x08010041

0800ad3c <_Bfree>:
 800ad3c:	b570      	push	{r4, r5, r6, lr}
 800ad3e:	69c6      	ldr	r6, [r0, #28]
 800ad40:	4605      	mov	r5, r0
 800ad42:	460c      	mov	r4, r1
 800ad44:	b976      	cbnz	r6, 800ad64 <_Bfree+0x28>
 800ad46:	2010      	movs	r0, #16
 800ad48:	f7ff ff04 	bl	800ab54 <malloc>
 800ad4c:	4602      	mov	r2, r0
 800ad4e:	61e8      	str	r0, [r5, #28]
 800ad50:	b920      	cbnz	r0, 800ad5c <_Bfree+0x20>
 800ad52:	4b09      	ldr	r3, [pc, #36]	; (800ad78 <_Bfree+0x3c>)
 800ad54:	4809      	ldr	r0, [pc, #36]	; (800ad7c <_Bfree+0x40>)
 800ad56:	218f      	movs	r1, #143	; 0x8f
 800ad58:	f001 f9be 	bl	800c0d8 <__assert_func>
 800ad5c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ad60:	6006      	str	r6, [r0, #0]
 800ad62:	60c6      	str	r6, [r0, #12]
 800ad64:	b13c      	cbz	r4, 800ad76 <_Bfree+0x3a>
 800ad66:	69eb      	ldr	r3, [r5, #28]
 800ad68:	6862      	ldr	r2, [r4, #4]
 800ad6a:	68db      	ldr	r3, [r3, #12]
 800ad6c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800ad70:	6021      	str	r1, [r4, #0]
 800ad72:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800ad76:	bd70      	pop	{r4, r5, r6, pc}
 800ad78:	0800ffc1 	.word	0x0800ffc1
 800ad7c:	08010041 	.word	0x08010041

0800ad80 <__multadd>:
 800ad80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ad84:	690d      	ldr	r5, [r1, #16]
 800ad86:	4607      	mov	r7, r0
 800ad88:	460c      	mov	r4, r1
 800ad8a:	461e      	mov	r6, r3
 800ad8c:	f101 0c14 	add.w	ip, r1, #20
 800ad90:	2000      	movs	r0, #0
 800ad92:	f8dc 3000 	ldr.w	r3, [ip]
 800ad96:	b299      	uxth	r1, r3
 800ad98:	fb02 6101 	mla	r1, r2, r1, r6
 800ad9c:	0c1e      	lsrs	r6, r3, #16
 800ad9e:	0c0b      	lsrs	r3, r1, #16
 800ada0:	fb02 3306 	mla	r3, r2, r6, r3
 800ada4:	b289      	uxth	r1, r1
 800ada6:	3001      	adds	r0, #1
 800ada8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800adac:	4285      	cmp	r5, r0
 800adae:	f84c 1b04 	str.w	r1, [ip], #4
 800adb2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800adb6:	dcec      	bgt.n	800ad92 <__multadd+0x12>
 800adb8:	b30e      	cbz	r6, 800adfe <__multadd+0x7e>
 800adba:	68a3      	ldr	r3, [r4, #8]
 800adbc:	42ab      	cmp	r3, r5
 800adbe:	dc19      	bgt.n	800adf4 <__multadd+0x74>
 800adc0:	6861      	ldr	r1, [r4, #4]
 800adc2:	4638      	mov	r0, r7
 800adc4:	3101      	adds	r1, #1
 800adc6:	f7ff ff79 	bl	800acbc <_Balloc>
 800adca:	4680      	mov	r8, r0
 800adcc:	b928      	cbnz	r0, 800adda <__multadd+0x5a>
 800adce:	4602      	mov	r2, r0
 800add0:	4b0c      	ldr	r3, [pc, #48]	; (800ae04 <__multadd+0x84>)
 800add2:	480d      	ldr	r0, [pc, #52]	; (800ae08 <__multadd+0x88>)
 800add4:	21ba      	movs	r1, #186	; 0xba
 800add6:	f001 f97f 	bl	800c0d8 <__assert_func>
 800adda:	6922      	ldr	r2, [r4, #16]
 800addc:	3202      	adds	r2, #2
 800adde:	f104 010c 	add.w	r1, r4, #12
 800ade2:	0092      	lsls	r2, r2, #2
 800ade4:	300c      	adds	r0, #12
 800ade6:	f7fe ffe0 	bl	8009daa <memcpy>
 800adea:	4621      	mov	r1, r4
 800adec:	4638      	mov	r0, r7
 800adee:	f7ff ffa5 	bl	800ad3c <_Bfree>
 800adf2:	4644      	mov	r4, r8
 800adf4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800adf8:	3501      	adds	r5, #1
 800adfa:	615e      	str	r6, [r3, #20]
 800adfc:	6125      	str	r5, [r4, #16]
 800adfe:	4620      	mov	r0, r4
 800ae00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ae04:	08010030 	.word	0x08010030
 800ae08:	08010041 	.word	0x08010041

0800ae0c <__hi0bits>:
 800ae0c:	0c03      	lsrs	r3, r0, #16
 800ae0e:	041b      	lsls	r3, r3, #16
 800ae10:	b9d3      	cbnz	r3, 800ae48 <__hi0bits+0x3c>
 800ae12:	0400      	lsls	r0, r0, #16
 800ae14:	2310      	movs	r3, #16
 800ae16:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800ae1a:	bf04      	itt	eq
 800ae1c:	0200      	lsleq	r0, r0, #8
 800ae1e:	3308      	addeq	r3, #8
 800ae20:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800ae24:	bf04      	itt	eq
 800ae26:	0100      	lsleq	r0, r0, #4
 800ae28:	3304      	addeq	r3, #4
 800ae2a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800ae2e:	bf04      	itt	eq
 800ae30:	0080      	lsleq	r0, r0, #2
 800ae32:	3302      	addeq	r3, #2
 800ae34:	2800      	cmp	r0, #0
 800ae36:	db05      	blt.n	800ae44 <__hi0bits+0x38>
 800ae38:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800ae3c:	f103 0301 	add.w	r3, r3, #1
 800ae40:	bf08      	it	eq
 800ae42:	2320      	moveq	r3, #32
 800ae44:	4618      	mov	r0, r3
 800ae46:	4770      	bx	lr
 800ae48:	2300      	movs	r3, #0
 800ae4a:	e7e4      	b.n	800ae16 <__hi0bits+0xa>

0800ae4c <__lo0bits>:
 800ae4c:	6803      	ldr	r3, [r0, #0]
 800ae4e:	f013 0207 	ands.w	r2, r3, #7
 800ae52:	d00c      	beq.n	800ae6e <__lo0bits+0x22>
 800ae54:	07d9      	lsls	r1, r3, #31
 800ae56:	d422      	bmi.n	800ae9e <__lo0bits+0x52>
 800ae58:	079a      	lsls	r2, r3, #30
 800ae5a:	bf49      	itett	mi
 800ae5c:	085b      	lsrmi	r3, r3, #1
 800ae5e:	089b      	lsrpl	r3, r3, #2
 800ae60:	6003      	strmi	r3, [r0, #0]
 800ae62:	2201      	movmi	r2, #1
 800ae64:	bf5c      	itt	pl
 800ae66:	6003      	strpl	r3, [r0, #0]
 800ae68:	2202      	movpl	r2, #2
 800ae6a:	4610      	mov	r0, r2
 800ae6c:	4770      	bx	lr
 800ae6e:	b299      	uxth	r1, r3
 800ae70:	b909      	cbnz	r1, 800ae76 <__lo0bits+0x2a>
 800ae72:	0c1b      	lsrs	r3, r3, #16
 800ae74:	2210      	movs	r2, #16
 800ae76:	b2d9      	uxtb	r1, r3
 800ae78:	b909      	cbnz	r1, 800ae7e <__lo0bits+0x32>
 800ae7a:	3208      	adds	r2, #8
 800ae7c:	0a1b      	lsrs	r3, r3, #8
 800ae7e:	0719      	lsls	r1, r3, #28
 800ae80:	bf04      	itt	eq
 800ae82:	091b      	lsreq	r3, r3, #4
 800ae84:	3204      	addeq	r2, #4
 800ae86:	0799      	lsls	r1, r3, #30
 800ae88:	bf04      	itt	eq
 800ae8a:	089b      	lsreq	r3, r3, #2
 800ae8c:	3202      	addeq	r2, #2
 800ae8e:	07d9      	lsls	r1, r3, #31
 800ae90:	d403      	bmi.n	800ae9a <__lo0bits+0x4e>
 800ae92:	085b      	lsrs	r3, r3, #1
 800ae94:	f102 0201 	add.w	r2, r2, #1
 800ae98:	d003      	beq.n	800aea2 <__lo0bits+0x56>
 800ae9a:	6003      	str	r3, [r0, #0]
 800ae9c:	e7e5      	b.n	800ae6a <__lo0bits+0x1e>
 800ae9e:	2200      	movs	r2, #0
 800aea0:	e7e3      	b.n	800ae6a <__lo0bits+0x1e>
 800aea2:	2220      	movs	r2, #32
 800aea4:	e7e1      	b.n	800ae6a <__lo0bits+0x1e>
	...

0800aea8 <__i2b>:
 800aea8:	b510      	push	{r4, lr}
 800aeaa:	460c      	mov	r4, r1
 800aeac:	2101      	movs	r1, #1
 800aeae:	f7ff ff05 	bl	800acbc <_Balloc>
 800aeb2:	4602      	mov	r2, r0
 800aeb4:	b928      	cbnz	r0, 800aec2 <__i2b+0x1a>
 800aeb6:	4b05      	ldr	r3, [pc, #20]	; (800aecc <__i2b+0x24>)
 800aeb8:	4805      	ldr	r0, [pc, #20]	; (800aed0 <__i2b+0x28>)
 800aeba:	f240 1145 	movw	r1, #325	; 0x145
 800aebe:	f001 f90b 	bl	800c0d8 <__assert_func>
 800aec2:	2301      	movs	r3, #1
 800aec4:	6144      	str	r4, [r0, #20]
 800aec6:	6103      	str	r3, [r0, #16]
 800aec8:	bd10      	pop	{r4, pc}
 800aeca:	bf00      	nop
 800aecc:	08010030 	.word	0x08010030
 800aed0:	08010041 	.word	0x08010041

0800aed4 <__multiply>:
 800aed4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aed8:	4691      	mov	r9, r2
 800aeda:	690a      	ldr	r2, [r1, #16]
 800aedc:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800aee0:	429a      	cmp	r2, r3
 800aee2:	bfb8      	it	lt
 800aee4:	460b      	movlt	r3, r1
 800aee6:	460c      	mov	r4, r1
 800aee8:	bfbc      	itt	lt
 800aeea:	464c      	movlt	r4, r9
 800aeec:	4699      	movlt	r9, r3
 800aeee:	6927      	ldr	r7, [r4, #16]
 800aef0:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800aef4:	68a3      	ldr	r3, [r4, #8]
 800aef6:	6861      	ldr	r1, [r4, #4]
 800aef8:	eb07 060a 	add.w	r6, r7, sl
 800aefc:	42b3      	cmp	r3, r6
 800aefe:	b085      	sub	sp, #20
 800af00:	bfb8      	it	lt
 800af02:	3101      	addlt	r1, #1
 800af04:	f7ff feda 	bl	800acbc <_Balloc>
 800af08:	b930      	cbnz	r0, 800af18 <__multiply+0x44>
 800af0a:	4602      	mov	r2, r0
 800af0c:	4b44      	ldr	r3, [pc, #272]	; (800b020 <__multiply+0x14c>)
 800af0e:	4845      	ldr	r0, [pc, #276]	; (800b024 <__multiply+0x150>)
 800af10:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800af14:	f001 f8e0 	bl	800c0d8 <__assert_func>
 800af18:	f100 0514 	add.w	r5, r0, #20
 800af1c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800af20:	462b      	mov	r3, r5
 800af22:	2200      	movs	r2, #0
 800af24:	4543      	cmp	r3, r8
 800af26:	d321      	bcc.n	800af6c <__multiply+0x98>
 800af28:	f104 0314 	add.w	r3, r4, #20
 800af2c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800af30:	f109 0314 	add.w	r3, r9, #20
 800af34:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800af38:	9202      	str	r2, [sp, #8]
 800af3a:	1b3a      	subs	r2, r7, r4
 800af3c:	3a15      	subs	r2, #21
 800af3e:	f022 0203 	bic.w	r2, r2, #3
 800af42:	3204      	adds	r2, #4
 800af44:	f104 0115 	add.w	r1, r4, #21
 800af48:	428f      	cmp	r7, r1
 800af4a:	bf38      	it	cc
 800af4c:	2204      	movcc	r2, #4
 800af4e:	9201      	str	r2, [sp, #4]
 800af50:	9a02      	ldr	r2, [sp, #8]
 800af52:	9303      	str	r3, [sp, #12]
 800af54:	429a      	cmp	r2, r3
 800af56:	d80c      	bhi.n	800af72 <__multiply+0x9e>
 800af58:	2e00      	cmp	r6, #0
 800af5a:	dd03      	ble.n	800af64 <__multiply+0x90>
 800af5c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800af60:	2b00      	cmp	r3, #0
 800af62:	d05b      	beq.n	800b01c <__multiply+0x148>
 800af64:	6106      	str	r6, [r0, #16]
 800af66:	b005      	add	sp, #20
 800af68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800af6c:	f843 2b04 	str.w	r2, [r3], #4
 800af70:	e7d8      	b.n	800af24 <__multiply+0x50>
 800af72:	f8b3 a000 	ldrh.w	sl, [r3]
 800af76:	f1ba 0f00 	cmp.w	sl, #0
 800af7a:	d024      	beq.n	800afc6 <__multiply+0xf2>
 800af7c:	f104 0e14 	add.w	lr, r4, #20
 800af80:	46a9      	mov	r9, r5
 800af82:	f04f 0c00 	mov.w	ip, #0
 800af86:	f85e 2b04 	ldr.w	r2, [lr], #4
 800af8a:	f8d9 1000 	ldr.w	r1, [r9]
 800af8e:	fa1f fb82 	uxth.w	fp, r2
 800af92:	b289      	uxth	r1, r1
 800af94:	fb0a 110b 	mla	r1, sl, fp, r1
 800af98:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800af9c:	f8d9 2000 	ldr.w	r2, [r9]
 800afa0:	4461      	add	r1, ip
 800afa2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800afa6:	fb0a c20b 	mla	r2, sl, fp, ip
 800afaa:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800afae:	b289      	uxth	r1, r1
 800afb0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800afb4:	4577      	cmp	r7, lr
 800afb6:	f849 1b04 	str.w	r1, [r9], #4
 800afba:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800afbe:	d8e2      	bhi.n	800af86 <__multiply+0xb2>
 800afc0:	9a01      	ldr	r2, [sp, #4]
 800afc2:	f845 c002 	str.w	ip, [r5, r2]
 800afc6:	9a03      	ldr	r2, [sp, #12]
 800afc8:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800afcc:	3304      	adds	r3, #4
 800afce:	f1b9 0f00 	cmp.w	r9, #0
 800afd2:	d021      	beq.n	800b018 <__multiply+0x144>
 800afd4:	6829      	ldr	r1, [r5, #0]
 800afd6:	f104 0c14 	add.w	ip, r4, #20
 800afda:	46ae      	mov	lr, r5
 800afdc:	f04f 0a00 	mov.w	sl, #0
 800afe0:	f8bc b000 	ldrh.w	fp, [ip]
 800afe4:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800afe8:	fb09 220b 	mla	r2, r9, fp, r2
 800afec:	4452      	add	r2, sl
 800afee:	b289      	uxth	r1, r1
 800aff0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800aff4:	f84e 1b04 	str.w	r1, [lr], #4
 800aff8:	f85c 1b04 	ldr.w	r1, [ip], #4
 800affc:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800b000:	f8be 1000 	ldrh.w	r1, [lr]
 800b004:	fb09 110a 	mla	r1, r9, sl, r1
 800b008:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800b00c:	4567      	cmp	r7, ip
 800b00e:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800b012:	d8e5      	bhi.n	800afe0 <__multiply+0x10c>
 800b014:	9a01      	ldr	r2, [sp, #4]
 800b016:	50a9      	str	r1, [r5, r2]
 800b018:	3504      	adds	r5, #4
 800b01a:	e799      	b.n	800af50 <__multiply+0x7c>
 800b01c:	3e01      	subs	r6, #1
 800b01e:	e79b      	b.n	800af58 <__multiply+0x84>
 800b020:	08010030 	.word	0x08010030
 800b024:	08010041 	.word	0x08010041

0800b028 <__pow5mult>:
 800b028:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b02c:	4615      	mov	r5, r2
 800b02e:	f012 0203 	ands.w	r2, r2, #3
 800b032:	4606      	mov	r6, r0
 800b034:	460f      	mov	r7, r1
 800b036:	d007      	beq.n	800b048 <__pow5mult+0x20>
 800b038:	4c25      	ldr	r4, [pc, #148]	; (800b0d0 <__pow5mult+0xa8>)
 800b03a:	3a01      	subs	r2, #1
 800b03c:	2300      	movs	r3, #0
 800b03e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b042:	f7ff fe9d 	bl	800ad80 <__multadd>
 800b046:	4607      	mov	r7, r0
 800b048:	10ad      	asrs	r5, r5, #2
 800b04a:	d03d      	beq.n	800b0c8 <__pow5mult+0xa0>
 800b04c:	69f4      	ldr	r4, [r6, #28]
 800b04e:	b97c      	cbnz	r4, 800b070 <__pow5mult+0x48>
 800b050:	2010      	movs	r0, #16
 800b052:	f7ff fd7f 	bl	800ab54 <malloc>
 800b056:	4602      	mov	r2, r0
 800b058:	61f0      	str	r0, [r6, #28]
 800b05a:	b928      	cbnz	r0, 800b068 <__pow5mult+0x40>
 800b05c:	4b1d      	ldr	r3, [pc, #116]	; (800b0d4 <__pow5mult+0xac>)
 800b05e:	481e      	ldr	r0, [pc, #120]	; (800b0d8 <__pow5mult+0xb0>)
 800b060:	f240 11b3 	movw	r1, #435	; 0x1b3
 800b064:	f001 f838 	bl	800c0d8 <__assert_func>
 800b068:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b06c:	6004      	str	r4, [r0, #0]
 800b06e:	60c4      	str	r4, [r0, #12]
 800b070:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800b074:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800b078:	b94c      	cbnz	r4, 800b08e <__pow5mult+0x66>
 800b07a:	f240 2171 	movw	r1, #625	; 0x271
 800b07e:	4630      	mov	r0, r6
 800b080:	f7ff ff12 	bl	800aea8 <__i2b>
 800b084:	2300      	movs	r3, #0
 800b086:	f8c8 0008 	str.w	r0, [r8, #8]
 800b08a:	4604      	mov	r4, r0
 800b08c:	6003      	str	r3, [r0, #0]
 800b08e:	f04f 0900 	mov.w	r9, #0
 800b092:	07eb      	lsls	r3, r5, #31
 800b094:	d50a      	bpl.n	800b0ac <__pow5mult+0x84>
 800b096:	4639      	mov	r1, r7
 800b098:	4622      	mov	r2, r4
 800b09a:	4630      	mov	r0, r6
 800b09c:	f7ff ff1a 	bl	800aed4 <__multiply>
 800b0a0:	4639      	mov	r1, r7
 800b0a2:	4680      	mov	r8, r0
 800b0a4:	4630      	mov	r0, r6
 800b0a6:	f7ff fe49 	bl	800ad3c <_Bfree>
 800b0aa:	4647      	mov	r7, r8
 800b0ac:	106d      	asrs	r5, r5, #1
 800b0ae:	d00b      	beq.n	800b0c8 <__pow5mult+0xa0>
 800b0b0:	6820      	ldr	r0, [r4, #0]
 800b0b2:	b938      	cbnz	r0, 800b0c4 <__pow5mult+0x9c>
 800b0b4:	4622      	mov	r2, r4
 800b0b6:	4621      	mov	r1, r4
 800b0b8:	4630      	mov	r0, r6
 800b0ba:	f7ff ff0b 	bl	800aed4 <__multiply>
 800b0be:	6020      	str	r0, [r4, #0]
 800b0c0:	f8c0 9000 	str.w	r9, [r0]
 800b0c4:	4604      	mov	r4, r0
 800b0c6:	e7e4      	b.n	800b092 <__pow5mult+0x6a>
 800b0c8:	4638      	mov	r0, r7
 800b0ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b0ce:	bf00      	nop
 800b0d0:	08010190 	.word	0x08010190
 800b0d4:	0800ffc1 	.word	0x0800ffc1
 800b0d8:	08010041 	.word	0x08010041

0800b0dc <__lshift>:
 800b0dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b0e0:	460c      	mov	r4, r1
 800b0e2:	6849      	ldr	r1, [r1, #4]
 800b0e4:	6923      	ldr	r3, [r4, #16]
 800b0e6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800b0ea:	68a3      	ldr	r3, [r4, #8]
 800b0ec:	4607      	mov	r7, r0
 800b0ee:	4691      	mov	r9, r2
 800b0f0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800b0f4:	f108 0601 	add.w	r6, r8, #1
 800b0f8:	42b3      	cmp	r3, r6
 800b0fa:	db0b      	blt.n	800b114 <__lshift+0x38>
 800b0fc:	4638      	mov	r0, r7
 800b0fe:	f7ff fddd 	bl	800acbc <_Balloc>
 800b102:	4605      	mov	r5, r0
 800b104:	b948      	cbnz	r0, 800b11a <__lshift+0x3e>
 800b106:	4602      	mov	r2, r0
 800b108:	4b28      	ldr	r3, [pc, #160]	; (800b1ac <__lshift+0xd0>)
 800b10a:	4829      	ldr	r0, [pc, #164]	; (800b1b0 <__lshift+0xd4>)
 800b10c:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800b110:	f000 ffe2 	bl	800c0d8 <__assert_func>
 800b114:	3101      	adds	r1, #1
 800b116:	005b      	lsls	r3, r3, #1
 800b118:	e7ee      	b.n	800b0f8 <__lshift+0x1c>
 800b11a:	2300      	movs	r3, #0
 800b11c:	f100 0114 	add.w	r1, r0, #20
 800b120:	f100 0210 	add.w	r2, r0, #16
 800b124:	4618      	mov	r0, r3
 800b126:	4553      	cmp	r3, sl
 800b128:	db33      	blt.n	800b192 <__lshift+0xb6>
 800b12a:	6920      	ldr	r0, [r4, #16]
 800b12c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b130:	f104 0314 	add.w	r3, r4, #20
 800b134:	f019 091f 	ands.w	r9, r9, #31
 800b138:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b13c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800b140:	d02b      	beq.n	800b19a <__lshift+0xbe>
 800b142:	f1c9 0e20 	rsb	lr, r9, #32
 800b146:	468a      	mov	sl, r1
 800b148:	2200      	movs	r2, #0
 800b14a:	6818      	ldr	r0, [r3, #0]
 800b14c:	fa00 f009 	lsl.w	r0, r0, r9
 800b150:	4310      	orrs	r0, r2
 800b152:	f84a 0b04 	str.w	r0, [sl], #4
 800b156:	f853 2b04 	ldr.w	r2, [r3], #4
 800b15a:	459c      	cmp	ip, r3
 800b15c:	fa22 f20e 	lsr.w	r2, r2, lr
 800b160:	d8f3      	bhi.n	800b14a <__lshift+0x6e>
 800b162:	ebac 0304 	sub.w	r3, ip, r4
 800b166:	3b15      	subs	r3, #21
 800b168:	f023 0303 	bic.w	r3, r3, #3
 800b16c:	3304      	adds	r3, #4
 800b16e:	f104 0015 	add.w	r0, r4, #21
 800b172:	4584      	cmp	ip, r0
 800b174:	bf38      	it	cc
 800b176:	2304      	movcc	r3, #4
 800b178:	50ca      	str	r2, [r1, r3]
 800b17a:	b10a      	cbz	r2, 800b180 <__lshift+0xa4>
 800b17c:	f108 0602 	add.w	r6, r8, #2
 800b180:	3e01      	subs	r6, #1
 800b182:	4638      	mov	r0, r7
 800b184:	612e      	str	r6, [r5, #16]
 800b186:	4621      	mov	r1, r4
 800b188:	f7ff fdd8 	bl	800ad3c <_Bfree>
 800b18c:	4628      	mov	r0, r5
 800b18e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b192:	f842 0f04 	str.w	r0, [r2, #4]!
 800b196:	3301      	adds	r3, #1
 800b198:	e7c5      	b.n	800b126 <__lshift+0x4a>
 800b19a:	3904      	subs	r1, #4
 800b19c:	f853 2b04 	ldr.w	r2, [r3], #4
 800b1a0:	f841 2f04 	str.w	r2, [r1, #4]!
 800b1a4:	459c      	cmp	ip, r3
 800b1a6:	d8f9      	bhi.n	800b19c <__lshift+0xc0>
 800b1a8:	e7ea      	b.n	800b180 <__lshift+0xa4>
 800b1aa:	bf00      	nop
 800b1ac:	08010030 	.word	0x08010030
 800b1b0:	08010041 	.word	0x08010041

0800b1b4 <__mcmp>:
 800b1b4:	b530      	push	{r4, r5, lr}
 800b1b6:	6902      	ldr	r2, [r0, #16]
 800b1b8:	690c      	ldr	r4, [r1, #16]
 800b1ba:	1b12      	subs	r2, r2, r4
 800b1bc:	d10e      	bne.n	800b1dc <__mcmp+0x28>
 800b1be:	f100 0314 	add.w	r3, r0, #20
 800b1c2:	3114      	adds	r1, #20
 800b1c4:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800b1c8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800b1cc:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800b1d0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800b1d4:	42a5      	cmp	r5, r4
 800b1d6:	d003      	beq.n	800b1e0 <__mcmp+0x2c>
 800b1d8:	d305      	bcc.n	800b1e6 <__mcmp+0x32>
 800b1da:	2201      	movs	r2, #1
 800b1dc:	4610      	mov	r0, r2
 800b1de:	bd30      	pop	{r4, r5, pc}
 800b1e0:	4283      	cmp	r3, r0
 800b1e2:	d3f3      	bcc.n	800b1cc <__mcmp+0x18>
 800b1e4:	e7fa      	b.n	800b1dc <__mcmp+0x28>
 800b1e6:	f04f 32ff 	mov.w	r2, #4294967295
 800b1ea:	e7f7      	b.n	800b1dc <__mcmp+0x28>

0800b1ec <__mdiff>:
 800b1ec:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b1f0:	460c      	mov	r4, r1
 800b1f2:	4606      	mov	r6, r0
 800b1f4:	4611      	mov	r1, r2
 800b1f6:	4620      	mov	r0, r4
 800b1f8:	4690      	mov	r8, r2
 800b1fa:	f7ff ffdb 	bl	800b1b4 <__mcmp>
 800b1fe:	1e05      	subs	r5, r0, #0
 800b200:	d110      	bne.n	800b224 <__mdiff+0x38>
 800b202:	4629      	mov	r1, r5
 800b204:	4630      	mov	r0, r6
 800b206:	f7ff fd59 	bl	800acbc <_Balloc>
 800b20a:	b930      	cbnz	r0, 800b21a <__mdiff+0x2e>
 800b20c:	4b3a      	ldr	r3, [pc, #232]	; (800b2f8 <__mdiff+0x10c>)
 800b20e:	4602      	mov	r2, r0
 800b210:	f240 2137 	movw	r1, #567	; 0x237
 800b214:	4839      	ldr	r0, [pc, #228]	; (800b2fc <__mdiff+0x110>)
 800b216:	f000 ff5f 	bl	800c0d8 <__assert_func>
 800b21a:	2301      	movs	r3, #1
 800b21c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800b220:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b224:	bfa4      	itt	ge
 800b226:	4643      	movge	r3, r8
 800b228:	46a0      	movge	r8, r4
 800b22a:	4630      	mov	r0, r6
 800b22c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800b230:	bfa6      	itte	ge
 800b232:	461c      	movge	r4, r3
 800b234:	2500      	movge	r5, #0
 800b236:	2501      	movlt	r5, #1
 800b238:	f7ff fd40 	bl	800acbc <_Balloc>
 800b23c:	b920      	cbnz	r0, 800b248 <__mdiff+0x5c>
 800b23e:	4b2e      	ldr	r3, [pc, #184]	; (800b2f8 <__mdiff+0x10c>)
 800b240:	4602      	mov	r2, r0
 800b242:	f240 2145 	movw	r1, #581	; 0x245
 800b246:	e7e5      	b.n	800b214 <__mdiff+0x28>
 800b248:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800b24c:	6926      	ldr	r6, [r4, #16]
 800b24e:	60c5      	str	r5, [r0, #12]
 800b250:	f104 0914 	add.w	r9, r4, #20
 800b254:	f108 0514 	add.w	r5, r8, #20
 800b258:	f100 0e14 	add.w	lr, r0, #20
 800b25c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800b260:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800b264:	f108 0210 	add.w	r2, r8, #16
 800b268:	46f2      	mov	sl, lr
 800b26a:	2100      	movs	r1, #0
 800b26c:	f859 3b04 	ldr.w	r3, [r9], #4
 800b270:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800b274:	fa11 f88b 	uxtah	r8, r1, fp
 800b278:	b299      	uxth	r1, r3
 800b27a:	0c1b      	lsrs	r3, r3, #16
 800b27c:	eba8 0801 	sub.w	r8, r8, r1
 800b280:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800b284:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800b288:	fa1f f888 	uxth.w	r8, r8
 800b28c:	1419      	asrs	r1, r3, #16
 800b28e:	454e      	cmp	r6, r9
 800b290:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800b294:	f84a 3b04 	str.w	r3, [sl], #4
 800b298:	d8e8      	bhi.n	800b26c <__mdiff+0x80>
 800b29a:	1b33      	subs	r3, r6, r4
 800b29c:	3b15      	subs	r3, #21
 800b29e:	f023 0303 	bic.w	r3, r3, #3
 800b2a2:	3304      	adds	r3, #4
 800b2a4:	3415      	adds	r4, #21
 800b2a6:	42a6      	cmp	r6, r4
 800b2a8:	bf38      	it	cc
 800b2aa:	2304      	movcc	r3, #4
 800b2ac:	441d      	add	r5, r3
 800b2ae:	4473      	add	r3, lr
 800b2b0:	469e      	mov	lr, r3
 800b2b2:	462e      	mov	r6, r5
 800b2b4:	4566      	cmp	r6, ip
 800b2b6:	d30e      	bcc.n	800b2d6 <__mdiff+0xea>
 800b2b8:	f10c 0203 	add.w	r2, ip, #3
 800b2bc:	1b52      	subs	r2, r2, r5
 800b2be:	f022 0203 	bic.w	r2, r2, #3
 800b2c2:	3d03      	subs	r5, #3
 800b2c4:	45ac      	cmp	ip, r5
 800b2c6:	bf38      	it	cc
 800b2c8:	2200      	movcc	r2, #0
 800b2ca:	4413      	add	r3, r2
 800b2cc:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800b2d0:	b17a      	cbz	r2, 800b2f2 <__mdiff+0x106>
 800b2d2:	6107      	str	r7, [r0, #16]
 800b2d4:	e7a4      	b.n	800b220 <__mdiff+0x34>
 800b2d6:	f856 8b04 	ldr.w	r8, [r6], #4
 800b2da:	fa11 f288 	uxtah	r2, r1, r8
 800b2de:	1414      	asrs	r4, r2, #16
 800b2e0:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800b2e4:	b292      	uxth	r2, r2
 800b2e6:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800b2ea:	f84e 2b04 	str.w	r2, [lr], #4
 800b2ee:	1421      	asrs	r1, r4, #16
 800b2f0:	e7e0      	b.n	800b2b4 <__mdiff+0xc8>
 800b2f2:	3f01      	subs	r7, #1
 800b2f4:	e7ea      	b.n	800b2cc <__mdiff+0xe0>
 800b2f6:	bf00      	nop
 800b2f8:	08010030 	.word	0x08010030
 800b2fc:	08010041 	.word	0x08010041

0800b300 <__d2b>:
 800b300:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800b304:	460f      	mov	r7, r1
 800b306:	2101      	movs	r1, #1
 800b308:	ec59 8b10 	vmov	r8, r9, d0
 800b30c:	4616      	mov	r6, r2
 800b30e:	f7ff fcd5 	bl	800acbc <_Balloc>
 800b312:	4604      	mov	r4, r0
 800b314:	b930      	cbnz	r0, 800b324 <__d2b+0x24>
 800b316:	4602      	mov	r2, r0
 800b318:	4b24      	ldr	r3, [pc, #144]	; (800b3ac <__d2b+0xac>)
 800b31a:	4825      	ldr	r0, [pc, #148]	; (800b3b0 <__d2b+0xb0>)
 800b31c:	f240 310f 	movw	r1, #783	; 0x30f
 800b320:	f000 feda 	bl	800c0d8 <__assert_func>
 800b324:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800b328:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b32c:	bb2d      	cbnz	r5, 800b37a <__d2b+0x7a>
 800b32e:	9301      	str	r3, [sp, #4]
 800b330:	f1b8 0300 	subs.w	r3, r8, #0
 800b334:	d026      	beq.n	800b384 <__d2b+0x84>
 800b336:	4668      	mov	r0, sp
 800b338:	9300      	str	r3, [sp, #0]
 800b33a:	f7ff fd87 	bl	800ae4c <__lo0bits>
 800b33e:	e9dd 1200 	ldrd	r1, r2, [sp]
 800b342:	b1e8      	cbz	r0, 800b380 <__d2b+0x80>
 800b344:	f1c0 0320 	rsb	r3, r0, #32
 800b348:	fa02 f303 	lsl.w	r3, r2, r3
 800b34c:	430b      	orrs	r3, r1
 800b34e:	40c2      	lsrs	r2, r0
 800b350:	6163      	str	r3, [r4, #20]
 800b352:	9201      	str	r2, [sp, #4]
 800b354:	9b01      	ldr	r3, [sp, #4]
 800b356:	61a3      	str	r3, [r4, #24]
 800b358:	2b00      	cmp	r3, #0
 800b35a:	bf14      	ite	ne
 800b35c:	2202      	movne	r2, #2
 800b35e:	2201      	moveq	r2, #1
 800b360:	6122      	str	r2, [r4, #16]
 800b362:	b1bd      	cbz	r5, 800b394 <__d2b+0x94>
 800b364:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800b368:	4405      	add	r5, r0
 800b36a:	603d      	str	r5, [r7, #0]
 800b36c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800b370:	6030      	str	r0, [r6, #0]
 800b372:	4620      	mov	r0, r4
 800b374:	b003      	add	sp, #12
 800b376:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b37a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b37e:	e7d6      	b.n	800b32e <__d2b+0x2e>
 800b380:	6161      	str	r1, [r4, #20]
 800b382:	e7e7      	b.n	800b354 <__d2b+0x54>
 800b384:	a801      	add	r0, sp, #4
 800b386:	f7ff fd61 	bl	800ae4c <__lo0bits>
 800b38a:	9b01      	ldr	r3, [sp, #4]
 800b38c:	6163      	str	r3, [r4, #20]
 800b38e:	3020      	adds	r0, #32
 800b390:	2201      	movs	r2, #1
 800b392:	e7e5      	b.n	800b360 <__d2b+0x60>
 800b394:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800b398:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800b39c:	6038      	str	r0, [r7, #0]
 800b39e:	6918      	ldr	r0, [r3, #16]
 800b3a0:	f7ff fd34 	bl	800ae0c <__hi0bits>
 800b3a4:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800b3a8:	e7e2      	b.n	800b370 <__d2b+0x70>
 800b3aa:	bf00      	nop
 800b3ac:	08010030 	.word	0x08010030
 800b3b0:	08010041 	.word	0x08010041

0800b3b4 <__swhatbuf_r>:
 800b3b4:	b570      	push	{r4, r5, r6, lr}
 800b3b6:	460c      	mov	r4, r1
 800b3b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b3bc:	2900      	cmp	r1, #0
 800b3be:	b096      	sub	sp, #88	; 0x58
 800b3c0:	4615      	mov	r5, r2
 800b3c2:	461e      	mov	r6, r3
 800b3c4:	da0d      	bge.n	800b3e2 <__swhatbuf_r+0x2e>
 800b3c6:	89a3      	ldrh	r3, [r4, #12]
 800b3c8:	f013 0f80 	tst.w	r3, #128	; 0x80
 800b3cc:	f04f 0100 	mov.w	r1, #0
 800b3d0:	bf0c      	ite	eq
 800b3d2:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800b3d6:	2340      	movne	r3, #64	; 0x40
 800b3d8:	2000      	movs	r0, #0
 800b3da:	6031      	str	r1, [r6, #0]
 800b3dc:	602b      	str	r3, [r5, #0]
 800b3de:	b016      	add	sp, #88	; 0x58
 800b3e0:	bd70      	pop	{r4, r5, r6, pc}
 800b3e2:	466a      	mov	r2, sp
 800b3e4:	f000 fe46 	bl	800c074 <_fstat_r>
 800b3e8:	2800      	cmp	r0, #0
 800b3ea:	dbec      	blt.n	800b3c6 <__swhatbuf_r+0x12>
 800b3ec:	9901      	ldr	r1, [sp, #4]
 800b3ee:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800b3f2:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800b3f6:	4259      	negs	r1, r3
 800b3f8:	4159      	adcs	r1, r3
 800b3fa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b3fe:	e7eb      	b.n	800b3d8 <__swhatbuf_r+0x24>

0800b400 <__smakebuf_r>:
 800b400:	898b      	ldrh	r3, [r1, #12]
 800b402:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b404:	079d      	lsls	r5, r3, #30
 800b406:	4606      	mov	r6, r0
 800b408:	460c      	mov	r4, r1
 800b40a:	d507      	bpl.n	800b41c <__smakebuf_r+0x1c>
 800b40c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800b410:	6023      	str	r3, [r4, #0]
 800b412:	6123      	str	r3, [r4, #16]
 800b414:	2301      	movs	r3, #1
 800b416:	6163      	str	r3, [r4, #20]
 800b418:	b002      	add	sp, #8
 800b41a:	bd70      	pop	{r4, r5, r6, pc}
 800b41c:	ab01      	add	r3, sp, #4
 800b41e:	466a      	mov	r2, sp
 800b420:	f7ff ffc8 	bl	800b3b4 <__swhatbuf_r>
 800b424:	9900      	ldr	r1, [sp, #0]
 800b426:	4605      	mov	r5, r0
 800b428:	4630      	mov	r0, r6
 800b42a:	f7ff fbbb 	bl	800aba4 <_malloc_r>
 800b42e:	b948      	cbnz	r0, 800b444 <__smakebuf_r+0x44>
 800b430:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b434:	059a      	lsls	r2, r3, #22
 800b436:	d4ef      	bmi.n	800b418 <__smakebuf_r+0x18>
 800b438:	f023 0303 	bic.w	r3, r3, #3
 800b43c:	f043 0302 	orr.w	r3, r3, #2
 800b440:	81a3      	strh	r3, [r4, #12]
 800b442:	e7e3      	b.n	800b40c <__smakebuf_r+0xc>
 800b444:	89a3      	ldrh	r3, [r4, #12]
 800b446:	6020      	str	r0, [r4, #0]
 800b448:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b44c:	81a3      	strh	r3, [r4, #12]
 800b44e:	9b00      	ldr	r3, [sp, #0]
 800b450:	6163      	str	r3, [r4, #20]
 800b452:	9b01      	ldr	r3, [sp, #4]
 800b454:	6120      	str	r0, [r4, #16]
 800b456:	b15b      	cbz	r3, 800b470 <__smakebuf_r+0x70>
 800b458:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b45c:	4630      	mov	r0, r6
 800b45e:	f000 fe1b 	bl	800c098 <_isatty_r>
 800b462:	b128      	cbz	r0, 800b470 <__smakebuf_r+0x70>
 800b464:	89a3      	ldrh	r3, [r4, #12]
 800b466:	f023 0303 	bic.w	r3, r3, #3
 800b46a:	f043 0301 	orr.w	r3, r3, #1
 800b46e:	81a3      	strh	r3, [r4, #12]
 800b470:	89a3      	ldrh	r3, [r4, #12]
 800b472:	431d      	orrs	r5, r3
 800b474:	81a5      	strh	r5, [r4, #12]
 800b476:	e7cf      	b.n	800b418 <__smakebuf_r+0x18>

0800b478 <wcvt>:
 800b478:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b47c:	b085      	sub	sp, #20
 800b47e:	2b00      	cmp	r3, #0
 800b480:	461d      	mov	r5, r3
 800b482:	4614      	mov	r4, r2
 800b484:	bfbc      	itt	lt
 800b486:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 800b48a:	4614      	movlt	r4, r2
 800b48c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800b48e:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 800b490:	f8dd a044 	ldr.w	sl, [sp, #68]	; 0x44
 800b494:	f8dd b04c 	ldr.w	fp, [sp, #76]	; 0x4c
 800b498:	bfb6      	itet	lt
 800b49a:	461d      	movlt	r5, r3
 800b49c:	2300      	movge	r3, #0
 800b49e:	232d      	movlt	r3, #45	; 0x2d
 800b4a0:	6013      	str	r3, [r2, #0]
 800b4a2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800b4a4:	f023 0820 	bic.w	r8, r3, #32
 800b4a8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800b4ac:	d005      	beq.n	800b4ba <wcvt+0x42>
 800b4ae:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800b4b2:	d100      	bne.n	800b4b6 <wcvt+0x3e>
 800b4b4:	3601      	adds	r6, #1
 800b4b6:	2102      	movs	r1, #2
 800b4b8:	e000      	b.n	800b4bc <wcvt+0x44>
 800b4ba:	2103      	movs	r1, #3
 800b4bc:	ab03      	add	r3, sp, #12
 800b4be:	9301      	str	r3, [sp, #4]
 800b4c0:	ab02      	add	r3, sp, #8
 800b4c2:	9300      	str	r3, [sp, #0]
 800b4c4:	ec45 4b10 	vmov	d0, r4, r5
 800b4c8:	4653      	mov	r3, sl
 800b4ca:	4632      	mov	r2, r6
 800b4cc:	f7fe fd04 	bl	8009ed8 <_dtoa_r>
 800b4d0:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800b4d4:	4607      	mov	r7, r0
 800b4d6:	d112      	bne.n	800b4fe <wcvt+0x86>
 800b4d8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b4da:	07db      	lsls	r3, r3, #31
 800b4dc:	d40f      	bmi.n	800b4fe <wcvt+0x86>
 800b4de:	9b03      	ldr	r3, [sp, #12]
 800b4e0:	1bdb      	subs	r3, r3, r7
 800b4e2:	f8cb 3000 	str.w	r3, [fp]
 800b4e6:	2300      	movs	r3, #0
 800b4e8:	f8db 2000 	ldr.w	r2, [fp]
 800b4ec:	429a      	cmp	r2, r3
 800b4ee:	dd02      	ble.n	800b4f6 <wcvt+0x7e>
 800b4f0:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800b4f2:	4293      	cmp	r3, r2
 800b4f4:	db2a      	blt.n	800b54c <wcvt+0xd4>
 800b4f6:	9814      	ldr	r0, [sp, #80]	; 0x50
 800b4f8:	b005      	add	sp, #20
 800b4fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b4fe:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800b502:	eb07 0906 	add.w	r9, r7, r6
 800b506:	d110      	bne.n	800b52a <wcvt+0xb2>
 800b508:	783b      	ldrb	r3, [r7, #0]
 800b50a:	2b30      	cmp	r3, #48	; 0x30
 800b50c:	d10a      	bne.n	800b524 <wcvt+0xac>
 800b50e:	2200      	movs	r2, #0
 800b510:	2300      	movs	r3, #0
 800b512:	4620      	mov	r0, r4
 800b514:	4629      	mov	r1, r5
 800b516:	f7f5 fad7 	bl	8000ac8 <__aeabi_dcmpeq>
 800b51a:	b918      	cbnz	r0, 800b524 <wcvt+0xac>
 800b51c:	f1c6 0601 	rsb	r6, r6, #1
 800b520:	f8ca 6000 	str.w	r6, [sl]
 800b524:	f8da 3000 	ldr.w	r3, [sl]
 800b528:	4499      	add	r9, r3
 800b52a:	2200      	movs	r2, #0
 800b52c:	2300      	movs	r3, #0
 800b52e:	4620      	mov	r0, r4
 800b530:	4629      	mov	r1, r5
 800b532:	f7f5 fac9 	bl	8000ac8 <__aeabi_dcmpeq>
 800b536:	b108      	cbz	r0, 800b53c <wcvt+0xc4>
 800b538:	f8cd 900c 	str.w	r9, [sp, #12]
 800b53c:	2230      	movs	r2, #48	; 0x30
 800b53e:	9b03      	ldr	r3, [sp, #12]
 800b540:	454b      	cmp	r3, r9
 800b542:	d2cc      	bcs.n	800b4de <wcvt+0x66>
 800b544:	1c59      	adds	r1, r3, #1
 800b546:	9103      	str	r1, [sp, #12]
 800b548:	701a      	strb	r2, [r3, #0]
 800b54a:	e7f8      	b.n	800b53e <wcvt+0xc6>
 800b54c:	9914      	ldr	r1, [sp, #80]	; 0x50
 800b54e:	5cfa      	ldrb	r2, [r7, r3]
 800b550:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800b554:	3301      	adds	r3, #1
 800b556:	e7c7      	b.n	800b4e8 <wcvt+0x70>

0800b558 <_svfwprintf_r>:
 800b558:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b55c:	ed2d 8b04 	vpush	{d8-d9}
 800b560:	b0d3      	sub	sp, #332	; 0x14c
 800b562:	461d      	mov	r5, r3
 800b564:	2300      	movs	r3, #0
 800b566:	4689      	mov	r9, r1
 800b568:	9319      	str	r3, [sp, #100]	; 0x64
 800b56a:	4683      	mov	fp, r0
 800b56c:	920b      	str	r2, [sp, #44]	; 0x2c
 800b56e:	f7fe fba5 	bl	8009cbc <_localeconv_r>
 800b572:	6803      	ldr	r3, [r0, #0]
 800b574:	781b      	ldrb	r3, [r3, #0]
 800b576:	9316      	str	r3, [sp, #88]	; 0x58
 800b578:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 800b57c:	061e      	lsls	r6, r3, #24
 800b57e:	d51a      	bpl.n	800b5b6 <_svfwprintf_r+0x5e>
 800b580:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800b584:	b9bb      	cbnz	r3, 800b5b6 <_svfwprintf_r+0x5e>
 800b586:	2140      	movs	r1, #64	; 0x40
 800b588:	4658      	mov	r0, fp
 800b58a:	f7ff fb0b 	bl	800aba4 <_malloc_r>
 800b58e:	f8c9 0000 	str.w	r0, [r9]
 800b592:	f8c9 0010 	str.w	r0, [r9, #16]
 800b596:	b958      	cbnz	r0, 800b5b0 <_svfwprintf_r+0x58>
 800b598:	230c      	movs	r3, #12
 800b59a:	f8cb 3000 	str.w	r3, [fp]
 800b59e:	f04f 33ff 	mov.w	r3, #4294967295
 800b5a2:	930d      	str	r3, [sp, #52]	; 0x34
 800b5a4:	980d      	ldr	r0, [sp, #52]	; 0x34
 800b5a6:	b053      	add	sp, #332	; 0x14c
 800b5a8:	ecbd 8b04 	vpop	{d8-d9}
 800b5ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b5b0:	2340      	movs	r3, #64	; 0x40
 800b5b2:	f8c9 3014 	str.w	r3, [r9, #20]
 800b5b6:	ed9f 7b8c 	vldr	d7, [pc, #560]	; 800b7e8 <_svfwprintf_r+0x290>
 800b5ba:	2300      	movs	r3, #0
 800b5bc:	930f      	str	r3, [sp, #60]	; 0x3c
 800b5be:	9311      	str	r3, [sp, #68]	; 0x44
 800b5c0:	930d      	str	r3, [sp, #52]	; 0x34
 800b5c2:	eeb0 8a47 	vmov.f32	s16, s14
 800b5c6:	eef0 8a67 	vmov.f32	s17, s15
 800b5ca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b5cc:	461c      	mov	r4, r3
 800b5ce:	f853 2b04 	ldr.w	r2, [r3], #4
 800b5d2:	b10a      	cbz	r2, 800b5d8 <_svfwprintf_r+0x80>
 800b5d4:	2a25      	cmp	r2, #37	; 0x25
 800b5d6:	d1f9      	bne.n	800b5cc <_svfwprintf_r+0x74>
 800b5d8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b5da:	42a3      	cmp	r3, r4
 800b5dc:	d00d      	beq.n	800b5fa <_svfwprintf_r+0xa2>
 800b5de:	1ae6      	subs	r6, r4, r3
 800b5e0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800b5e2:	4633      	mov	r3, r6
 800b5e4:	4649      	mov	r1, r9
 800b5e6:	4658      	mov	r0, fp
 800b5e8:	f000 fe14 	bl	800c214 <__ssputs_r>
 800b5ec:	3001      	adds	r0, #1
 800b5ee:	f000 80e7 	beq.w	800b7c0 <_svfwprintf_r+0x268>
 800b5f2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b5f4:	eb03 03a6 	add.w	r3, r3, r6, asr #2
 800b5f8:	930d      	str	r3, [sp, #52]	; 0x34
 800b5fa:	6823      	ldr	r3, [r4, #0]
 800b5fc:	2b00      	cmp	r3, #0
 800b5fe:	f000 80df 	beq.w	800b7c0 <_svfwprintf_r+0x268>
 800b602:	2300      	movs	r3, #0
 800b604:	1d21      	adds	r1, r4, #4
 800b606:	9315      	str	r3, [sp, #84]	; 0x54
 800b608:	461a      	mov	r2, r3
 800b60a:	f04f 34ff 	mov.w	r4, #4294967295
 800b60e:	930c      	str	r3, [sp, #48]	; 0x30
 800b610:	461f      	mov	r7, r3
 800b612:	200a      	movs	r0, #10
 800b614:	f851 6b04 	ldr.w	r6, [r1], #4
 800b618:	9609      	str	r6, [sp, #36]	; 0x24
 800b61a:	910b      	str	r1, [sp, #44]	; 0x2c
 800b61c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b61e:	2939      	cmp	r1, #57	; 0x39
 800b620:	d84c      	bhi.n	800b6bc <_svfwprintf_r+0x164>
 800b622:	291f      	cmp	r1, #31
 800b624:	d94f      	bls.n	800b6c6 <_svfwprintf_r+0x16e>
 800b626:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b628:	3920      	subs	r1, #32
 800b62a:	2919      	cmp	r1, #25
 800b62c:	d84a      	bhi.n	800b6c4 <_svfwprintf_r+0x16c>
 800b62e:	e8df f001 	tbb	[pc, r1]
 800b632:	496b      	.short	0x496b
 800b634:	49497049 	.word	0x49497049
 800b638:	49494949 	.word	0x49494949
 800b63c:	7a496c73 	.word	0x7a496c73
 800b640:	9a97497d 	.word	0x9a97497d
 800b644:	9a9a9a9a 	.word	0x9a9a9a9a
 800b648:	9a9a9a9a 	.word	0x9a9a9a9a
 800b64c:	2933      	cmp	r1, #51	; 0x33
 800b64e:	d839      	bhi.n	800b6c4 <_svfwprintf_r+0x16c>
 800b650:	e8df f011 	tbh	[pc, r1, lsl #1]
 800b654:	003800e2 	.word	0x003800e2
 800b658:	003800e2 	.word	0x003800e2
 800b65c:	00380038 	.word	0x00380038
 800b660:	009b0038 	.word	0x009b0038
 800b664:	00380038 	.word	0x00380038
 800b668:	00380038 	.word	0x00380038
 800b66c:	00380038 	.word	0x00380038
 800b670:	00380038 	.word	0x00380038
 800b674:	00380038 	.word	0x00380038
 800b678:	031c0038 	.word	0x031c0038
 800b67c:	00380038 	.word	0x00380038
 800b680:	00380038 	.word	0x00380038
 800b684:	00380038 	.word	0x00380038
 800b688:	00380038 	.word	0x00380038
 800b68c:	00380038 	.word	0x00380038
 800b690:	00d000a4 	.word	0x00d000a4
 800b694:	00e200e2 	.word	0x00e200e2
 800b698:	009e00e2 	.word	0x009e00e2
 800b69c:	003800d0 	.word	0x003800d0
 800b6a0:	00a10038 	.word	0x00a10038
 800b6a4:	02820038 	.word	0x02820038
 800b6a8:	02b10293 	.word	0x02b10293
 800b6ac:	003800a1 	.word	0x003800a1
 800b6b0:	003802c0 	.word	0x003802c0
 800b6b4:	00380310 	.word	0x00380310
 800b6b8:	00420038 	.word	0x00420038
 800b6bc:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b6be:	3945      	subs	r1, #69	; 0x45
 800b6c0:	2933      	cmp	r1, #51	; 0x33
 800b6c2:	d9c3      	bls.n	800b64c <_svfwprintf_r+0xf4>
 800b6c4:	b113      	cbz	r3, 800b6cc <_svfwprintf_r+0x174>
 800b6c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b6c8:	2b00      	cmp	r3, #0
 800b6ca:	d079      	beq.n	800b7c0 <_svfwprintf_r+0x268>
 800b6cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b6ce:	932a      	str	r3, [sp, #168]	; 0xa8
 800b6d0:	2300      	movs	r3, #0
 800b6d2:	9315      	str	r3, [sp, #84]	; 0x54
 800b6d4:	950a      	str	r5, [sp, #40]	; 0x28
 800b6d6:	e080      	b.n	800b7da <_svfwprintf_r+0x282>
 800b6d8:	b103      	cbz	r3, 800b6dc <_svfwprintf_r+0x184>
 800b6da:	9215      	str	r2, [sp, #84]	; 0x54
 800b6dc:	4b44      	ldr	r3, [pc, #272]	; (800b7f0 <_svfwprintf_r+0x298>)
 800b6de:	930f      	str	r3, [sp, #60]	; 0x3c
 800b6e0:	462a      	mov	r2, r5
 800b6e2:	06f8      	lsls	r0, r7, #27
 800b6e4:	f852 3b04 	ldr.w	r3, [r2], #4
 800b6e8:	920a      	str	r2, [sp, #40]	; 0x28
 800b6ea:	d402      	bmi.n	800b6f2 <_svfwprintf_r+0x19a>
 800b6ec:	0679      	lsls	r1, r7, #25
 800b6ee:	bf48      	it	mi
 800b6f0:	b29b      	uxthmi	r3, r3
 800b6f2:	07fa      	lsls	r2, r7, #31
 800b6f4:	d506      	bpl.n	800b704 <_svfwprintf_r+0x1ac>
 800b6f6:	b12b      	cbz	r3, 800b704 <_svfwprintf_r+0x1ac>
 800b6f8:	2230      	movs	r2, #48	; 0x30
 800b6fa:	921a      	str	r2, [sp, #104]	; 0x68
 800b6fc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b6fe:	921b      	str	r2, [sp, #108]	; 0x6c
 800b700:	f047 0702 	orr.w	r7, r7, #2
 800b704:	2202      	movs	r2, #2
 800b706:	e240      	b.n	800bb8a <_svfwprintf_r+0x632>
 800b708:	b90a      	cbnz	r2, 800b70e <_svfwprintf_r+0x1b6>
 800b70a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b70c:	2301      	movs	r3, #1
 800b70e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800b710:	e780      	b.n	800b614 <_svfwprintf_r+0xbc>
 800b712:	f047 0701 	orr.w	r7, r7, #1
 800b716:	e7fa      	b.n	800b70e <_svfwprintf_r+0x1b6>
 800b718:	f855 1b04 	ldr.w	r1, [r5], #4
 800b71c:	910c      	str	r1, [sp, #48]	; 0x30
 800b71e:	2900      	cmp	r1, #0
 800b720:	daf5      	bge.n	800b70e <_svfwprintf_r+0x1b6>
 800b722:	4249      	negs	r1, r1
 800b724:	910c      	str	r1, [sp, #48]	; 0x30
 800b726:	f047 0704 	orr.w	r7, r7, #4
 800b72a:	e7f0      	b.n	800b70e <_svfwprintf_r+0x1b6>
 800b72c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800b72e:	f851 4b04 	ldr.w	r4, [r1], #4
 800b732:	9409      	str	r4, [sp, #36]	; 0x24
 800b734:	2c2a      	cmp	r4, #42	; 0x2a
 800b736:	d111      	bne.n	800b75c <_svfwprintf_r+0x204>
 800b738:	f855 4b04 	ldr.w	r4, [r5], #4
 800b73c:	910b      	str	r1, [sp, #44]	; 0x2c
 800b73e:	ea44 74e4 	orr.w	r4, r4, r4, asr #31
 800b742:	e7e4      	b.n	800b70e <_svfwprintf_r+0x1b6>
 800b744:	fb00 6404 	mla	r4, r0, r4, r6
 800b748:	f851 6b04 	ldr.w	r6, [r1], #4
 800b74c:	9609      	str	r6, [sp, #36]	; 0x24
 800b74e:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800b750:	3e30      	subs	r6, #48	; 0x30
 800b752:	2e09      	cmp	r6, #9
 800b754:	d9f6      	bls.n	800b744 <_svfwprintf_r+0x1ec>
 800b756:	ea44 74e4 	orr.w	r4, r4, r4, asr #31
 800b75a:	e75e      	b.n	800b61a <_svfwprintf_r+0xc2>
 800b75c:	2400      	movs	r4, #0
 800b75e:	e7f6      	b.n	800b74e <_svfwprintf_r+0x1f6>
 800b760:	f047 0780 	orr.w	r7, r7, #128	; 0x80
 800b764:	e7d3      	b.n	800b70e <_svfwprintf_r+0x1b6>
 800b766:	2100      	movs	r1, #0
 800b768:	910c      	str	r1, [sp, #48]	; 0x30
 800b76a:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800b76c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b76e:	fb00 1106 	mla	r1, r0, r6, r1
 800b772:	3930      	subs	r1, #48	; 0x30
 800b774:	910c      	str	r1, [sp, #48]	; 0x30
 800b776:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800b778:	f851 6b04 	ldr.w	r6, [r1], #4
 800b77c:	910b      	str	r1, [sp, #44]	; 0x2c
 800b77e:	f1a6 0130 	sub.w	r1, r6, #48	; 0x30
 800b782:	2909      	cmp	r1, #9
 800b784:	9609      	str	r6, [sp, #36]	; 0x24
 800b786:	d9f0      	bls.n	800b76a <_svfwprintf_r+0x212>
 800b788:	e748      	b.n	800b61c <_svfwprintf_r+0xc4>
 800b78a:	f047 0708 	orr.w	r7, r7, #8
 800b78e:	e7be      	b.n	800b70e <_svfwprintf_r+0x1b6>
 800b790:	f047 0740 	orr.w	r7, r7, #64	; 0x40
 800b794:	e7bb      	b.n	800b70e <_svfwprintf_r+0x1b6>
 800b796:	f047 0710 	orr.w	r7, r7, #16
 800b79a:	e7b8      	b.n	800b70e <_svfwprintf_r+0x1b6>
 800b79c:	b103      	cbz	r3, 800b7a0 <_svfwprintf_r+0x248>
 800b79e:	9215      	str	r2, [sp, #84]	; 0x54
 800b7a0:	462b      	mov	r3, r5
 800b7a2:	06fd      	lsls	r5, r7, #27
 800b7a4:	f853 0b04 	ldr.w	r0, [r3], #4
 800b7a8:	930a      	str	r3, [sp, #40]	; 0x28
 800b7aa:	d412      	bmi.n	800b7d2 <_svfwprintf_r+0x27a>
 800b7ac:	f000 fce8 	bl	800c180 <btowc>
 800b7b0:	1c44      	adds	r4, r0, #1
 800b7b2:	d10e      	bne.n	800b7d2 <_svfwprintf_r+0x27a>
 800b7b4:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 800b7b8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b7bc:	f8a9 300c 	strh.w	r3, [r9, #12]
 800b7c0:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 800b7c4:	f013 0f40 	tst.w	r3, #64	; 0x40
 800b7c8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b7ca:	bf18      	it	ne
 800b7cc:	f04f 33ff 	movne.w	r3, #4294967295
 800b7d0:	e6e7      	b.n	800b5a2 <_svfwprintf_r+0x4a>
 800b7d2:	2300      	movs	r3, #0
 800b7d4:	902a      	str	r0, [sp, #168]	; 0xa8
 800b7d6:	932b      	str	r3, [sp, #172]	; 0xac
 800b7d8:	9315      	str	r3, [sp, #84]	; 0x54
 800b7da:	4698      	mov	r8, r3
 800b7dc:	2401      	movs	r4, #1
 800b7de:	461e      	mov	r6, r3
 800b7e0:	461d      	mov	r5, r3
 800b7e2:	f10d 0aa8 	add.w	sl, sp, #168	; 0xa8
 800b7e6:	e101      	b.n	800b9ec <_svfwprintf_r+0x494>
	...
 800b7f0:	08010220 	.word	0x08010220
 800b7f4:	b103      	cbz	r3, 800b7f8 <_svfwprintf_r+0x2a0>
 800b7f6:	9215      	str	r2, [sp, #84]	; 0x54
 800b7f8:	462a      	mov	r2, r5
 800b7fa:	06f9      	lsls	r1, r7, #27
 800b7fc:	f852 3b04 	ldr.w	r3, [r2], #4
 800b800:	920a      	str	r2, [sp, #40]	; 0x28
 800b802:	d402      	bmi.n	800b80a <_svfwprintf_r+0x2b2>
 800b804:	067a      	lsls	r2, r7, #25
 800b806:	bf48      	it	mi
 800b808:	b21b      	sxthmi	r3, r3
 800b80a:	2b00      	cmp	r3, #0
 800b80c:	da02      	bge.n	800b814 <_svfwprintf_r+0x2bc>
 800b80e:	222d      	movs	r2, #45	; 0x2d
 800b810:	425b      	negs	r3, r3
 800b812:	9215      	str	r2, [sp, #84]	; 0x54
 800b814:	2201      	movs	r2, #1
 800b816:	e1ba      	b.n	800bb8e <_svfwprintf_r+0x636>
 800b818:	b103      	cbz	r3, 800b81c <_svfwprintf_r+0x2c4>
 800b81a:	9215      	str	r2, [sp, #84]	; 0x54
 800b81c:	3507      	adds	r5, #7
 800b81e:	f025 0307 	bic.w	r3, r5, #7
 800b822:	ecb3 7b02 	vldmia	r3!, {d7}
 800b826:	930a      	str	r3, [sp, #40]	; 0x28
 800b828:	eeb0 8a47 	vmov.f32	s16, s14
 800b82c:	eef0 8a67 	vmov.f32	s17, s15
 800b830:	ee18 3a90 	vmov	r3, s17
 800b834:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800b838:	ee09 3a90 	vmov	s19, r3
 800b83c:	eeb0 9a47 	vmov.f32	s18, s14
 800b840:	4ba6      	ldr	r3, [pc, #664]	; (800badc <_svfwprintf_r+0x584>)
 800b842:	ec51 0b19 	vmov	r0, r1, d9
 800b846:	f04f 32ff 	mov.w	r2, #4294967295
 800b84a:	f7f5 f96f 	bl	8000b2c <__aeabi_dcmpun>
 800b84e:	b9f0      	cbnz	r0, 800b88e <_svfwprintf_r+0x336>
 800b850:	4ba2      	ldr	r3, [pc, #648]	; (800badc <_svfwprintf_r+0x584>)
 800b852:	ec51 0b19 	vmov	r0, r1, d9
 800b856:	f04f 32ff 	mov.w	r2, #4294967295
 800b85a:	f7f5 f949 	bl	8000af0 <__aeabi_dcmple>
 800b85e:	b9b0      	cbnz	r0, 800b88e <_svfwprintf_r+0x336>
 800b860:	ec51 0b18 	vmov	r0, r1, d8
 800b864:	2200      	movs	r2, #0
 800b866:	2300      	movs	r3, #0
 800b868:	f7f5 f938 	bl	8000adc <__aeabi_dcmplt>
 800b86c:	b108      	cbz	r0, 800b872 <_svfwprintf_r+0x31a>
 800b86e:	232d      	movs	r3, #45	; 0x2d
 800b870:	9315      	str	r3, [sp, #84]	; 0x54
 800b872:	4a9b      	ldr	r2, [pc, #620]	; (800bae0 <_svfwprintf_r+0x588>)
 800b874:	4b9b      	ldr	r3, [pc, #620]	; (800bae4 <_svfwprintf_r+0x58c>)
 800b876:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b878:	f027 0780 	bic.w	r7, r7, #128	; 0x80
 800b87c:	2947      	cmp	r1, #71	; 0x47
 800b87e:	bf94      	ite	ls
 800b880:	4692      	movls	sl, r2
 800b882:	469a      	movhi	sl, r3
 800b884:	f04f 0800 	mov.w	r8, #0
 800b888:	2403      	movs	r4, #3
 800b88a:	4646      	mov	r6, r8
 800b88c:	e3d4      	b.n	800c038 <_svfwprintf_r+0xae0>
 800b88e:	ec53 2b18 	vmov	r2, r3, d8
 800b892:	ec51 0b18 	vmov	r0, r1, d8
 800b896:	f7f5 f949 	bl	8000b2c <__aeabi_dcmpun>
 800b89a:	b140      	cbz	r0, 800b8ae <_svfwprintf_r+0x356>
 800b89c:	ee18 3a90 	vmov	r3, s17
 800b8a0:	2b00      	cmp	r3, #0
 800b8a2:	bfbc      	itt	lt
 800b8a4:	232d      	movlt	r3, #45	; 0x2d
 800b8a6:	9315      	strlt	r3, [sp, #84]	; 0x54
 800b8a8:	4a8f      	ldr	r2, [pc, #572]	; (800bae8 <_svfwprintf_r+0x590>)
 800b8aa:	4b90      	ldr	r3, [pc, #576]	; (800baec <_svfwprintf_r+0x594>)
 800b8ac:	e7e3      	b.n	800b876 <_svfwprintf_r+0x31e>
 800b8ae:	1c63      	adds	r3, r4, #1
 800b8b0:	f000 810e 	beq.w	800bad0 <_svfwprintf_r+0x578>
 800b8b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b8b6:	f023 0320 	bic.w	r3, r3, #32
 800b8ba:	2b47      	cmp	r3, #71	; 0x47
 800b8bc:	d102      	bne.n	800b8c4 <_svfwprintf_r+0x36c>
 800b8be:	2c00      	cmp	r4, #0
 800b8c0:	bf08      	it	eq
 800b8c2:	2401      	moveq	r4, #1
 800b8c4:	f447 7380 	orr.w	r3, r7, #256	; 0x100
 800b8c8:	930e      	str	r3, [sp, #56]	; 0x38
 800b8ca:	2328      	movs	r3, #40	; 0x28
 800b8cc:	9307      	str	r3, [sp, #28]
 800b8ce:	ab19      	add	r3, sp, #100	; 0x64
 800b8d0:	9305      	str	r3, [sp, #20]
 800b8d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b8d4:	9304      	str	r3, [sp, #16]
 800b8d6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b8d8:	f10d 08a8 	add.w	r8, sp, #168	; 0xa8
 800b8dc:	ae18      	add	r6, sp, #96	; 0x60
 800b8de:	ad17      	add	r5, sp, #92	; 0x5c
 800b8e0:	e9cd 4300 	strd	r4, r3, [sp]
 800b8e4:	f8cd 8018 	str.w	r8, [sp, #24]
 800b8e8:	ec53 2b18 	vmov	r2, r3, d8
 800b8ec:	9603      	str	r6, [sp, #12]
 800b8ee:	9502      	str	r5, [sp, #8]
 800b8f0:	4658      	mov	r0, fp
 800b8f2:	f7ff fdc1 	bl	800b478 <wcvt>
 800b8f6:	4540      	cmp	r0, r8
 800b8f8:	4682      	mov	sl, r0
 800b8fa:	f040 80eb 	bne.w	800bad4 <_svfwprintf_r+0x57c>
 800b8fe:	9919      	ldr	r1, [sp, #100]	; 0x64
 800b900:	2928      	cmp	r1, #40	; 0x28
 800b902:	f340 80e7 	ble.w	800bad4 <_svfwprintf_r+0x57c>
 800b906:	0089      	lsls	r1, r1, #2
 800b908:	4658      	mov	r0, fp
 800b90a:	f7ff f94b 	bl	800aba4 <_malloc_r>
 800b90e:	4680      	mov	r8, r0
 800b910:	2800      	cmp	r0, #0
 800b912:	f43f af4f 	beq.w	800b7b4 <_svfwprintf_r+0x25c>
 800b916:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800b918:	9502      	str	r5, [sp, #8]
 800b91a:	e9cd 0306 	strd	r0, r3, [sp, #24]
 800b91e:	ab19      	add	r3, sp, #100	; 0x64
 800b920:	9305      	str	r3, [sp, #20]
 800b922:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b924:	e9cd 6303 	strd	r6, r3, [sp, #12]
 800b928:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b92a:	4658      	mov	r0, fp
 800b92c:	e9cd 4300 	strd	r4, r3, [sp]
 800b930:	ec53 2b18 	vmov	r2, r3, d8
 800b934:	f7ff fda0 	bl	800b478 <wcvt>
 800b938:	4682      	mov	sl, r0
 800b93a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b93c:	9d18      	ldr	r5, [sp, #96]	; 0x60
 800b93e:	f023 0320 	bic.w	r3, r3, #32
 800b942:	2b47      	cmp	r3, #71	; 0x47
 800b944:	f040 80d6 	bne.w	800baf4 <_svfwprintf_r+0x59c>
 800b948:	1cee      	adds	r6, r5, #3
 800b94a:	db02      	blt.n	800b952 <_svfwprintf_r+0x3fa>
 800b94c:	42ac      	cmp	r4, r5
 800b94e:	f280 80e9 	bge.w	800bb24 <_svfwprintf_r+0x5cc>
 800b952:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b954:	3b02      	subs	r3, #2
 800b956:	9309      	str	r3, [sp, #36]	; 0x24
 800b958:	1e6b      	subs	r3, r5, #1
 800b95a:	2b00      	cmp	r3, #0
 800b95c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b95e:	9318      	str	r3, [sp, #96]	; 0x60
 800b960:	bfb8      	it	lt
 800b962:	f1c5 0301 	rsblt	r3, r5, #1
 800b966:	921c      	str	r2, [sp, #112]	; 0x70
 800b968:	bfb4      	ite	lt
 800b96a:	222d      	movlt	r2, #45	; 0x2d
 800b96c:	222b      	movge	r2, #43	; 0x2b
 800b96e:	2b09      	cmp	r3, #9
 800b970:	921d      	str	r2, [sp, #116]	; 0x74
 800b972:	f340 80d1 	ble.w	800bb18 <_svfwprintf_r+0x5c0>
 800b976:	a92a      	add	r1, sp, #168	; 0xa8
 800b978:	250a      	movs	r5, #10
 800b97a:	460a      	mov	r2, r1
 800b97c:	fb93 f4f5 	sdiv	r4, r3, r5
 800b980:	fb05 3014 	mls	r0, r5, r4, r3
 800b984:	3030      	adds	r0, #48	; 0x30
 800b986:	f842 0c04 	str.w	r0, [r2, #-4]
 800b98a:	4618      	mov	r0, r3
 800b98c:	2863      	cmp	r0, #99	; 0x63
 800b98e:	f1a1 0104 	sub.w	r1, r1, #4
 800b992:	4623      	mov	r3, r4
 800b994:	dcf1      	bgt.n	800b97a <_svfwprintf_r+0x422>
 800b996:	3330      	adds	r3, #48	; 0x30
 800b998:	f841 3c04 	str.w	r3, [r1, #-4]
 800b99c:	f1a2 0008 	sub.w	r0, r2, #8
 800b9a0:	ab1d      	add	r3, sp, #116	; 0x74
 800b9a2:	a92a      	add	r1, sp, #168	; 0xa8
 800b9a4:	4288      	cmp	r0, r1
 800b9a6:	f0c0 80b2 	bcc.w	800bb0e <_svfwprintf_r+0x5b6>
 800b9aa:	f10d 03b3 	add.w	r3, sp, #179	; 0xb3
 800b9ae:	1a9b      	subs	r3, r3, r2
 800b9b0:	f023 0303 	bic.w	r3, r3, #3
 800b9b4:	3a0b      	subs	r2, #11
 800b9b6:	428a      	cmp	r2, r1
 800b9b8:	bf88      	it	hi
 800b9ba:	2300      	movhi	r3, #0
 800b9bc:	aa1e      	add	r2, sp, #120	; 0x78
 800b9be:	18d4      	adds	r4, r2, r3
 800b9c0:	ab1c      	add	r3, sp, #112	; 0x70
 800b9c2:	1ae4      	subs	r4, r4, r3
 800b9c4:	10a3      	asrs	r3, r4, #2
 800b9c6:	9311      	str	r3, [sp, #68]	; 0x44
 800b9c8:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800b9ca:	2b01      	cmp	r3, #1
 800b9cc:	eb03 04a4 	add.w	r4, r3, r4, asr #2
 800b9d0:	dc02      	bgt.n	800b9d8 <_svfwprintf_r+0x480>
 800b9d2:	f017 0501 	ands.w	r5, r7, #1
 800b9d6:	d001      	beq.n	800b9dc <_svfwprintf_r+0x484>
 800b9d8:	3401      	adds	r4, #1
 800b9da:	2500      	movs	r5, #0
 800b9dc:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800b9de:	2e00      	cmp	r6, #0
 800b9e0:	f000 8180 	beq.w	800bce4 <_svfwprintf_r+0x78c>
 800b9e4:	232d      	movs	r3, #45	; 0x2d
 800b9e6:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 800b9e8:	9315      	str	r3, [sp, #84]	; 0x54
 800b9ea:	2600      	movs	r6, #0
 800b9ec:	42a6      	cmp	r6, r4
 800b9ee:	4633      	mov	r3, r6
 800b9f0:	bfb8      	it	lt
 800b9f2:	4623      	movlt	r3, r4
 800b9f4:	930e      	str	r3, [sp, #56]	; 0x38
 800b9f6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b9f8:	b113      	cbz	r3, 800ba00 <_svfwprintf_r+0x4a8>
 800b9fa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b9fc:	3301      	adds	r3, #1
 800b9fe:	930e      	str	r3, [sp, #56]	; 0x38
 800ba00:	f017 0302 	ands.w	r3, r7, #2
 800ba04:	9312      	str	r3, [sp, #72]	; 0x48
 800ba06:	bf1e      	ittt	ne
 800ba08:	9b0e      	ldrne	r3, [sp, #56]	; 0x38
 800ba0a:	3302      	addne	r3, #2
 800ba0c:	930e      	strne	r3, [sp, #56]	; 0x38
 800ba0e:	f017 0384 	ands.w	r3, r7, #132	; 0x84
 800ba12:	9313      	str	r3, [sp, #76]	; 0x4c
 800ba14:	f000 8168 	beq.w	800bce8 <_svfwprintf_r+0x790>
 800ba18:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ba1a:	b143      	cbz	r3, 800ba2e <_svfwprintf_r+0x4d6>
 800ba1c:	2304      	movs	r3, #4
 800ba1e:	aa15      	add	r2, sp, #84	; 0x54
 800ba20:	4649      	mov	r1, r9
 800ba22:	4658      	mov	r0, fp
 800ba24:	f000 fbf6 	bl	800c214 <__ssputs_r>
 800ba28:	3001      	adds	r0, #1
 800ba2a:	f000 8170 	beq.w	800bd0e <_svfwprintf_r+0x7b6>
 800ba2e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800ba30:	b143      	cbz	r3, 800ba44 <_svfwprintf_r+0x4ec>
 800ba32:	2308      	movs	r3, #8
 800ba34:	aa1a      	add	r2, sp, #104	; 0x68
 800ba36:	4649      	mov	r1, r9
 800ba38:	4658      	mov	r0, fp
 800ba3a:	f000 fbeb 	bl	800c214 <__ssputs_r>
 800ba3e:	3001      	adds	r0, #1
 800ba40:	f000 8165 	beq.w	800bd0e <_svfwprintf_r+0x7b6>
 800ba44:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800ba46:	2b80      	cmp	r3, #128	; 0x80
 800ba48:	d113      	bne.n	800ba72 <_svfwprintf_r+0x51a>
 800ba4a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ba4c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800ba4e:	1a9b      	subs	r3, r3, r2
 800ba50:	2b00      	cmp	r3, #0
 800ba52:	9310      	str	r3, [sp, #64]	; 0x40
 800ba54:	dd0d      	ble.n	800ba72 <_svfwprintf_r+0x51a>
 800ba56:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800ba58:	4a25      	ldr	r2, [pc, #148]	; (800baf0 <_svfwprintf_r+0x598>)
 800ba5a:	2b10      	cmp	r3, #16
 800ba5c:	f300 816c 	bgt.w	800bd38 <_svfwprintf_r+0x7e0>
 800ba60:	4a23      	ldr	r2, [pc, #140]	; (800baf0 <_svfwprintf_r+0x598>)
 800ba62:	009b      	lsls	r3, r3, #2
 800ba64:	4649      	mov	r1, r9
 800ba66:	4658      	mov	r0, fp
 800ba68:	f000 fbd4 	bl	800c214 <__ssputs_r>
 800ba6c:	3001      	adds	r0, #1
 800ba6e:	f000 814e 	beq.w	800bd0e <_svfwprintf_r+0x7b6>
 800ba72:	1b36      	subs	r6, r6, r4
 800ba74:	2e00      	cmp	r6, #0
 800ba76:	dd0c      	ble.n	800ba92 <_svfwprintf_r+0x53a>
 800ba78:	2e10      	cmp	r6, #16
 800ba7a:	4a1d      	ldr	r2, [pc, #116]	; (800baf0 <_svfwprintf_r+0x598>)
 800ba7c:	f300 8167 	bgt.w	800bd4e <_svfwprintf_r+0x7f6>
 800ba80:	4a1b      	ldr	r2, [pc, #108]	; (800baf0 <_svfwprintf_r+0x598>)
 800ba82:	00b3      	lsls	r3, r6, #2
 800ba84:	4649      	mov	r1, r9
 800ba86:	4658      	mov	r0, fp
 800ba88:	f000 fbc4 	bl	800c214 <__ssputs_r>
 800ba8c:	3001      	adds	r0, #1
 800ba8e:	f000 813e 	beq.w	800bd0e <_svfwprintf_r+0x7b6>
 800ba92:	05f9      	lsls	r1, r7, #23
 800ba94:	f100 8164 	bmi.w	800bd60 <_svfwprintf_r+0x808>
 800ba98:	00a3      	lsls	r3, r4, #2
 800ba9a:	4652      	mov	r2, sl
 800ba9c:	4649      	mov	r1, r9
 800ba9e:	4658      	mov	r0, fp
 800baa0:	f000 fbb8 	bl	800c214 <__ssputs_r>
 800baa4:	3001      	adds	r0, #1
 800baa6:	f000 8132 	beq.w	800bd0e <_svfwprintf_r+0x7b6>
 800baaa:	077a      	lsls	r2, r7, #29
 800baac:	f100 8282 	bmi.w	800bfb4 <_svfwprintf_r+0xa5c>
 800bab0:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800bab4:	990e      	ldr	r1, [sp, #56]	; 0x38
 800bab6:	428a      	cmp	r2, r1
 800bab8:	bfac      	ite	ge
 800baba:	189b      	addge	r3, r3, r2
 800babc:	185b      	addlt	r3, r3, r1
 800babe:	930d      	str	r3, [sp, #52]	; 0x34
 800bac0:	f1b8 0f00 	cmp.w	r8, #0
 800bac4:	d057      	beq.n	800bb76 <_svfwprintf_r+0x61e>
 800bac6:	4641      	mov	r1, r8
 800bac8:	4658      	mov	r0, fp
 800baca:	f7fe fff7 	bl	800aabc <_free_r>
 800bace:	e052      	b.n	800bb76 <_svfwprintf_r+0x61e>
 800bad0:	2406      	movs	r4, #6
 800bad2:	e6f7      	b.n	800b8c4 <_svfwprintf_r+0x36c>
 800bad4:	f04f 0800 	mov.w	r8, #0
 800bad8:	e72f      	b.n	800b93a <_svfwprintf_r+0x3e2>
 800bada:	bf00      	nop
 800badc:	7fefffff 	.word	0x7fefffff
 800bae0:	0801019c 	.word	0x0801019c
 800bae4:	080101ac 	.word	0x080101ac
 800bae8:	080101bc 	.word	0x080101bc
 800baec:	080101cc 	.word	0x080101cc
 800baf0:	080102ac 	.word	0x080102ac
 800baf4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800baf6:	2b66      	cmp	r3, #102	; 0x66
 800baf8:	f47f af2e 	bne.w	800b958 <_svfwprintf_r+0x400>
 800bafc:	f007 0301 	and.w	r3, r7, #1
 800bb00:	2d00      	cmp	r5, #0
 800bb02:	ea43 0304 	orr.w	r3, r3, r4
 800bb06:	dc17      	bgt.n	800bb38 <_svfwprintf_r+0x5e0>
 800bb08:	b313      	cbz	r3, 800bb50 <_svfwprintf_r+0x5f8>
 800bb0a:	3402      	adds	r4, #2
 800bb0c:	e766      	b.n	800b9dc <_svfwprintf_r+0x484>
 800bb0e:	f850 4b04 	ldr.w	r4, [r0], #4
 800bb12:	f843 4f04 	str.w	r4, [r3, #4]!
 800bb16:	e745      	b.n	800b9a4 <_svfwprintf_r+0x44c>
 800bb18:	2230      	movs	r2, #48	; 0x30
 800bb1a:	4413      	add	r3, r2
 800bb1c:	921e      	str	r2, [sp, #120]	; 0x78
 800bb1e:	931f      	str	r3, [sp, #124]	; 0x7c
 800bb20:	ac20      	add	r4, sp, #128	; 0x80
 800bb22:	e74d      	b.n	800b9c0 <_svfwprintf_r+0x468>
 800bb24:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800bb26:	42ab      	cmp	r3, r5
 800bb28:	dd0a      	ble.n	800bb40 <_svfwprintf_r+0x5e8>
 800bb2a:	2d00      	cmp	r5, #0
 800bb2c:	bfd4      	ite	le
 800bb2e:	f1c5 0402 	rsble	r4, r5, #2
 800bb32:	2401      	movgt	r4, #1
 800bb34:	441c      	add	r4, r3
 800bb36:	e006      	b.n	800bb46 <_svfwprintf_r+0x5ee>
 800bb38:	b143      	cbz	r3, 800bb4c <_svfwprintf_r+0x5f4>
 800bb3a:	3401      	adds	r4, #1
 800bb3c:	442c      	add	r4, r5
 800bb3e:	e74d      	b.n	800b9dc <_svfwprintf_r+0x484>
 800bb40:	07fc      	lsls	r4, r7, #31
 800bb42:	d507      	bpl.n	800bb54 <_svfwprintf_r+0x5fc>
 800bb44:	1c6c      	adds	r4, r5, #1
 800bb46:	2367      	movs	r3, #103	; 0x67
 800bb48:	9309      	str	r3, [sp, #36]	; 0x24
 800bb4a:	e747      	b.n	800b9dc <_svfwprintf_r+0x484>
 800bb4c:	462c      	mov	r4, r5
 800bb4e:	e745      	b.n	800b9dc <_svfwprintf_r+0x484>
 800bb50:	2401      	movs	r4, #1
 800bb52:	e743      	b.n	800b9dc <_svfwprintf_r+0x484>
 800bb54:	462c      	mov	r4, r5
 800bb56:	e7f6      	b.n	800bb46 <_svfwprintf_r+0x5ee>
 800bb58:	b103      	cbz	r3, 800bb5c <_svfwprintf_r+0x604>
 800bb5a:	9215      	str	r2, [sp, #84]	; 0x54
 800bb5c:	1d2b      	adds	r3, r5, #4
 800bb5e:	06f8      	lsls	r0, r7, #27
 800bb60:	930a      	str	r3, [sp, #40]	; 0x28
 800bb62:	d503      	bpl.n	800bb6c <_svfwprintf_r+0x614>
 800bb64:	682b      	ldr	r3, [r5, #0]
 800bb66:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800bb68:	601a      	str	r2, [r3, #0]
 800bb6a:	e004      	b.n	800bb76 <_svfwprintf_r+0x61e>
 800bb6c:	0679      	lsls	r1, r7, #25
 800bb6e:	d5f9      	bpl.n	800bb64 <_svfwprintf_r+0x60c>
 800bb70:	682b      	ldr	r3, [r5, #0]
 800bb72:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800bb74:	801a      	strh	r2, [r3, #0]
 800bb76:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800bb78:	e527      	b.n	800b5ca <_svfwprintf_r+0x72>
 800bb7a:	462a      	mov	r2, r5
 800bb7c:	f017 0110 	ands.w	r1, r7, #16
 800bb80:	f852 3b04 	ldr.w	r3, [r2], #4
 800bb84:	920a      	str	r2, [sp, #40]	; 0x28
 800bb86:	d011      	beq.n	800bbac <_svfwprintf_r+0x654>
 800bb88:	2200      	movs	r2, #0
 800bb8a:	2100      	movs	r1, #0
 800bb8c:	9115      	str	r1, [sp, #84]	; 0x54
 800bb8e:	1c66      	adds	r6, r4, #1
 800bb90:	f000 822d 	beq.w	800bfee <_svfwprintf_r+0xa96>
 800bb94:	f027 0180 	bic.w	r1, r7, #128	; 0x80
 800bb98:	2b00      	cmp	r3, #0
 800bb9a:	f040 822c 	bne.w	800bff6 <_svfwprintf_r+0xa9e>
 800bb9e:	2c00      	cmp	r4, #0
 800bba0:	f000 8098 	beq.w	800bcd4 <_svfwprintf_r+0x77c>
 800bba4:	2a01      	cmp	r2, #1
 800bba6:	f040 8229 	bne.w	800bffc <_svfwprintf_r+0xaa4>
 800bbaa:	e075      	b.n	800bc98 <_svfwprintf_r+0x740>
 800bbac:	f017 0240 	ands.w	r2, r7, #64	; 0x40
 800bbb0:	d0eb      	beq.n	800bb8a <_svfwprintf_r+0x632>
 800bbb2:	b29b      	uxth	r3, r3
 800bbb4:	e7e8      	b.n	800bb88 <_svfwprintf_r+0x630>
 800bbb6:	462a      	mov	r2, r5
 800bbb8:	2178      	movs	r1, #120	; 0x78
 800bbba:	f852 3b04 	ldr.w	r3, [r2], #4
 800bbbe:	920a      	str	r2, [sp, #40]	; 0x28
 800bbc0:	2230      	movs	r2, #48	; 0x30
 800bbc2:	e9cd 211a 	strd	r2, r1, [sp, #104]	; 0x68
 800bbc6:	4a9e      	ldr	r2, [pc, #632]	; (800be40 <_svfwprintf_r+0x8e8>)
 800bbc8:	920f      	str	r2, [sp, #60]	; 0x3c
 800bbca:	f047 0702 	orr.w	r7, r7, #2
 800bbce:	2202      	movs	r2, #2
 800bbd0:	9109      	str	r1, [sp, #36]	; 0x24
 800bbd2:	e7da      	b.n	800bb8a <_svfwprintf_r+0x632>
 800bbd4:	462b      	mov	r3, r5
 800bbd6:	2600      	movs	r6, #0
 800bbd8:	f853 ab04 	ldr.w	sl, [r3], #4
 800bbdc:	930a      	str	r3, [sp, #40]	; 0x28
 800bbde:	f017 0510 	ands.w	r5, r7, #16
 800bbe2:	9615      	str	r6, [sp, #84]	; 0x54
 800bbe4:	d12d      	bne.n	800bc42 <_svfwprintf_r+0x6ea>
 800bbe6:	1c62      	adds	r2, r4, #1
 800bbe8:	d014      	beq.n	800bc14 <_svfwprintf_r+0x6bc>
 800bbea:	4622      	mov	r2, r4
 800bbec:	4629      	mov	r1, r5
 800bbee:	4650      	mov	r0, sl
 800bbf0:	4626      	mov	r6, r4
 800bbf2:	f7f4 faed 	bl	80001d0 <memchr>
 800bbf6:	b108      	cbz	r0, 800bbfc <_svfwprintf_r+0x6a4>
 800bbf8:	eba0 060a 	sub.w	r6, r0, sl
 800bbfc:	2e27      	cmp	r6, #39	; 0x27
 800bbfe:	d90e      	bls.n	800bc1e <_svfwprintf_r+0x6c6>
 800bc00:	1c71      	adds	r1, r6, #1
 800bc02:	0089      	lsls	r1, r1, #2
 800bc04:	4658      	mov	r0, fp
 800bc06:	f7fe ffcd 	bl	800aba4 <_malloc_r>
 800bc0a:	2800      	cmp	r0, #0
 800bc0c:	f43f add2 	beq.w	800b7b4 <_svfwprintf_r+0x25c>
 800bc10:	4680      	mov	r8, r0
 800bc12:	e007      	b.n	800bc24 <_svfwprintf_r+0x6cc>
 800bc14:	4650      	mov	r0, sl
 800bc16:	f7f4 fb2b 	bl	8000270 <strlen>
 800bc1a:	4606      	mov	r6, r0
 800bc1c:	e7ee      	b.n	800bbfc <_svfwprintf_r+0x6a4>
 800bc1e:	f04f 0800 	mov.w	r8, #0
 800bc22:	a82a      	add	r0, sp, #168	; 0xa8
 800bc24:	4634      	mov	r4, r6
 800bc26:	2300      	movs	r3, #0
 800bc28:	42b3      	cmp	r3, r6
 800bc2a:	d104      	bne.n	800bc36 <_svfwprintf_r+0x6de>
 800bc2c:	2600      	movs	r6, #0
 800bc2e:	f840 6023 	str.w	r6, [r0, r3, lsl #2]
 800bc32:	4682      	mov	sl, r0
 800bc34:	e6da      	b.n	800b9ec <_svfwprintf_r+0x494>
 800bc36:	f81a 2003 	ldrb.w	r2, [sl, r3]
 800bc3a:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
 800bc3e:	3301      	adds	r3, #1
 800bc40:	e7f2      	b.n	800bc28 <_svfwprintf_r+0x6d0>
 800bc42:	1c63      	adds	r3, r4, #1
 800bc44:	d011      	beq.n	800bc6a <_svfwprintf_r+0x712>
 800bc46:	4622      	mov	r2, r4
 800bc48:	4631      	mov	r1, r6
 800bc4a:	4650      	mov	r0, sl
 800bc4c:	f000 fa03 	bl	800c056 <wmemchr>
 800bc50:	4680      	mov	r8, r0
 800bc52:	2800      	cmp	r0, #0
 800bc54:	f43f ae19 	beq.w	800b88a <_svfwprintf_r+0x332>
 800bc58:	eba0 080a 	sub.w	r8, r0, sl
 800bc5c:	ea4f 08a8 	mov.w	r8, r8, asr #2
 800bc60:	4544      	cmp	r4, r8
 800bc62:	bfa8      	it	ge
 800bc64:	4644      	movge	r4, r8
 800bc66:	46b0      	mov	r8, r6
 800bc68:	e60f      	b.n	800b88a <_svfwprintf_r+0x332>
 800bc6a:	4650      	mov	r0, sl
 800bc6c:	f000 f9ea 	bl	800c044 <wcslen>
 800bc70:	4604      	mov	r4, r0
 800bc72:	e7f8      	b.n	800bc66 <_svfwprintf_r+0x70e>
 800bc74:	462a      	mov	r2, r5
 800bc76:	06fe      	lsls	r6, r7, #27
 800bc78:	f852 3b04 	ldr.w	r3, [r2], #4
 800bc7c:	920a      	str	r2, [sp, #40]	; 0x28
 800bc7e:	d501      	bpl.n	800bc84 <_svfwprintf_r+0x72c>
 800bc80:	2201      	movs	r2, #1
 800bc82:	e782      	b.n	800bb8a <_svfwprintf_r+0x632>
 800bc84:	067d      	lsls	r5, r7, #25
 800bc86:	bf48      	it	mi
 800bc88:	b29b      	uxthmi	r3, r3
 800bc8a:	e7f9      	b.n	800bc80 <_svfwprintf_r+0x728>
 800bc8c:	b103      	cbz	r3, 800bc90 <_svfwprintf_r+0x738>
 800bc8e:	9215      	str	r2, [sp, #84]	; 0x54
 800bc90:	4b6c      	ldr	r3, [pc, #432]	; (800be44 <_svfwprintf_r+0x8ec>)
 800bc92:	e524      	b.n	800b6de <_svfwprintf_r+0x186>
 800bc94:	2b09      	cmp	r3, #9
 800bc96:	d804      	bhi.n	800bca2 <_svfwprintf_r+0x74a>
 800bc98:	3330      	adds	r3, #48	; 0x30
 800bc9a:	9351      	str	r3, [sp, #324]	; 0x144
 800bc9c:	f50d 7aa2 	add.w	sl, sp, #324	; 0x144
 800bca0:	e1c2      	b.n	800c028 <_svfwprintf_r+0xad0>
 800bca2:	f50d 7aa4 	add.w	sl, sp, #328	; 0x148
 800bca6:	250a      	movs	r5, #10
 800bca8:	fbb3 f0f5 	udiv	r0, r3, r5
 800bcac:	fb05 3210 	mls	r2, r5, r0, r3
 800bcb0:	3230      	adds	r2, #48	; 0x30
 800bcb2:	f84a 2d04 	str.w	r2, [sl, #-4]!
 800bcb6:	461a      	mov	r2, r3
 800bcb8:	2a09      	cmp	r2, #9
 800bcba:	4603      	mov	r3, r0
 800bcbc:	d8f4      	bhi.n	800bca8 <_svfwprintf_r+0x750>
 800bcbe:	e1b3      	b.n	800c028 <_svfwprintf_r+0xad0>
 800bcc0:	f003 020f 	and.w	r2, r3, #15
 800bcc4:	980f      	ldr	r0, [sp, #60]	; 0x3c
 800bcc6:	091b      	lsrs	r3, r3, #4
 800bcc8:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
 800bccc:	f84a 2d04 	str.w	r2, [sl, #-4]!
 800bcd0:	d1f6      	bne.n	800bcc0 <_svfwprintf_r+0x768>
 800bcd2:	e1a9      	b.n	800c028 <_svfwprintf_r+0xad0>
 800bcd4:	b91a      	cbnz	r2, 800bcde <_svfwprintf_r+0x786>
 800bcd6:	07f8      	lsls	r0, r7, #31
 800bcd8:	d501      	bpl.n	800bcde <_svfwprintf_r+0x786>
 800bcda:	2330      	movs	r3, #48	; 0x30
 800bcdc:	e7dd      	b.n	800bc9a <_svfwprintf_r+0x742>
 800bcde:	f50d 7aa4 	add.w	sl, sp, #328	; 0x148
 800bce2:	e1a1      	b.n	800c028 <_svfwprintf_r+0xad0>
 800bce4:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 800bce6:	e681      	b.n	800b9ec <_svfwprintf_r+0x494>
 800bce8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800bcea:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800bcec:	1a9b      	subs	r3, r3, r2
 800bcee:	2b00      	cmp	r3, #0
 800bcf0:	9310      	str	r3, [sp, #64]	; 0x40
 800bcf2:	f77f ae91 	ble.w	800ba18 <_svfwprintf_r+0x4c0>
 800bcf6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800bcf8:	2b10      	cmp	r3, #16
 800bcfa:	dc11      	bgt.n	800bd20 <_svfwprintf_r+0x7c8>
 800bcfc:	4a52      	ldr	r2, [pc, #328]	; (800be48 <_svfwprintf_r+0x8f0>)
 800bcfe:	009b      	lsls	r3, r3, #2
 800bd00:	4649      	mov	r1, r9
 800bd02:	4658      	mov	r0, fp
 800bd04:	f000 fa86 	bl	800c214 <__ssputs_r>
 800bd08:	3001      	adds	r0, #1
 800bd0a:	f47f ae85 	bne.w	800ba18 <_svfwprintf_r+0x4c0>
 800bd0e:	f1b8 0f00 	cmp.w	r8, #0
 800bd12:	f43f ad55 	beq.w	800b7c0 <_svfwprintf_r+0x268>
 800bd16:	4641      	mov	r1, r8
 800bd18:	4658      	mov	r0, fp
 800bd1a:	f7fe fecf 	bl	800aabc <_free_r>
 800bd1e:	e54f      	b.n	800b7c0 <_svfwprintf_r+0x268>
 800bd20:	4a49      	ldr	r2, [pc, #292]	; (800be48 <_svfwprintf_r+0x8f0>)
 800bd22:	2340      	movs	r3, #64	; 0x40
 800bd24:	4649      	mov	r1, r9
 800bd26:	4658      	mov	r0, fp
 800bd28:	f000 fa74 	bl	800c214 <__ssputs_r>
 800bd2c:	3001      	adds	r0, #1
 800bd2e:	d0ee      	beq.n	800bd0e <_svfwprintf_r+0x7b6>
 800bd30:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800bd32:	3b10      	subs	r3, #16
 800bd34:	9310      	str	r3, [sp, #64]	; 0x40
 800bd36:	e7de      	b.n	800bcf6 <_svfwprintf_r+0x79e>
 800bd38:	2340      	movs	r3, #64	; 0x40
 800bd3a:	4649      	mov	r1, r9
 800bd3c:	4658      	mov	r0, fp
 800bd3e:	f000 fa69 	bl	800c214 <__ssputs_r>
 800bd42:	3001      	adds	r0, #1
 800bd44:	d0e3      	beq.n	800bd0e <_svfwprintf_r+0x7b6>
 800bd46:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800bd48:	3b10      	subs	r3, #16
 800bd4a:	9310      	str	r3, [sp, #64]	; 0x40
 800bd4c:	e683      	b.n	800ba56 <_svfwprintf_r+0x4fe>
 800bd4e:	2340      	movs	r3, #64	; 0x40
 800bd50:	4649      	mov	r1, r9
 800bd52:	4658      	mov	r0, fp
 800bd54:	f000 fa5e 	bl	800c214 <__ssputs_r>
 800bd58:	3001      	adds	r0, #1
 800bd5a:	d0d8      	beq.n	800bd0e <_svfwprintf_r+0x7b6>
 800bd5c:	3e10      	subs	r6, #16
 800bd5e:	e68b      	b.n	800ba78 <_svfwprintf_r+0x520>
 800bd60:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bd62:	2b65      	cmp	r3, #101	; 0x65
 800bd64:	f240 80e4 	bls.w	800bf30 <_svfwprintf_r+0x9d8>
 800bd68:	ec51 0b18 	vmov	r0, r1, d8
 800bd6c:	2200      	movs	r2, #0
 800bd6e:	2300      	movs	r3, #0
 800bd70:	f7f4 feaa 	bl	8000ac8 <__aeabi_dcmpeq>
 800bd74:	b358      	cbz	r0, 800bdce <_svfwprintf_r+0x876>
 800bd76:	4a35      	ldr	r2, [pc, #212]	; (800be4c <_svfwprintf_r+0x8f4>)
 800bd78:	2304      	movs	r3, #4
 800bd7a:	4649      	mov	r1, r9
 800bd7c:	4658      	mov	r0, fp
 800bd7e:	f000 fa49 	bl	800c214 <__ssputs_r>
 800bd82:	3001      	adds	r0, #1
 800bd84:	d0c3      	beq.n	800bd0e <_svfwprintf_r+0x7b6>
 800bd86:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
 800bd8a:	429a      	cmp	r2, r3
 800bd8c:	db02      	blt.n	800bd94 <_svfwprintf_r+0x83c>
 800bd8e:	07fb      	lsls	r3, r7, #31
 800bd90:	f57f ae8b 	bpl.w	800baaa <_svfwprintf_r+0x552>
 800bd94:	2304      	movs	r3, #4
 800bd96:	aa16      	add	r2, sp, #88	; 0x58
 800bd98:	4649      	mov	r1, r9
 800bd9a:	4658      	mov	r0, fp
 800bd9c:	f000 fa3a 	bl	800c214 <__ssputs_r>
 800bda0:	3001      	adds	r0, #1
 800bda2:	d0b4      	beq.n	800bd0e <_svfwprintf_r+0x7b6>
 800bda4:	9c19      	ldr	r4, [sp, #100]	; 0x64
 800bda6:	3c01      	subs	r4, #1
 800bda8:	2c00      	cmp	r4, #0
 800bdaa:	f77f ae7e 	ble.w	800baaa <_svfwprintf_r+0x552>
 800bdae:	4d28      	ldr	r5, [pc, #160]	; (800be50 <_svfwprintf_r+0x8f8>)
 800bdb0:	2c10      	cmp	r4, #16
 800bdb2:	dc02      	bgt.n	800bdba <_svfwprintf_r+0x862>
 800bdb4:	00a3      	lsls	r3, r4, #2
 800bdb6:	4a26      	ldr	r2, [pc, #152]	; (800be50 <_svfwprintf_r+0x8f8>)
 800bdb8:	e670      	b.n	800ba9c <_svfwprintf_r+0x544>
 800bdba:	2340      	movs	r3, #64	; 0x40
 800bdbc:	462a      	mov	r2, r5
 800bdbe:	4649      	mov	r1, r9
 800bdc0:	4658      	mov	r0, fp
 800bdc2:	f000 fa27 	bl	800c214 <__ssputs_r>
 800bdc6:	3001      	adds	r0, #1
 800bdc8:	d0a1      	beq.n	800bd0e <_svfwprintf_r+0x7b6>
 800bdca:	3c10      	subs	r4, #16
 800bdcc:	e7f0      	b.n	800bdb0 <_svfwprintf_r+0x858>
 800bdce:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800bdd0:	2b00      	cmp	r3, #0
 800bdd2:	dc3f      	bgt.n	800be54 <_svfwprintf_r+0x8fc>
 800bdd4:	4a1d      	ldr	r2, [pc, #116]	; (800be4c <_svfwprintf_r+0x8f4>)
 800bdd6:	2304      	movs	r3, #4
 800bdd8:	4649      	mov	r1, r9
 800bdda:	4658      	mov	r0, fp
 800bddc:	f000 fa1a 	bl	800c214 <__ssputs_r>
 800bde0:	3001      	adds	r0, #1
 800bde2:	d094      	beq.n	800bd0e <_svfwprintf_r+0x7b6>
 800bde4:	e9dd 3218 	ldrd	r3, r2, [sp, #96]	; 0x60
 800bde8:	4313      	orrs	r3, r2
 800bdea:	f007 0201 	and.w	r2, r7, #1
 800bdee:	4313      	orrs	r3, r2
 800bdf0:	f43f ae5b 	beq.w	800baaa <_svfwprintf_r+0x552>
 800bdf4:	2304      	movs	r3, #4
 800bdf6:	aa16      	add	r2, sp, #88	; 0x58
 800bdf8:	4649      	mov	r1, r9
 800bdfa:	4658      	mov	r0, fp
 800bdfc:	f000 fa0a 	bl	800c214 <__ssputs_r>
 800be00:	3001      	adds	r0, #1
 800be02:	d084      	beq.n	800bd0e <_svfwprintf_r+0x7b6>
 800be04:	9c18      	ldr	r4, [sp, #96]	; 0x60
 800be06:	2c00      	cmp	r4, #0
 800be08:	da0c      	bge.n	800be24 <_svfwprintf_r+0x8cc>
 800be0a:	4d11      	ldr	r5, [pc, #68]	; (800be50 <_svfwprintf_r+0x8f8>)
 800be0c:	4264      	negs	r4, r4
 800be0e:	2c10      	cmp	r4, #16
 800be10:	dc0b      	bgt.n	800be2a <_svfwprintf_r+0x8d2>
 800be12:	4a0f      	ldr	r2, [pc, #60]	; (800be50 <_svfwprintf_r+0x8f8>)
 800be14:	00a3      	lsls	r3, r4, #2
 800be16:	4649      	mov	r1, r9
 800be18:	4658      	mov	r0, fp
 800be1a:	f000 f9fb 	bl	800c214 <__ssputs_r>
 800be1e:	3001      	adds	r0, #1
 800be20:	f43f af75 	beq.w	800bd0e <_svfwprintf_r+0x7b6>
 800be24:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800be26:	009b      	lsls	r3, r3, #2
 800be28:	e637      	b.n	800ba9a <_svfwprintf_r+0x542>
 800be2a:	2340      	movs	r3, #64	; 0x40
 800be2c:	462a      	mov	r2, r5
 800be2e:	4649      	mov	r1, r9
 800be30:	4658      	mov	r0, fp
 800be32:	f000 f9ef 	bl	800c214 <__ssputs_r>
 800be36:	3001      	adds	r0, #1
 800be38:	f43f af69 	beq.w	800bd0e <_svfwprintf_r+0x7b6>
 800be3c:	3c10      	subs	r4, #16
 800be3e:	e7e6      	b.n	800be0e <_svfwprintf_r+0x8b6>
 800be40:	08010220 	.word	0x08010220
 800be44:	080101dc 	.word	0x080101dc
 800be48:	0801026c 	.word	0x0801026c
 800be4c:	08010264 	.word	0x08010264
 800be50:	080102ac 	.word	0x080102ac
 800be54:	9c19      	ldr	r4, [sp, #100]	; 0x64
 800be56:	f344 041d 	sbfx	r4, r4, #0, #30
 800be5a:	42ac      	cmp	r4, r5
 800be5c:	bfa8      	it	ge
 800be5e:	462c      	movge	r4, r5
 800be60:	2c00      	cmp	r4, #0
 800be62:	dc20      	bgt.n	800bea6 <_svfwprintf_r+0x94e>
 800be64:	2c00      	cmp	r4, #0
 800be66:	bfac      	ite	ge
 800be68:	1b2e      	subge	r6, r5, r4
 800be6a:	462e      	movlt	r6, r5
 800be6c:	2e00      	cmp	r6, #0
 800be6e:	dd0b      	ble.n	800be88 <_svfwprintf_r+0x930>
 800be70:	4c72      	ldr	r4, [pc, #456]	; (800c03c <_svfwprintf_r+0xae4>)
 800be72:	2e10      	cmp	r6, #16
 800be74:	dc20      	bgt.n	800beb8 <_svfwprintf_r+0x960>
 800be76:	4a71      	ldr	r2, [pc, #452]	; (800c03c <_svfwprintf_r+0xae4>)
 800be78:	00b3      	lsls	r3, r6, #2
 800be7a:	4649      	mov	r1, r9
 800be7c:	4658      	mov	r0, fp
 800be7e:	f000 f9c9 	bl	800c214 <__ssputs_r>
 800be82:	3001      	adds	r0, #1
 800be84:	f43f af43 	beq.w	800bd0e <_svfwprintf_r+0x7b6>
 800be88:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
 800be8c:	429a      	cmp	r2, r3
 800be8e:	ea4f 0585 	mov.w	r5, r5, lsl #2
 800be92:	da1c      	bge.n	800bece <_svfwprintf_r+0x976>
 800be94:	2304      	movs	r3, #4
 800be96:	aa16      	add	r2, sp, #88	; 0x58
 800be98:	4649      	mov	r1, r9
 800be9a:	4658      	mov	r0, fp
 800be9c:	f000 f9ba 	bl	800c214 <__ssputs_r>
 800bea0:	3001      	adds	r0, #1
 800bea2:	d116      	bne.n	800bed2 <_svfwprintf_r+0x97a>
 800bea4:	e733      	b.n	800bd0e <_svfwprintf_r+0x7b6>
 800bea6:	00a3      	lsls	r3, r4, #2
 800bea8:	4652      	mov	r2, sl
 800beaa:	4649      	mov	r1, r9
 800beac:	4658      	mov	r0, fp
 800beae:	f000 f9b1 	bl	800c214 <__ssputs_r>
 800beb2:	3001      	adds	r0, #1
 800beb4:	d1d6      	bne.n	800be64 <_svfwprintf_r+0x90c>
 800beb6:	e72a      	b.n	800bd0e <_svfwprintf_r+0x7b6>
 800beb8:	2340      	movs	r3, #64	; 0x40
 800beba:	4622      	mov	r2, r4
 800bebc:	4649      	mov	r1, r9
 800bebe:	4658      	mov	r0, fp
 800bec0:	f000 f9a8 	bl	800c214 <__ssputs_r>
 800bec4:	3001      	adds	r0, #1
 800bec6:	f43f af22 	beq.w	800bd0e <_svfwprintf_r+0x7b6>
 800beca:	3e10      	subs	r6, #16
 800becc:	e7d1      	b.n	800be72 <_svfwprintf_r+0x91a>
 800bece:	07fe      	lsls	r6, r7, #31
 800bed0:	d4e0      	bmi.n	800be94 <_svfwprintf_r+0x93c>
 800bed2:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800bed4:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800bed6:	ebc5 0483 	rsb	r4, r5, r3, lsl #2
 800beda:	10a4      	asrs	r4, r4, #2
 800bedc:	1a9b      	subs	r3, r3, r2
 800bede:	429c      	cmp	r4, r3
 800bee0:	bfa8      	it	ge
 800bee2:	461c      	movge	r4, r3
 800bee4:	2c00      	cmp	r4, #0
 800bee6:	dd09      	ble.n	800befc <_svfwprintf_r+0x9a4>
 800bee8:	00a3      	lsls	r3, r4, #2
 800beea:	eb0a 0205 	add.w	r2, sl, r5
 800beee:	4649      	mov	r1, r9
 800bef0:	4658      	mov	r0, fp
 800bef2:	f000 f98f 	bl	800c214 <__ssputs_r>
 800bef6:	3001      	adds	r0, #1
 800bef8:	f43f af09 	beq.w	800bd0e <_svfwprintf_r+0x7b6>
 800befc:	e9dd 3518 	ldrd	r3, r5, [sp, #96]	; 0x60
 800bf00:	2c00      	cmp	r4, #0
 800bf02:	eba5 0503 	sub.w	r5, r5, r3
 800bf06:	bfa8      	it	ge
 800bf08:	1b2d      	subge	r5, r5, r4
 800bf0a:	2d00      	cmp	r5, #0
 800bf0c:	f77f adcd 	ble.w	800baaa <_svfwprintf_r+0x552>
 800bf10:	4c4a      	ldr	r4, [pc, #296]	; (800c03c <_svfwprintf_r+0xae4>)
 800bf12:	2d10      	cmp	r5, #16
 800bf14:	dc01      	bgt.n	800bf1a <_svfwprintf_r+0x9c2>
 800bf16:	00ab      	lsls	r3, r5, #2
 800bf18:	e74d      	b.n	800bdb6 <_svfwprintf_r+0x85e>
 800bf1a:	2340      	movs	r3, #64	; 0x40
 800bf1c:	4622      	mov	r2, r4
 800bf1e:	4649      	mov	r1, r9
 800bf20:	4658      	mov	r0, fp
 800bf22:	f000 f977 	bl	800c214 <__ssputs_r>
 800bf26:	3001      	adds	r0, #1
 800bf28:	f43f aef1 	beq.w	800bd0e <_svfwprintf_r+0x7b6>
 800bf2c:	3d10      	subs	r5, #16
 800bf2e:	e7f0      	b.n	800bf12 <_svfwprintf_r+0x9ba>
 800bf30:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800bf32:	2b01      	cmp	r3, #1
 800bf34:	4652      	mov	r2, sl
 800bf36:	f04f 0304 	mov.w	r3, #4
 800bf3a:	4649      	mov	r1, r9
 800bf3c:	4658      	mov	r0, fp
 800bf3e:	dc01      	bgt.n	800bf44 <_svfwprintf_r+0x9ec>
 800bf40:	07fc      	lsls	r4, r7, #31
 800bf42:	d51b      	bpl.n	800bf7c <_svfwprintf_r+0xa24>
 800bf44:	f000 f966 	bl	800c214 <__ssputs_r>
 800bf48:	3001      	adds	r0, #1
 800bf4a:	f43f aee0 	beq.w	800bd0e <_svfwprintf_r+0x7b6>
 800bf4e:	2304      	movs	r3, #4
 800bf50:	aa16      	add	r2, sp, #88	; 0x58
 800bf52:	4649      	mov	r1, r9
 800bf54:	4658      	mov	r0, fp
 800bf56:	f000 f95d 	bl	800c214 <__ssputs_r>
 800bf5a:	3001      	adds	r0, #1
 800bf5c:	f43f aed7 	beq.w	800bd0e <_svfwprintf_r+0x7b6>
 800bf60:	9c19      	ldr	r4, [sp, #100]	; 0x64
 800bf62:	ec51 0b18 	vmov	r0, r1, d8
 800bf66:	2200      	movs	r2, #0
 800bf68:	2300      	movs	r3, #0
 800bf6a:	3c01      	subs	r4, #1
 800bf6c:	f7f4 fdac 	bl	8000ac8 <__aeabi_dcmpeq>
 800bf70:	b968      	cbnz	r0, 800bf8e <_svfwprintf_r+0xa36>
 800bf72:	00a3      	lsls	r3, r4, #2
 800bf74:	f10a 0204 	add.w	r2, sl, #4
 800bf78:	4649      	mov	r1, r9
 800bf7a:	4658      	mov	r0, fp
 800bf7c:	f000 f94a 	bl	800c214 <__ssputs_r>
 800bf80:	3001      	adds	r0, #1
 800bf82:	f43f aec4 	beq.w	800bd0e <_svfwprintf_r+0x7b6>
 800bf86:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800bf88:	aa1c      	add	r2, sp, #112	; 0x70
 800bf8a:	009b      	lsls	r3, r3, #2
 800bf8c:	e586      	b.n	800ba9c <_svfwprintf_r+0x544>
 800bf8e:	2c00      	cmp	r4, #0
 800bf90:	ddf9      	ble.n	800bf86 <_svfwprintf_r+0xa2e>
 800bf92:	4d2a      	ldr	r5, [pc, #168]	; (800c03c <_svfwprintf_r+0xae4>)
 800bf94:	2c10      	cmp	r4, #16
 800bf96:	dc02      	bgt.n	800bf9e <_svfwprintf_r+0xa46>
 800bf98:	4a28      	ldr	r2, [pc, #160]	; (800c03c <_svfwprintf_r+0xae4>)
 800bf9a:	00a3      	lsls	r3, r4, #2
 800bf9c:	e7ec      	b.n	800bf78 <_svfwprintf_r+0xa20>
 800bf9e:	2340      	movs	r3, #64	; 0x40
 800bfa0:	462a      	mov	r2, r5
 800bfa2:	4649      	mov	r1, r9
 800bfa4:	4658      	mov	r0, fp
 800bfa6:	f000 f935 	bl	800c214 <__ssputs_r>
 800bfaa:	3001      	adds	r0, #1
 800bfac:	f43f aeaf 	beq.w	800bd0e <_svfwprintf_r+0x7b6>
 800bfb0:	3c10      	subs	r4, #16
 800bfb2:	e7ef      	b.n	800bf94 <_svfwprintf_r+0xa3c>
 800bfb4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800bfb6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800bfb8:	1a9c      	subs	r4, r3, r2
 800bfba:	2c00      	cmp	r4, #0
 800bfbc:	f77f ad78 	ble.w	800bab0 <_svfwprintf_r+0x558>
 800bfc0:	2c10      	cmp	r4, #16
 800bfc2:	dc09      	bgt.n	800bfd8 <_svfwprintf_r+0xa80>
 800bfc4:	4a1e      	ldr	r2, [pc, #120]	; (800c040 <_svfwprintf_r+0xae8>)
 800bfc6:	00a3      	lsls	r3, r4, #2
 800bfc8:	4649      	mov	r1, r9
 800bfca:	4658      	mov	r0, fp
 800bfcc:	f000 f922 	bl	800c214 <__ssputs_r>
 800bfd0:	3001      	adds	r0, #1
 800bfd2:	f47f ad6d 	bne.w	800bab0 <_svfwprintf_r+0x558>
 800bfd6:	e69a      	b.n	800bd0e <_svfwprintf_r+0x7b6>
 800bfd8:	4a19      	ldr	r2, [pc, #100]	; (800c040 <_svfwprintf_r+0xae8>)
 800bfda:	2340      	movs	r3, #64	; 0x40
 800bfdc:	4649      	mov	r1, r9
 800bfde:	4658      	mov	r0, fp
 800bfe0:	f000 f918 	bl	800c214 <__ssputs_r>
 800bfe4:	3001      	adds	r0, #1
 800bfe6:	f43f ae92 	beq.w	800bd0e <_svfwprintf_r+0x7b6>
 800bfea:	3c10      	subs	r4, #16
 800bfec:	e7e8      	b.n	800bfc0 <_svfwprintf_r+0xa68>
 800bfee:	4639      	mov	r1, r7
 800bff0:	2b00      	cmp	r3, #0
 800bff2:	f43f add7 	beq.w	800bba4 <_svfwprintf_r+0x64c>
 800bff6:	2a01      	cmp	r2, #1
 800bff8:	f43f ae4c 	beq.w	800bc94 <_svfwprintf_r+0x73c>
 800bffc:	2a02      	cmp	r2, #2
 800bffe:	f50d 7aa4 	add.w	sl, sp, #328	; 0x148
 800c002:	f43f ae5d 	beq.w	800bcc0 <_svfwprintf_r+0x768>
 800c006:	f003 0207 	and.w	r2, r3, #7
 800c00a:	3230      	adds	r2, #48	; 0x30
 800c00c:	08db      	lsrs	r3, r3, #3
 800c00e:	4650      	mov	r0, sl
 800c010:	f84a 2d04 	str.w	r2, [sl, #-4]!
 800c014:	d1f7      	bne.n	800c006 <_svfwprintf_r+0xaae>
 800c016:	07cd      	lsls	r5, r1, #31
 800c018:	d506      	bpl.n	800c028 <_svfwprintf_r+0xad0>
 800c01a:	2a30      	cmp	r2, #48	; 0x30
 800c01c:	d004      	beq.n	800c028 <_svfwprintf_r+0xad0>
 800c01e:	2330      	movs	r3, #48	; 0x30
 800c020:	f84a 3c04 	str.w	r3, [sl, #-4]
 800c024:	f1a0 0a08 	sub.w	sl, r0, #8
 800c028:	ab52      	add	r3, sp, #328	; 0x148
 800c02a:	eba3 030a 	sub.w	r3, r3, sl
 800c02e:	4626      	mov	r6, r4
 800c030:	460f      	mov	r7, r1
 800c032:	109c      	asrs	r4, r3, #2
 800c034:	f04f 0800 	mov.w	r8, #0
 800c038:	4645      	mov	r5, r8
 800c03a:	e4d7      	b.n	800b9ec <_svfwprintf_r+0x494>
 800c03c:	080102ac 	.word	0x080102ac
 800c040:	0801026c 	.word	0x0801026c

0800c044 <wcslen>:
 800c044:	4602      	mov	r2, r0
 800c046:	4613      	mov	r3, r2
 800c048:	3204      	adds	r2, #4
 800c04a:	6819      	ldr	r1, [r3, #0]
 800c04c:	2900      	cmp	r1, #0
 800c04e:	d1fa      	bne.n	800c046 <wcslen+0x2>
 800c050:	1a18      	subs	r0, r3, r0
 800c052:	1080      	asrs	r0, r0, #2
 800c054:	4770      	bx	lr

0800c056 <wmemchr>:
 800c056:	b530      	push	{r4, r5, lr}
 800c058:	2400      	movs	r4, #0
 800c05a:	4294      	cmp	r4, r2
 800c05c:	4603      	mov	r3, r0
 800c05e:	d102      	bne.n	800c066 <wmemchr+0x10>
 800c060:	2300      	movs	r3, #0
 800c062:	4618      	mov	r0, r3
 800c064:	bd30      	pop	{r4, r5, pc}
 800c066:	681d      	ldr	r5, [r3, #0]
 800c068:	428d      	cmp	r5, r1
 800c06a:	f100 0004 	add.w	r0, r0, #4
 800c06e:	d0f8      	beq.n	800c062 <wmemchr+0xc>
 800c070:	3401      	adds	r4, #1
 800c072:	e7f2      	b.n	800c05a <wmemchr+0x4>

0800c074 <_fstat_r>:
 800c074:	b538      	push	{r3, r4, r5, lr}
 800c076:	4d07      	ldr	r5, [pc, #28]	; (800c094 <_fstat_r+0x20>)
 800c078:	2300      	movs	r3, #0
 800c07a:	4604      	mov	r4, r0
 800c07c:	4608      	mov	r0, r1
 800c07e:	4611      	mov	r1, r2
 800c080:	602b      	str	r3, [r5, #0]
 800c082:	f7f5 fdee 	bl	8001c62 <_fstat>
 800c086:	1c43      	adds	r3, r0, #1
 800c088:	d102      	bne.n	800c090 <_fstat_r+0x1c>
 800c08a:	682b      	ldr	r3, [r5, #0]
 800c08c:	b103      	cbz	r3, 800c090 <_fstat_r+0x1c>
 800c08e:	6023      	str	r3, [r4, #0]
 800c090:	bd38      	pop	{r3, r4, r5, pc}
 800c092:	bf00      	nop
 800c094:	2000a7b8 	.word	0x2000a7b8

0800c098 <_isatty_r>:
 800c098:	b538      	push	{r3, r4, r5, lr}
 800c09a:	4d06      	ldr	r5, [pc, #24]	; (800c0b4 <_isatty_r+0x1c>)
 800c09c:	2300      	movs	r3, #0
 800c09e:	4604      	mov	r4, r0
 800c0a0:	4608      	mov	r0, r1
 800c0a2:	602b      	str	r3, [r5, #0]
 800c0a4:	f7f5 fded 	bl	8001c82 <_isatty>
 800c0a8:	1c43      	adds	r3, r0, #1
 800c0aa:	d102      	bne.n	800c0b2 <_isatty_r+0x1a>
 800c0ac:	682b      	ldr	r3, [r5, #0]
 800c0ae:	b103      	cbz	r3, 800c0b2 <_isatty_r+0x1a>
 800c0b0:	6023      	str	r3, [r4, #0]
 800c0b2:	bd38      	pop	{r3, r4, r5, pc}
 800c0b4:	2000a7b8 	.word	0x2000a7b8

0800c0b8 <_sbrk_r>:
 800c0b8:	b538      	push	{r3, r4, r5, lr}
 800c0ba:	4d06      	ldr	r5, [pc, #24]	; (800c0d4 <_sbrk_r+0x1c>)
 800c0bc:	2300      	movs	r3, #0
 800c0be:	4604      	mov	r4, r0
 800c0c0:	4608      	mov	r0, r1
 800c0c2:	602b      	str	r3, [r5, #0]
 800c0c4:	f7f5 fdf6 	bl	8001cb4 <_sbrk>
 800c0c8:	1c43      	adds	r3, r0, #1
 800c0ca:	d102      	bne.n	800c0d2 <_sbrk_r+0x1a>
 800c0cc:	682b      	ldr	r3, [r5, #0]
 800c0ce:	b103      	cbz	r3, 800c0d2 <_sbrk_r+0x1a>
 800c0d0:	6023      	str	r3, [r4, #0]
 800c0d2:	bd38      	pop	{r3, r4, r5, pc}
 800c0d4:	2000a7b8 	.word	0x2000a7b8

0800c0d8 <__assert_func>:
 800c0d8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c0da:	4614      	mov	r4, r2
 800c0dc:	461a      	mov	r2, r3
 800c0de:	4b09      	ldr	r3, [pc, #36]	; (800c104 <__assert_func+0x2c>)
 800c0e0:	681b      	ldr	r3, [r3, #0]
 800c0e2:	4605      	mov	r5, r0
 800c0e4:	68d8      	ldr	r0, [r3, #12]
 800c0e6:	b14c      	cbz	r4, 800c0fc <__assert_func+0x24>
 800c0e8:	4b07      	ldr	r3, [pc, #28]	; (800c108 <__assert_func+0x30>)
 800c0ea:	9100      	str	r1, [sp, #0]
 800c0ec:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800c0f0:	4906      	ldr	r1, [pc, #24]	; (800c10c <__assert_func+0x34>)
 800c0f2:	462b      	mov	r3, r5
 800c0f4:	f000 f8e8 	bl	800c2c8 <fiprintf>
 800c0f8:	f000 f912 	bl	800c320 <abort>
 800c0fc:	4b04      	ldr	r3, [pc, #16]	; (800c110 <__assert_func+0x38>)
 800c0fe:	461c      	mov	r4, r3
 800c100:	e7f3      	b.n	800c0ea <__assert_func+0x12>
 800c102:	bf00      	nop
 800c104:	20000070 	.word	0x20000070
 800c108:	080102f6 	.word	0x080102f6
 800c10c:	08010303 	.word	0x08010303
 800c110:	08010331 	.word	0x08010331

0800c114 <_calloc_r>:
 800c114:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c116:	fba1 2402 	umull	r2, r4, r1, r2
 800c11a:	b94c      	cbnz	r4, 800c130 <_calloc_r+0x1c>
 800c11c:	4611      	mov	r1, r2
 800c11e:	9201      	str	r2, [sp, #4]
 800c120:	f7fe fd40 	bl	800aba4 <_malloc_r>
 800c124:	9a01      	ldr	r2, [sp, #4]
 800c126:	4605      	mov	r5, r0
 800c128:	b930      	cbnz	r0, 800c138 <_calloc_r+0x24>
 800c12a:	4628      	mov	r0, r5
 800c12c:	b003      	add	sp, #12
 800c12e:	bd30      	pop	{r4, r5, pc}
 800c130:	220c      	movs	r2, #12
 800c132:	6002      	str	r2, [r0, #0]
 800c134:	2500      	movs	r5, #0
 800c136:	e7f8      	b.n	800c12a <_calloc_r+0x16>
 800c138:	4621      	mov	r1, r4
 800c13a:	f7fd fdb7 	bl	8009cac <memset>
 800c13e:	e7f4      	b.n	800c12a <_calloc_r+0x16>

0800c140 <__ascii_mbtowc>:
 800c140:	b082      	sub	sp, #8
 800c142:	b901      	cbnz	r1, 800c146 <__ascii_mbtowc+0x6>
 800c144:	a901      	add	r1, sp, #4
 800c146:	b142      	cbz	r2, 800c15a <__ascii_mbtowc+0x1a>
 800c148:	b14b      	cbz	r3, 800c15e <__ascii_mbtowc+0x1e>
 800c14a:	7813      	ldrb	r3, [r2, #0]
 800c14c:	600b      	str	r3, [r1, #0]
 800c14e:	7812      	ldrb	r2, [r2, #0]
 800c150:	1e10      	subs	r0, r2, #0
 800c152:	bf18      	it	ne
 800c154:	2001      	movne	r0, #1
 800c156:	b002      	add	sp, #8
 800c158:	4770      	bx	lr
 800c15a:	4610      	mov	r0, r2
 800c15c:	e7fb      	b.n	800c156 <__ascii_mbtowc+0x16>
 800c15e:	f06f 0001 	mvn.w	r0, #1
 800c162:	e7f8      	b.n	800c156 <__ascii_mbtowc+0x16>

0800c164 <__ascii_wctomb>:
 800c164:	b149      	cbz	r1, 800c17a <__ascii_wctomb+0x16>
 800c166:	2aff      	cmp	r2, #255	; 0xff
 800c168:	bf85      	ittet	hi
 800c16a:	238a      	movhi	r3, #138	; 0x8a
 800c16c:	6003      	strhi	r3, [r0, #0]
 800c16e:	700a      	strbls	r2, [r1, #0]
 800c170:	f04f 30ff 	movhi.w	r0, #4294967295
 800c174:	bf98      	it	ls
 800c176:	2001      	movls	r0, #1
 800c178:	4770      	bx	lr
 800c17a:	4608      	mov	r0, r1
 800c17c:	4770      	bx	lr
	...

0800c180 <btowc>:
 800c180:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c182:	1c43      	adds	r3, r0, #1
 800c184:	b087      	sub	sp, #28
 800c186:	d103      	bne.n	800c190 <btowc+0x10>
 800c188:	f04f 30ff 	mov.w	r0, #4294967295
 800c18c:	b007      	add	sp, #28
 800c18e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c190:	4d1c      	ldr	r5, [pc, #112]	; (800c204 <btowc+0x84>)
 800c192:	f88d 000b 	strb.w	r0, [sp, #11]
 800c196:	ae04      	add	r6, sp, #16
 800c198:	2208      	movs	r2, #8
 800c19a:	2100      	movs	r1, #0
 800c19c:	4630      	mov	r0, r6
 800c19e:	f7fd fd85 	bl	8009cac <memset>
 800c1a2:	682f      	ldr	r7, [r5, #0]
 800c1a4:	6c7c      	ldr	r4, [r7, #68]	; 0x44
 800c1a6:	b9fc      	cbnz	r4, 800c1e8 <btowc+0x68>
 800c1a8:	2050      	movs	r0, #80	; 0x50
 800c1aa:	f7fe fcd3 	bl	800ab54 <malloc>
 800c1ae:	4602      	mov	r2, r0
 800c1b0:	6478      	str	r0, [r7, #68]	; 0x44
 800c1b2:	b920      	cbnz	r0, 800c1be <btowc+0x3e>
 800c1b4:	4b14      	ldr	r3, [pc, #80]	; (800c208 <btowc+0x88>)
 800c1b6:	4815      	ldr	r0, [pc, #84]	; (800c20c <btowc+0x8c>)
 800c1b8:	2118      	movs	r1, #24
 800c1ba:	f7ff ff8d 	bl	800c0d8 <__assert_func>
 800c1be:	682b      	ldr	r3, [r5, #0]
 800c1c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c1c2:	e9c3 4400 	strd	r4, r4, [r3]
 800c1c6:	e9c3 4402 	strd	r4, r4, [r3, #8]
 800c1ca:	e9c3 4404 	strd	r4, r4, [r3, #16]
 800c1ce:	e9c3 440a 	strd	r4, r4, [r3, #40]	; 0x28
 800c1d2:	e9c3 440c 	strd	r4, r4, [r3, #48]	; 0x30
 800c1d6:	e9c3 440e 	strd	r4, r4, [r3, #56]	; 0x38
 800c1da:	e9c3 4410 	strd	r4, r4, [r3, #64]	; 0x40
 800c1de:	e9c3 4412 	strd	r4, r4, [r3, #72]	; 0x48
 800c1e2:	619c      	str	r4, [r3, #24]
 800c1e4:	771c      	strb	r4, [r3, #28]
 800c1e6:	625c      	str	r4, [r3, #36]	; 0x24
 800c1e8:	4b09      	ldr	r3, [pc, #36]	; (800c210 <btowc+0x90>)
 800c1ea:	9600      	str	r6, [sp, #0]
 800c1ec:	f8d3 40e4 	ldr.w	r4, [r3, #228]	; 0xe4
 800c1f0:	6828      	ldr	r0, [r5, #0]
 800c1f2:	2301      	movs	r3, #1
 800c1f4:	f10d 020b 	add.w	r2, sp, #11
 800c1f8:	a903      	add	r1, sp, #12
 800c1fa:	47a0      	blx	r4
 800c1fc:	2801      	cmp	r0, #1
 800c1fe:	d8c3      	bhi.n	800c188 <btowc+0x8>
 800c200:	9803      	ldr	r0, [sp, #12]
 800c202:	e7c3      	b.n	800c18c <btowc+0xc>
 800c204:	20000070 	.word	0x20000070
 800c208:	0800ffc1 	.word	0x0800ffc1
 800c20c:	08010332 	.word	0x08010332
 800c210:	20000074 	.word	0x20000074

0800c214 <__ssputs_r>:
 800c214:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c218:	688e      	ldr	r6, [r1, #8]
 800c21a:	461f      	mov	r7, r3
 800c21c:	42be      	cmp	r6, r7
 800c21e:	680b      	ldr	r3, [r1, #0]
 800c220:	4682      	mov	sl, r0
 800c222:	460c      	mov	r4, r1
 800c224:	4690      	mov	r8, r2
 800c226:	d82c      	bhi.n	800c282 <__ssputs_r+0x6e>
 800c228:	898a      	ldrh	r2, [r1, #12]
 800c22a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800c22e:	d026      	beq.n	800c27e <__ssputs_r+0x6a>
 800c230:	6965      	ldr	r5, [r4, #20]
 800c232:	6909      	ldr	r1, [r1, #16]
 800c234:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c238:	eba3 0901 	sub.w	r9, r3, r1
 800c23c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c240:	1c7b      	adds	r3, r7, #1
 800c242:	444b      	add	r3, r9
 800c244:	106d      	asrs	r5, r5, #1
 800c246:	429d      	cmp	r5, r3
 800c248:	bf38      	it	cc
 800c24a:	461d      	movcc	r5, r3
 800c24c:	0553      	lsls	r3, r2, #21
 800c24e:	d527      	bpl.n	800c2a0 <__ssputs_r+0x8c>
 800c250:	4629      	mov	r1, r5
 800c252:	f7fe fca7 	bl	800aba4 <_malloc_r>
 800c256:	4606      	mov	r6, r0
 800c258:	b360      	cbz	r0, 800c2b4 <__ssputs_r+0xa0>
 800c25a:	6921      	ldr	r1, [r4, #16]
 800c25c:	464a      	mov	r2, r9
 800c25e:	f7fd fda4 	bl	8009daa <memcpy>
 800c262:	89a3      	ldrh	r3, [r4, #12]
 800c264:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800c268:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c26c:	81a3      	strh	r3, [r4, #12]
 800c26e:	6126      	str	r6, [r4, #16]
 800c270:	6165      	str	r5, [r4, #20]
 800c272:	444e      	add	r6, r9
 800c274:	eba5 0509 	sub.w	r5, r5, r9
 800c278:	6026      	str	r6, [r4, #0]
 800c27a:	60a5      	str	r5, [r4, #8]
 800c27c:	463e      	mov	r6, r7
 800c27e:	42be      	cmp	r6, r7
 800c280:	d900      	bls.n	800c284 <__ssputs_r+0x70>
 800c282:	463e      	mov	r6, r7
 800c284:	6820      	ldr	r0, [r4, #0]
 800c286:	4632      	mov	r2, r6
 800c288:	4641      	mov	r1, r8
 800c28a:	f000 f82f 	bl	800c2ec <memmove>
 800c28e:	68a3      	ldr	r3, [r4, #8]
 800c290:	1b9b      	subs	r3, r3, r6
 800c292:	60a3      	str	r3, [r4, #8]
 800c294:	6823      	ldr	r3, [r4, #0]
 800c296:	4433      	add	r3, r6
 800c298:	6023      	str	r3, [r4, #0]
 800c29a:	2000      	movs	r0, #0
 800c29c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c2a0:	462a      	mov	r2, r5
 800c2a2:	f000 f844 	bl	800c32e <_realloc_r>
 800c2a6:	4606      	mov	r6, r0
 800c2a8:	2800      	cmp	r0, #0
 800c2aa:	d1e0      	bne.n	800c26e <__ssputs_r+0x5a>
 800c2ac:	6921      	ldr	r1, [r4, #16]
 800c2ae:	4650      	mov	r0, sl
 800c2b0:	f7fe fc04 	bl	800aabc <_free_r>
 800c2b4:	230c      	movs	r3, #12
 800c2b6:	f8ca 3000 	str.w	r3, [sl]
 800c2ba:	89a3      	ldrh	r3, [r4, #12]
 800c2bc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c2c0:	81a3      	strh	r3, [r4, #12]
 800c2c2:	f04f 30ff 	mov.w	r0, #4294967295
 800c2c6:	e7e9      	b.n	800c29c <__ssputs_r+0x88>

0800c2c8 <fiprintf>:
 800c2c8:	b40e      	push	{r1, r2, r3}
 800c2ca:	b503      	push	{r0, r1, lr}
 800c2cc:	4601      	mov	r1, r0
 800c2ce:	ab03      	add	r3, sp, #12
 800c2d0:	4805      	ldr	r0, [pc, #20]	; (800c2e8 <fiprintf+0x20>)
 800c2d2:	f853 2b04 	ldr.w	r2, [r3], #4
 800c2d6:	6800      	ldr	r0, [r0, #0]
 800c2d8:	9301      	str	r3, [sp, #4]
 800c2da:	f000 f881 	bl	800c3e0 <_vfiprintf_r>
 800c2de:	b002      	add	sp, #8
 800c2e0:	f85d eb04 	ldr.w	lr, [sp], #4
 800c2e4:	b003      	add	sp, #12
 800c2e6:	4770      	bx	lr
 800c2e8:	20000070 	.word	0x20000070

0800c2ec <memmove>:
 800c2ec:	4288      	cmp	r0, r1
 800c2ee:	b510      	push	{r4, lr}
 800c2f0:	eb01 0402 	add.w	r4, r1, r2
 800c2f4:	d902      	bls.n	800c2fc <memmove+0x10>
 800c2f6:	4284      	cmp	r4, r0
 800c2f8:	4623      	mov	r3, r4
 800c2fa:	d807      	bhi.n	800c30c <memmove+0x20>
 800c2fc:	1e43      	subs	r3, r0, #1
 800c2fe:	42a1      	cmp	r1, r4
 800c300:	d008      	beq.n	800c314 <memmove+0x28>
 800c302:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c306:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c30a:	e7f8      	b.n	800c2fe <memmove+0x12>
 800c30c:	4402      	add	r2, r0
 800c30e:	4601      	mov	r1, r0
 800c310:	428a      	cmp	r2, r1
 800c312:	d100      	bne.n	800c316 <memmove+0x2a>
 800c314:	bd10      	pop	{r4, pc}
 800c316:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c31a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c31e:	e7f7      	b.n	800c310 <memmove+0x24>

0800c320 <abort>:
 800c320:	b508      	push	{r3, lr}
 800c322:	2006      	movs	r0, #6
 800c324:	f000 fa34 	bl	800c790 <raise>
 800c328:	2001      	movs	r0, #1
 800c32a:	f7f5 fc4b 	bl	8001bc4 <_exit>

0800c32e <_realloc_r>:
 800c32e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c332:	4680      	mov	r8, r0
 800c334:	4614      	mov	r4, r2
 800c336:	460e      	mov	r6, r1
 800c338:	b921      	cbnz	r1, 800c344 <_realloc_r+0x16>
 800c33a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c33e:	4611      	mov	r1, r2
 800c340:	f7fe bc30 	b.w	800aba4 <_malloc_r>
 800c344:	b92a      	cbnz	r2, 800c352 <_realloc_r+0x24>
 800c346:	f7fe fbb9 	bl	800aabc <_free_r>
 800c34a:	4625      	mov	r5, r4
 800c34c:	4628      	mov	r0, r5
 800c34e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c352:	f000 fa39 	bl	800c7c8 <_malloc_usable_size_r>
 800c356:	4284      	cmp	r4, r0
 800c358:	4607      	mov	r7, r0
 800c35a:	d802      	bhi.n	800c362 <_realloc_r+0x34>
 800c35c:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800c360:	d812      	bhi.n	800c388 <_realloc_r+0x5a>
 800c362:	4621      	mov	r1, r4
 800c364:	4640      	mov	r0, r8
 800c366:	f7fe fc1d 	bl	800aba4 <_malloc_r>
 800c36a:	4605      	mov	r5, r0
 800c36c:	2800      	cmp	r0, #0
 800c36e:	d0ed      	beq.n	800c34c <_realloc_r+0x1e>
 800c370:	42bc      	cmp	r4, r7
 800c372:	4622      	mov	r2, r4
 800c374:	4631      	mov	r1, r6
 800c376:	bf28      	it	cs
 800c378:	463a      	movcs	r2, r7
 800c37a:	f7fd fd16 	bl	8009daa <memcpy>
 800c37e:	4631      	mov	r1, r6
 800c380:	4640      	mov	r0, r8
 800c382:	f7fe fb9b 	bl	800aabc <_free_r>
 800c386:	e7e1      	b.n	800c34c <_realloc_r+0x1e>
 800c388:	4635      	mov	r5, r6
 800c38a:	e7df      	b.n	800c34c <_realloc_r+0x1e>

0800c38c <__sfputc_r>:
 800c38c:	6893      	ldr	r3, [r2, #8]
 800c38e:	3b01      	subs	r3, #1
 800c390:	2b00      	cmp	r3, #0
 800c392:	b410      	push	{r4}
 800c394:	6093      	str	r3, [r2, #8]
 800c396:	da08      	bge.n	800c3aa <__sfputc_r+0x1e>
 800c398:	6994      	ldr	r4, [r2, #24]
 800c39a:	42a3      	cmp	r3, r4
 800c39c:	db01      	blt.n	800c3a2 <__sfputc_r+0x16>
 800c39e:	290a      	cmp	r1, #10
 800c3a0:	d103      	bne.n	800c3aa <__sfputc_r+0x1e>
 800c3a2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c3a6:	f000 b935 	b.w	800c614 <__swbuf_r>
 800c3aa:	6813      	ldr	r3, [r2, #0]
 800c3ac:	1c58      	adds	r0, r3, #1
 800c3ae:	6010      	str	r0, [r2, #0]
 800c3b0:	7019      	strb	r1, [r3, #0]
 800c3b2:	4608      	mov	r0, r1
 800c3b4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c3b8:	4770      	bx	lr

0800c3ba <__sfputs_r>:
 800c3ba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c3bc:	4606      	mov	r6, r0
 800c3be:	460f      	mov	r7, r1
 800c3c0:	4614      	mov	r4, r2
 800c3c2:	18d5      	adds	r5, r2, r3
 800c3c4:	42ac      	cmp	r4, r5
 800c3c6:	d101      	bne.n	800c3cc <__sfputs_r+0x12>
 800c3c8:	2000      	movs	r0, #0
 800c3ca:	e007      	b.n	800c3dc <__sfputs_r+0x22>
 800c3cc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c3d0:	463a      	mov	r2, r7
 800c3d2:	4630      	mov	r0, r6
 800c3d4:	f7ff ffda 	bl	800c38c <__sfputc_r>
 800c3d8:	1c43      	adds	r3, r0, #1
 800c3da:	d1f3      	bne.n	800c3c4 <__sfputs_r+0xa>
 800c3dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800c3e0 <_vfiprintf_r>:
 800c3e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c3e4:	460d      	mov	r5, r1
 800c3e6:	b09d      	sub	sp, #116	; 0x74
 800c3e8:	4614      	mov	r4, r2
 800c3ea:	4698      	mov	r8, r3
 800c3ec:	4606      	mov	r6, r0
 800c3ee:	b118      	cbz	r0, 800c3f8 <_vfiprintf_r+0x18>
 800c3f0:	6a03      	ldr	r3, [r0, #32]
 800c3f2:	b90b      	cbnz	r3, 800c3f8 <_vfiprintf_r+0x18>
 800c3f4:	f7fd fbac 	bl	8009b50 <__sinit>
 800c3f8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c3fa:	07d9      	lsls	r1, r3, #31
 800c3fc:	d405      	bmi.n	800c40a <_vfiprintf_r+0x2a>
 800c3fe:	89ab      	ldrh	r3, [r5, #12]
 800c400:	059a      	lsls	r2, r3, #22
 800c402:	d402      	bmi.n	800c40a <_vfiprintf_r+0x2a>
 800c404:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c406:	f7fd fcce 	bl	8009da6 <__retarget_lock_acquire_recursive>
 800c40a:	89ab      	ldrh	r3, [r5, #12]
 800c40c:	071b      	lsls	r3, r3, #28
 800c40e:	d501      	bpl.n	800c414 <_vfiprintf_r+0x34>
 800c410:	692b      	ldr	r3, [r5, #16]
 800c412:	b99b      	cbnz	r3, 800c43c <_vfiprintf_r+0x5c>
 800c414:	4629      	mov	r1, r5
 800c416:	4630      	mov	r0, r6
 800c418:	f000 f93a 	bl	800c690 <__swsetup_r>
 800c41c:	b170      	cbz	r0, 800c43c <_vfiprintf_r+0x5c>
 800c41e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c420:	07dc      	lsls	r4, r3, #31
 800c422:	d504      	bpl.n	800c42e <_vfiprintf_r+0x4e>
 800c424:	f04f 30ff 	mov.w	r0, #4294967295
 800c428:	b01d      	add	sp, #116	; 0x74
 800c42a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c42e:	89ab      	ldrh	r3, [r5, #12]
 800c430:	0598      	lsls	r0, r3, #22
 800c432:	d4f7      	bmi.n	800c424 <_vfiprintf_r+0x44>
 800c434:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c436:	f7fd fcb7 	bl	8009da8 <__retarget_lock_release_recursive>
 800c43a:	e7f3      	b.n	800c424 <_vfiprintf_r+0x44>
 800c43c:	2300      	movs	r3, #0
 800c43e:	9309      	str	r3, [sp, #36]	; 0x24
 800c440:	2320      	movs	r3, #32
 800c442:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c446:	f8cd 800c 	str.w	r8, [sp, #12]
 800c44a:	2330      	movs	r3, #48	; 0x30
 800c44c:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800c600 <_vfiprintf_r+0x220>
 800c450:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c454:	f04f 0901 	mov.w	r9, #1
 800c458:	4623      	mov	r3, r4
 800c45a:	469a      	mov	sl, r3
 800c45c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c460:	b10a      	cbz	r2, 800c466 <_vfiprintf_r+0x86>
 800c462:	2a25      	cmp	r2, #37	; 0x25
 800c464:	d1f9      	bne.n	800c45a <_vfiprintf_r+0x7a>
 800c466:	ebba 0b04 	subs.w	fp, sl, r4
 800c46a:	d00b      	beq.n	800c484 <_vfiprintf_r+0xa4>
 800c46c:	465b      	mov	r3, fp
 800c46e:	4622      	mov	r2, r4
 800c470:	4629      	mov	r1, r5
 800c472:	4630      	mov	r0, r6
 800c474:	f7ff ffa1 	bl	800c3ba <__sfputs_r>
 800c478:	3001      	adds	r0, #1
 800c47a:	f000 80a9 	beq.w	800c5d0 <_vfiprintf_r+0x1f0>
 800c47e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c480:	445a      	add	r2, fp
 800c482:	9209      	str	r2, [sp, #36]	; 0x24
 800c484:	f89a 3000 	ldrb.w	r3, [sl]
 800c488:	2b00      	cmp	r3, #0
 800c48a:	f000 80a1 	beq.w	800c5d0 <_vfiprintf_r+0x1f0>
 800c48e:	2300      	movs	r3, #0
 800c490:	f04f 32ff 	mov.w	r2, #4294967295
 800c494:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c498:	f10a 0a01 	add.w	sl, sl, #1
 800c49c:	9304      	str	r3, [sp, #16]
 800c49e:	9307      	str	r3, [sp, #28]
 800c4a0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c4a4:	931a      	str	r3, [sp, #104]	; 0x68
 800c4a6:	4654      	mov	r4, sl
 800c4a8:	2205      	movs	r2, #5
 800c4aa:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c4ae:	4854      	ldr	r0, [pc, #336]	; (800c600 <_vfiprintf_r+0x220>)
 800c4b0:	f7f3 fe8e 	bl	80001d0 <memchr>
 800c4b4:	9a04      	ldr	r2, [sp, #16]
 800c4b6:	b9d8      	cbnz	r0, 800c4f0 <_vfiprintf_r+0x110>
 800c4b8:	06d1      	lsls	r1, r2, #27
 800c4ba:	bf44      	itt	mi
 800c4bc:	2320      	movmi	r3, #32
 800c4be:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c4c2:	0713      	lsls	r3, r2, #28
 800c4c4:	bf44      	itt	mi
 800c4c6:	232b      	movmi	r3, #43	; 0x2b
 800c4c8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c4cc:	f89a 3000 	ldrb.w	r3, [sl]
 800c4d0:	2b2a      	cmp	r3, #42	; 0x2a
 800c4d2:	d015      	beq.n	800c500 <_vfiprintf_r+0x120>
 800c4d4:	9a07      	ldr	r2, [sp, #28]
 800c4d6:	4654      	mov	r4, sl
 800c4d8:	2000      	movs	r0, #0
 800c4da:	f04f 0c0a 	mov.w	ip, #10
 800c4de:	4621      	mov	r1, r4
 800c4e0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c4e4:	3b30      	subs	r3, #48	; 0x30
 800c4e6:	2b09      	cmp	r3, #9
 800c4e8:	d94d      	bls.n	800c586 <_vfiprintf_r+0x1a6>
 800c4ea:	b1b0      	cbz	r0, 800c51a <_vfiprintf_r+0x13a>
 800c4ec:	9207      	str	r2, [sp, #28]
 800c4ee:	e014      	b.n	800c51a <_vfiprintf_r+0x13a>
 800c4f0:	eba0 0308 	sub.w	r3, r0, r8
 800c4f4:	fa09 f303 	lsl.w	r3, r9, r3
 800c4f8:	4313      	orrs	r3, r2
 800c4fa:	9304      	str	r3, [sp, #16]
 800c4fc:	46a2      	mov	sl, r4
 800c4fe:	e7d2      	b.n	800c4a6 <_vfiprintf_r+0xc6>
 800c500:	9b03      	ldr	r3, [sp, #12]
 800c502:	1d19      	adds	r1, r3, #4
 800c504:	681b      	ldr	r3, [r3, #0]
 800c506:	9103      	str	r1, [sp, #12]
 800c508:	2b00      	cmp	r3, #0
 800c50a:	bfbb      	ittet	lt
 800c50c:	425b      	neglt	r3, r3
 800c50e:	f042 0202 	orrlt.w	r2, r2, #2
 800c512:	9307      	strge	r3, [sp, #28]
 800c514:	9307      	strlt	r3, [sp, #28]
 800c516:	bfb8      	it	lt
 800c518:	9204      	strlt	r2, [sp, #16]
 800c51a:	7823      	ldrb	r3, [r4, #0]
 800c51c:	2b2e      	cmp	r3, #46	; 0x2e
 800c51e:	d10c      	bne.n	800c53a <_vfiprintf_r+0x15a>
 800c520:	7863      	ldrb	r3, [r4, #1]
 800c522:	2b2a      	cmp	r3, #42	; 0x2a
 800c524:	d134      	bne.n	800c590 <_vfiprintf_r+0x1b0>
 800c526:	9b03      	ldr	r3, [sp, #12]
 800c528:	1d1a      	adds	r2, r3, #4
 800c52a:	681b      	ldr	r3, [r3, #0]
 800c52c:	9203      	str	r2, [sp, #12]
 800c52e:	2b00      	cmp	r3, #0
 800c530:	bfb8      	it	lt
 800c532:	f04f 33ff 	movlt.w	r3, #4294967295
 800c536:	3402      	adds	r4, #2
 800c538:	9305      	str	r3, [sp, #20]
 800c53a:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800c610 <_vfiprintf_r+0x230>
 800c53e:	7821      	ldrb	r1, [r4, #0]
 800c540:	2203      	movs	r2, #3
 800c542:	4650      	mov	r0, sl
 800c544:	f7f3 fe44 	bl	80001d0 <memchr>
 800c548:	b138      	cbz	r0, 800c55a <_vfiprintf_r+0x17a>
 800c54a:	9b04      	ldr	r3, [sp, #16]
 800c54c:	eba0 000a 	sub.w	r0, r0, sl
 800c550:	2240      	movs	r2, #64	; 0x40
 800c552:	4082      	lsls	r2, r0
 800c554:	4313      	orrs	r3, r2
 800c556:	3401      	adds	r4, #1
 800c558:	9304      	str	r3, [sp, #16]
 800c55a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c55e:	4829      	ldr	r0, [pc, #164]	; (800c604 <_vfiprintf_r+0x224>)
 800c560:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c564:	2206      	movs	r2, #6
 800c566:	f7f3 fe33 	bl	80001d0 <memchr>
 800c56a:	2800      	cmp	r0, #0
 800c56c:	d03f      	beq.n	800c5ee <_vfiprintf_r+0x20e>
 800c56e:	4b26      	ldr	r3, [pc, #152]	; (800c608 <_vfiprintf_r+0x228>)
 800c570:	bb1b      	cbnz	r3, 800c5ba <_vfiprintf_r+0x1da>
 800c572:	9b03      	ldr	r3, [sp, #12]
 800c574:	3307      	adds	r3, #7
 800c576:	f023 0307 	bic.w	r3, r3, #7
 800c57a:	3308      	adds	r3, #8
 800c57c:	9303      	str	r3, [sp, #12]
 800c57e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c580:	443b      	add	r3, r7
 800c582:	9309      	str	r3, [sp, #36]	; 0x24
 800c584:	e768      	b.n	800c458 <_vfiprintf_r+0x78>
 800c586:	fb0c 3202 	mla	r2, ip, r2, r3
 800c58a:	460c      	mov	r4, r1
 800c58c:	2001      	movs	r0, #1
 800c58e:	e7a6      	b.n	800c4de <_vfiprintf_r+0xfe>
 800c590:	2300      	movs	r3, #0
 800c592:	3401      	adds	r4, #1
 800c594:	9305      	str	r3, [sp, #20]
 800c596:	4619      	mov	r1, r3
 800c598:	f04f 0c0a 	mov.w	ip, #10
 800c59c:	4620      	mov	r0, r4
 800c59e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c5a2:	3a30      	subs	r2, #48	; 0x30
 800c5a4:	2a09      	cmp	r2, #9
 800c5a6:	d903      	bls.n	800c5b0 <_vfiprintf_r+0x1d0>
 800c5a8:	2b00      	cmp	r3, #0
 800c5aa:	d0c6      	beq.n	800c53a <_vfiprintf_r+0x15a>
 800c5ac:	9105      	str	r1, [sp, #20]
 800c5ae:	e7c4      	b.n	800c53a <_vfiprintf_r+0x15a>
 800c5b0:	fb0c 2101 	mla	r1, ip, r1, r2
 800c5b4:	4604      	mov	r4, r0
 800c5b6:	2301      	movs	r3, #1
 800c5b8:	e7f0      	b.n	800c59c <_vfiprintf_r+0x1bc>
 800c5ba:	ab03      	add	r3, sp, #12
 800c5bc:	9300      	str	r3, [sp, #0]
 800c5be:	462a      	mov	r2, r5
 800c5c0:	4b12      	ldr	r3, [pc, #72]	; (800c60c <_vfiprintf_r+0x22c>)
 800c5c2:	a904      	add	r1, sp, #16
 800c5c4:	4630      	mov	r0, r6
 800c5c6:	f7fc fdc3 	bl	8009150 <_printf_float>
 800c5ca:	4607      	mov	r7, r0
 800c5cc:	1c78      	adds	r0, r7, #1
 800c5ce:	d1d6      	bne.n	800c57e <_vfiprintf_r+0x19e>
 800c5d0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c5d2:	07d9      	lsls	r1, r3, #31
 800c5d4:	d405      	bmi.n	800c5e2 <_vfiprintf_r+0x202>
 800c5d6:	89ab      	ldrh	r3, [r5, #12]
 800c5d8:	059a      	lsls	r2, r3, #22
 800c5da:	d402      	bmi.n	800c5e2 <_vfiprintf_r+0x202>
 800c5dc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c5de:	f7fd fbe3 	bl	8009da8 <__retarget_lock_release_recursive>
 800c5e2:	89ab      	ldrh	r3, [r5, #12]
 800c5e4:	065b      	lsls	r3, r3, #25
 800c5e6:	f53f af1d 	bmi.w	800c424 <_vfiprintf_r+0x44>
 800c5ea:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c5ec:	e71c      	b.n	800c428 <_vfiprintf_r+0x48>
 800c5ee:	ab03      	add	r3, sp, #12
 800c5f0:	9300      	str	r3, [sp, #0]
 800c5f2:	462a      	mov	r2, r5
 800c5f4:	4b05      	ldr	r3, [pc, #20]	; (800c60c <_vfiprintf_r+0x22c>)
 800c5f6:	a904      	add	r1, sp, #16
 800c5f8:	4630      	mov	r0, r6
 800c5fa:	f7fd f84d 	bl	8009698 <_printf_i>
 800c5fe:	e7e4      	b.n	800c5ca <_vfiprintf_r+0x1ea>
 800c600:	0801048c 	.word	0x0801048c
 800c604:	08010496 	.word	0x08010496
 800c608:	08009151 	.word	0x08009151
 800c60c:	0800c3bb 	.word	0x0800c3bb
 800c610:	08010492 	.word	0x08010492

0800c614 <__swbuf_r>:
 800c614:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c616:	460e      	mov	r6, r1
 800c618:	4614      	mov	r4, r2
 800c61a:	4605      	mov	r5, r0
 800c61c:	b118      	cbz	r0, 800c626 <__swbuf_r+0x12>
 800c61e:	6a03      	ldr	r3, [r0, #32]
 800c620:	b90b      	cbnz	r3, 800c626 <__swbuf_r+0x12>
 800c622:	f7fd fa95 	bl	8009b50 <__sinit>
 800c626:	69a3      	ldr	r3, [r4, #24]
 800c628:	60a3      	str	r3, [r4, #8]
 800c62a:	89a3      	ldrh	r3, [r4, #12]
 800c62c:	071a      	lsls	r2, r3, #28
 800c62e:	d525      	bpl.n	800c67c <__swbuf_r+0x68>
 800c630:	6923      	ldr	r3, [r4, #16]
 800c632:	b31b      	cbz	r3, 800c67c <__swbuf_r+0x68>
 800c634:	6823      	ldr	r3, [r4, #0]
 800c636:	6922      	ldr	r2, [r4, #16]
 800c638:	1a98      	subs	r0, r3, r2
 800c63a:	6963      	ldr	r3, [r4, #20]
 800c63c:	b2f6      	uxtb	r6, r6
 800c63e:	4283      	cmp	r3, r0
 800c640:	4637      	mov	r7, r6
 800c642:	dc04      	bgt.n	800c64e <__swbuf_r+0x3a>
 800c644:	4621      	mov	r1, r4
 800c646:	4628      	mov	r0, r5
 800c648:	f7fd f9ce 	bl	80099e8 <_fflush_r>
 800c64c:	b9e0      	cbnz	r0, 800c688 <__swbuf_r+0x74>
 800c64e:	68a3      	ldr	r3, [r4, #8]
 800c650:	3b01      	subs	r3, #1
 800c652:	60a3      	str	r3, [r4, #8]
 800c654:	6823      	ldr	r3, [r4, #0]
 800c656:	1c5a      	adds	r2, r3, #1
 800c658:	6022      	str	r2, [r4, #0]
 800c65a:	701e      	strb	r6, [r3, #0]
 800c65c:	6962      	ldr	r2, [r4, #20]
 800c65e:	1c43      	adds	r3, r0, #1
 800c660:	429a      	cmp	r2, r3
 800c662:	d004      	beq.n	800c66e <__swbuf_r+0x5a>
 800c664:	89a3      	ldrh	r3, [r4, #12]
 800c666:	07db      	lsls	r3, r3, #31
 800c668:	d506      	bpl.n	800c678 <__swbuf_r+0x64>
 800c66a:	2e0a      	cmp	r6, #10
 800c66c:	d104      	bne.n	800c678 <__swbuf_r+0x64>
 800c66e:	4621      	mov	r1, r4
 800c670:	4628      	mov	r0, r5
 800c672:	f7fd f9b9 	bl	80099e8 <_fflush_r>
 800c676:	b938      	cbnz	r0, 800c688 <__swbuf_r+0x74>
 800c678:	4638      	mov	r0, r7
 800c67a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c67c:	4621      	mov	r1, r4
 800c67e:	4628      	mov	r0, r5
 800c680:	f000 f806 	bl	800c690 <__swsetup_r>
 800c684:	2800      	cmp	r0, #0
 800c686:	d0d5      	beq.n	800c634 <__swbuf_r+0x20>
 800c688:	f04f 37ff 	mov.w	r7, #4294967295
 800c68c:	e7f4      	b.n	800c678 <__swbuf_r+0x64>
	...

0800c690 <__swsetup_r>:
 800c690:	b538      	push	{r3, r4, r5, lr}
 800c692:	4b2a      	ldr	r3, [pc, #168]	; (800c73c <__swsetup_r+0xac>)
 800c694:	4605      	mov	r5, r0
 800c696:	6818      	ldr	r0, [r3, #0]
 800c698:	460c      	mov	r4, r1
 800c69a:	b118      	cbz	r0, 800c6a4 <__swsetup_r+0x14>
 800c69c:	6a03      	ldr	r3, [r0, #32]
 800c69e:	b90b      	cbnz	r3, 800c6a4 <__swsetup_r+0x14>
 800c6a0:	f7fd fa56 	bl	8009b50 <__sinit>
 800c6a4:	89a3      	ldrh	r3, [r4, #12]
 800c6a6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c6aa:	0718      	lsls	r0, r3, #28
 800c6ac:	d422      	bmi.n	800c6f4 <__swsetup_r+0x64>
 800c6ae:	06d9      	lsls	r1, r3, #27
 800c6b0:	d407      	bmi.n	800c6c2 <__swsetup_r+0x32>
 800c6b2:	2309      	movs	r3, #9
 800c6b4:	602b      	str	r3, [r5, #0]
 800c6b6:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800c6ba:	81a3      	strh	r3, [r4, #12]
 800c6bc:	f04f 30ff 	mov.w	r0, #4294967295
 800c6c0:	e034      	b.n	800c72c <__swsetup_r+0x9c>
 800c6c2:	0758      	lsls	r0, r3, #29
 800c6c4:	d512      	bpl.n	800c6ec <__swsetup_r+0x5c>
 800c6c6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c6c8:	b141      	cbz	r1, 800c6dc <__swsetup_r+0x4c>
 800c6ca:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c6ce:	4299      	cmp	r1, r3
 800c6d0:	d002      	beq.n	800c6d8 <__swsetup_r+0x48>
 800c6d2:	4628      	mov	r0, r5
 800c6d4:	f7fe f9f2 	bl	800aabc <_free_r>
 800c6d8:	2300      	movs	r3, #0
 800c6da:	6363      	str	r3, [r4, #52]	; 0x34
 800c6dc:	89a3      	ldrh	r3, [r4, #12]
 800c6de:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800c6e2:	81a3      	strh	r3, [r4, #12]
 800c6e4:	2300      	movs	r3, #0
 800c6e6:	6063      	str	r3, [r4, #4]
 800c6e8:	6923      	ldr	r3, [r4, #16]
 800c6ea:	6023      	str	r3, [r4, #0]
 800c6ec:	89a3      	ldrh	r3, [r4, #12]
 800c6ee:	f043 0308 	orr.w	r3, r3, #8
 800c6f2:	81a3      	strh	r3, [r4, #12]
 800c6f4:	6923      	ldr	r3, [r4, #16]
 800c6f6:	b94b      	cbnz	r3, 800c70c <__swsetup_r+0x7c>
 800c6f8:	89a3      	ldrh	r3, [r4, #12]
 800c6fa:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800c6fe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c702:	d003      	beq.n	800c70c <__swsetup_r+0x7c>
 800c704:	4621      	mov	r1, r4
 800c706:	4628      	mov	r0, r5
 800c708:	f7fe fe7a 	bl	800b400 <__smakebuf_r>
 800c70c:	89a0      	ldrh	r0, [r4, #12]
 800c70e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c712:	f010 0301 	ands.w	r3, r0, #1
 800c716:	d00a      	beq.n	800c72e <__swsetup_r+0x9e>
 800c718:	2300      	movs	r3, #0
 800c71a:	60a3      	str	r3, [r4, #8]
 800c71c:	6963      	ldr	r3, [r4, #20]
 800c71e:	425b      	negs	r3, r3
 800c720:	61a3      	str	r3, [r4, #24]
 800c722:	6923      	ldr	r3, [r4, #16]
 800c724:	b943      	cbnz	r3, 800c738 <__swsetup_r+0xa8>
 800c726:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800c72a:	d1c4      	bne.n	800c6b6 <__swsetup_r+0x26>
 800c72c:	bd38      	pop	{r3, r4, r5, pc}
 800c72e:	0781      	lsls	r1, r0, #30
 800c730:	bf58      	it	pl
 800c732:	6963      	ldrpl	r3, [r4, #20]
 800c734:	60a3      	str	r3, [r4, #8]
 800c736:	e7f4      	b.n	800c722 <__swsetup_r+0x92>
 800c738:	2000      	movs	r0, #0
 800c73a:	e7f7      	b.n	800c72c <__swsetup_r+0x9c>
 800c73c:	20000070 	.word	0x20000070

0800c740 <_raise_r>:
 800c740:	291f      	cmp	r1, #31
 800c742:	b538      	push	{r3, r4, r5, lr}
 800c744:	4604      	mov	r4, r0
 800c746:	460d      	mov	r5, r1
 800c748:	d904      	bls.n	800c754 <_raise_r+0x14>
 800c74a:	2316      	movs	r3, #22
 800c74c:	6003      	str	r3, [r0, #0]
 800c74e:	f04f 30ff 	mov.w	r0, #4294967295
 800c752:	bd38      	pop	{r3, r4, r5, pc}
 800c754:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800c756:	b112      	cbz	r2, 800c75e <_raise_r+0x1e>
 800c758:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c75c:	b94b      	cbnz	r3, 800c772 <_raise_r+0x32>
 800c75e:	4620      	mov	r0, r4
 800c760:	f000 f830 	bl	800c7c4 <_getpid_r>
 800c764:	462a      	mov	r2, r5
 800c766:	4601      	mov	r1, r0
 800c768:	4620      	mov	r0, r4
 800c76a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c76e:	f000 b817 	b.w	800c7a0 <_kill_r>
 800c772:	2b01      	cmp	r3, #1
 800c774:	d00a      	beq.n	800c78c <_raise_r+0x4c>
 800c776:	1c59      	adds	r1, r3, #1
 800c778:	d103      	bne.n	800c782 <_raise_r+0x42>
 800c77a:	2316      	movs	r3, #22
 800c77c:	6003      	str	r3, [r0, #0]
 800c77e:	2001      	movs	r0, #1
 800c780:	e7e7      	b.n	800c752 <_raise_r+0x12>
 800c782:	2400      	movs	r4, #0
 800c784:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800c788:	4628      	mov	r0, r5
 800c78a:	4798      	blx	r3
 800c78c:	2000      	movs	r0, #0
 800c78e:	e7e0      	b.n	800c752 <_raise_r+0x12>

0800c790 <raise>:
 800c790:	4b02      	ldr	r3, [pc, #8]	; (800c79c <raise+0xc>)
 800c792:	4601      	mov	r1, r0
 800c794:	6818      	ldr	r0, [r3, #0]
 800c796:	f7ff bfd3 	b.w	800c740 <_raise_r>
 800c79a:	bf00      	nop
 800c79c:	20000070 	.word	0x20000070

0800c7a0 <_kill_r>:
 800c7a0:	b538      	push	{r3, r4, r5, lr}
 800c7a2:	4d07      	ldr	r5, [pc, #28]	; (800c7c0 <_kill_r+0x20>)
 800c7a4:	2300      	movs	r3, #0
 800c7a6:	4604      	mov	r4, r0
 800c7a8:	4608      	mov	r0, r1
 800c7aa:	4611      	mov	r1, r2
 800c7ac:	602b      	str	r3, [r5, #0]
 800c7ae:	f7f5 f9f9 	bl	8001ba4 <_kill>
 800c7b2:	1c43      	adds	r3, r0, #1
 800c7b4:	d102      	bne.n	800c7bc <_kill_r+0x1c>
 800c7b6:	682b      	ldr	r3, [r5, #0]
 800c7b8:	b103      	cbz	r3, 800c7bc <_kill_r+0x1c>
 800c7ba:	6023      	str	r3, [r4, #0]
 800c7bc:	bd38      	pop	{r3, r4, r5, pc}
 800c7be:	bf00      	nop
 800c7c0:	2000a7b8 	.word	0x2000a7b8

0800c7c4 <_getpid_r>:
 800c7c4:	f7f5 b9e6 	b.w	8001b94 <_getpid>

0800c7c8 <_malloc_usable_size_r>:
 800c7c8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c7cc:	1f18      	subs	r0, r3, #4
 800c7ce:	2b00      	cmp	r3, #0
 800c7d0:	bfbc      	itt	lt
 800c7d2:	580b      	ldrlt	r3, [r1, r0]
 800c7d4:	18c0      	addlt	r0, r0, r3
 800c7d6:	4770      	bx	lr

0800c7d8 <log10>:
 800c7d8:	b538      	push	{r3, r4, r5, lr}
 800c7da:	ed2d 8b02 	vpush	{d8}
 800c7de:	ec55 4b10 	vmov	r4, r5, d0
 800c7e2:	f000 f865 	bl	800c8b0 <__ieee754_log10>
 800c7e6:	4622      	mov	r2, r4
 800c7e8:	462b      	mov	r3, r5
 800c7ea:	4620      	mov	r0, r4
 800c7ec:	4629      	mov	r1, r5
 800c7ee:	eeb0 8a40 	vmov.f32	s16, s0
 800c7f2:	eef0 8a60 	vmov.f32	s17, s1
 800c7f6:	f7f4 f999 	bl	8000b2c <__aeabi_dcmpun>
 800c7fa:	b998      	cbnz	r0, 800c824 <log10+0x4c>
 800c7fc:	2200      	movs	r2, #0
 800c7fe:	2300      	movs	r3, #0
 800c800:	4620      	mov	r0, r4
 800c802:	4629      	mov	r1, r5
 800c804:	f7f4 f974 	bl	8000af0 <__aeabi_dcmple>
 800c808:	b160      	cbz	r0, 800c824 <log10+0x4c>
 800c80a:	2200      	movs	r2, #0
 800c80c:	2300      	movs	r3, #0
 800c80e:	4620      	mov	r0, r4
 800c810:	4629      	mov	r1, r5
 800c812:	f7f4 f959 	bl	8000ac8 <__aeabi_dcmpeq>
 800c816:	b160      	cbz	r0, 800c832 <log10+0x5a>
 800c818:	f7fd fa9a 	bl	8009d50 <__errno>
 800c81c:	ed9f 8b0a 	vldr	d8, [pc, #40]	; 800c848 <log10+0x70>
 800c820:	2322      	movs	r3, #34	; 0x22
 800c822:	6003      	str	r3, [r0, #0]
 800c824:	eeb0 0a48 	vmov.f32	s0, s16
 800c828:	eef0 0a68 	vmov.f32	s1, s17
 800c82c:	ecbd 8b02 	vpop	{d8}
 800c830:	bd38      	pop	{r3, r4, r5, pc}
 800c832:	f7fd fa8d 	bl	8009d50 <__errno>
 800c836:	ecbd 8b02 	vpop	{d8}
 800c83a:	2321      	movs	r3, #33	; 0x21
 800c83c:	6003      	str	r3, [r0, #0]
 800c83e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c842:	4803      	ldr	r0, [pc, #12]	; (800c850 <log10+0x78>)
 800c844:	f000 b808 	b.w	800c858 <nan>
 800c848:	00000000 	.word	0x00000000
 800c84c:	fff00000 	.word	0xfff00000
 800c850:	08010331 	.word	0x08010331
 800c854:	00000000 	.word	0x00000000

0800c858 <nan>:
 800c858:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800c860 <nan+0x8>
 800c85c:	4770      	bx	lr
 800c85e:	bf00      	nop
 800c860:	00000000 	.word	0x00000000
 800c864:	7ff80000 	.word	0x7ff80000

0800c868 <roundf>:
 800c868:	ee10 0a10 	vmov	r0, s0
 800c86c:	f3c0 52c7 	ubfx	r2, r0, #23, #8
 800c870:	3a7f      	subs	r2, #127	; 0x7f
 800c872:	2a16      	cmp	r2, #22
 800c874:	dc15      	bgt.n	800c8a2 <roundf+0x3a>
 800c876:	2a00      	cmp	r2, #0
 800c878:	da08      	bge.n	800c88c <roundf+0x24>
 800c87a:	3201      	adds	r2, #1
 800c87c:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 800c880:	d101      	bne.n	800c886 <roundf+0x1e>
 800c882:	f043 537e 	orr.w	r3, r3, #1065353216	; 0x3f800000
 800c886:	ee00 3a10 	vmov	s0, r3
 800c88a:	4770      	bx	lr
 800c88c:	4907      	ldr	r1, [pc, #28]	; (800c8ac <roundf+0x44>)
 800c88e:	4111      	asrs	r1, r2
 800c890:	4208      	tst	r0, r1
 800c892:	d0fa      	beq.n	800c88a <roundf+0x22>
 800c894:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800c898:	4113      	asrs	r3, r2
 800c89a:	4403      	add	r3, r0
 800c89c:	ea23 0301 	bic.w	r3, r3, r1
 800c8a0:	e7f1      	b.n	800c886 <roundf+0x1e>
 800c8a2:	2a80      	cmp	r2, #128	; 0x80
 800c8a4:	d1f1      	bne.n	800c88a <roundf+0x22>
 800c8a6:	ee30 0a00 	vadd.f32	s0, s0, s0
 800c8aa:	4770      	bx	lr
 800c8ac:	007fffff 	.word	0x007fffff

0800c8b0 <__ieee754_log10>:
 800c8b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c8b4:	ec55 4b10 	vmov	r4, r5, d0
 800c8b8:	f5b5 1f80 	cmp.w	r5, #1048576	; 0x100000
 800c8bc:	462b      	mov	r3, r5
 800c8be:	da2f      	bge.n	800c920 <__ieee754_log10+0x70>
 800c8c0:	f025 4200 	bic.w	r2, r5, #2147483648	; 0x80000000
 800c8c4:	4322      	orrs	r2, r4
 800c8c6:	d109      	bne.n	800c8dc <__ieee754_log10+0x2c>
 800c8c8:	493b      	ldr	r1, [pc, #236]	; (800c9b8 <__ieee754_log10+0x108>)
 800c8ca:	2200      	movs	r2, #0
 800c8cc:	2300      	movs	r3, #0
 800c8ce:	2000      	movs	r0, #0
 800c8d0:	f7f3 ffbc 	bl	800084c <__aeabi_ddiv>
 800c8d4:	ec41 0b10 	vmov	d0, r0, r1
 800c8d8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c8dc:	2d00      	cmp	r5, #0
 800c8de:	da09      	bge.n	800c8f4 <__ieee754_log10+0x44>
 800c8e0:	ee10 2a10 	vmov	r2, s0
 800c8e4:	ee10 0a10 	vmov	r0, s0
 800c8e8:	4629      	mov	r1, r5
 800c8ea:	f7f3 fccd 	bl	8000288 <__aeabi_dsub>
 800c8ee:	2200      	movs	r2, #0
 800c8f0:	2300      	movs	r3, #0
 800c8f2:	e7ed      	b.n	800c8d0 <__ieee754_log10+0x20>
 800c8f4:	4b31      	ldr	r3, [pc, #196]	; (800c9bc <__ieee754_log10+0x10c>)
 800c8f6:	2200      	movs	r2, #0
 800c8f8:	4629      	mov	r1, r5
 800c8fa:	ee10 0a10 	vmov	r0, s0
 800c8fe:	f7f3 fe7b 	bl	80005f8 <__aeabi_dmul>
 800c902:	f06f 0235 	mvn.w	r2, #53	; 0x35
 800c906:	4604      	mov	r4, r0
 800c908:	460d      	mov	r5, r1
 800c90a:	460b      	mov	r3, r1
 800c90c:	492c      	ldr	r1, [pc, #176]	; (800c9c0 <__ieee754_log10+0x110>)
 800c90e:	428b      	cmp	r3, r1
 800c910:	dd08      	ble.n	800c924 <__ieee754_log10+0x74>
 800c912:	4622      	mov	r2, r4
 800c914:	462b      	mov	r3, r5
 800c916:	4620      	mov	r0, r4
 800c918:	4629      	mov	r1, r5
 800c91a:	f7f3 fcb7 	bl	800028c <__adddf3>
 800c91e:	e7d9      	b.n	800c8d4 <__ieee754_log10+0x24>
 800c920:	2200      	movs	r2, #0
 800c922:	e7f3      	b.n	800c90c <__ieee754_log10+0x5c>
 800c924:	1518      	asrs	r0, r3, #20
 800c926:	f2a0 30ff 	subw	r0, r0, #1023	; 0x3ff
 800c92a:	4410      	add	r0, r2
 800c92c:	ea4f 79d0 	mov.w	r9, r0, lsr #31
 800c930:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 800c934:	f3c3 0813 	ubfx	r8, r3, #0, #20
 800c938:	f7f3 fdf4 	bl	8000524 <__aeabi_i2d>
 800c93c:	f5c9 737f 	rsb	r3, r9, #1020	; 0x3fc
 800c940:	3303      	adds	r3, #3
 800c942:	ea48 5503 	orr.w	r5, r8, r3, lsl #20
 800c946:	ec45 4b10 	vmov	d0, r4, r5
 800c94a:	4606      	mov	r6, r0
 800c94c:	460f      	mov	r7, r1
 800c94e:	f000 f83b 	bl	800c9c8 <__ieee754_log>
 800c952:	a313      	add	r3, pc, #76	; (adr r3, 800c9a0 <__ieee754_log10+0xf0>)
 800c954:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c958:	4630      	mov	r0, r6
 800c95a:	4639      	mov	r1, r7
 800c95c:	ec59 8b10 	vmov	r8, r9, d0
 800c960:	f7f3 fe4a 	bl	80005f8 <__aeabi_dmul>
 800c964:	a310      	add	r3, pc, #64	; (adr r3, 800c9a8 <__ieee754_log10+0xf8>)
 800c966:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c96a:	4604      	mov	r4, r0
 800c96c:	460d      	mov	r5, r1
 800c96e:	4640      	mov	r0, r8
 800c970:	4649      	mov	r1, r9
 800c972:	f7f3 fe41 	bl	80005f8 <__aeabi_dmul>
 800c976:	4602      	mov	r2, r0
 800c978:	460b      	mov	r3, r1
 800c97a:	4620      	mov	r0, r4
 800c97c:	4629      	mov	r1, r5
 800c97e:	f7f3 fc85 	bl	800028c <__adddf3>
 800c982:	a30b      	add	r3, pc, #44	; (adr r3, 800c9b0 <__ieee754_log10+0x100>)
 800c984:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c988:	4604      	mov	r4, r0
 800c98a:	460d      	mov	r5, r1
 800c98c:	4630      	mov	r0, r6
 800c98e:	4639      	mov	r1, r7
 800c990:	f7f3 fe32 	bl	80005f8 <__aeabi_dmul>
 800c994:	4602      	mov	r2, r0
 800c996:	460b      	mov	r3, r1
 800c998:	4620      	mov	r0, r4
 800c99a:	4629      	mov	r1, r5
 800c99c:	e7bd      	b.n	800c91a <__ieee754_log10+0x6a>
 800c99e:	bf00      	nop
 800c9a0:	11f12b36 	.word	0x11f12b36
 800c9a4:	3d59fef3 	.word	0x3d59fef3
 800c9a8:	1526e50e 	.word	0x1526e50e
 800c9ac:	3fdbcb7b 	.word	0x3fdbcb7b
 800c9b0:	509f6000 	.word	0x509f6000
 800c9b4:	3fd34413 	.word	0x3fd34413
 800c9b8:	c3500000 	.word	0xc3500000
 800c9bc:	43500000 	.word	0x43500000
 800c9c0:	7fefffff 	.word	0x7fefffff
 800c9c4:	00000000 	.word	0x00000000

0800c9c8 <__ieee754_log>:
 800c9c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c9cc:	ec51 0b10 	vmov	r0, r1, d0
 800c9d0:	ed2d 8b04 	vpush	{d8-d9}
 800c9d4:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800c9d8:	b083      	sub	sp, #12
 800c9da:	460d      	mov	r5, r1
 800c9dc:	da29      	bge.n	800ca32 <__ieee754_log+0x6a>
 800c9de:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800c9e2:	4303      	orrs	r3, r0
 800c9e4:	ee10 2a10 	vmov	r2, s0
 800c9e8:	d10c      	bne.n	800ca04 <__ieee754_log+0x3c>
 800c9ea:	49cf      	ldr	r1, [pc, #828]	; (800cd28 <__ieee754_log+0x360>)
 800c9ec:	2200      	movs	r2, #0
 800c9ee:	2300      	movs	r3, #0
 800c9f0:	2000      	movs	r0, #0
 800c9f2:	f7f3 ff2b 	bl	800084c <__aeabi_ddiv>
 800c9f6:	ec41 0b10 	vmov	d0, r0, r1
 800c9fa:	b003      	add	sp, #12
 800c9fc:	ecbd 8b04 	vpop	{d8-d9}
 800ca00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ca04:	2900      	cmp	r1, #0
 800ca06:	da05      	bge.n	800ca14 <__ieee754_log+0x4c>
 800ca08:	460b      	mov	r3, r1
 800ca0a:	f7f3 fc3d 	bl	8000288 <__aeabi_dsub>
 800ca0e:	2200      	movs	r2, #0
 800ca10:	2300      	movs	r3, #0
 800ca12:	e7ee      	b.n	800c9f2 <__ieee754_log+0x2a>
 800ca14:	4bc5      	ldr	r3, [pc, #788]	; (800cd2c <__ieee754_log+0x364>)
 800ca16:	2200      	movs	r2, #0
 800ca18:	f7f3 fdee 	bl	80005f8 <__aeabi_dmul>
 800ca1c:	f06f 0335 	mvn.w	r3, #53	; 0x35
 800ca20:	460d      	mov	r5, r1
 800ca22:	4ac3      	ldr	r2, [pc, #780]	; (800cd30 <__ieee754_log+0x368>)
 800ca24:	4295      	cmp	r5, r2
 800ca26:	dd06      	ble.n	800ca36 <__ieee754_log+0x6e>
 800ca28:	4602      	mov	r2, r0
 800ca2a:	460b      	mov	r3, r1
 800ca2c:	f7f3 fc2e 	bl	800028c <__adddf3>
 800ca30:	e7e1      	b.n	800c9f6 <__ieee754_log+0x2e>
 800ca32:	2300      	movs	r3, #0
 800ca34:	e7f5      	b.n	800ca22 <__ieee754_log+0x5a>
 800ca36:	152c      	asrs	r4, r5, #20
 800ca38:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 800ca3c:	f3c5 0513 	ubfx	r5, r5, #0, #20
 800ca40:	441c      	add	r4, r3
 800ca42:	f505 2315 	add.w	r3, r5, #610304	; 0x95000
 800ca46:	f603 7364 	addw	r3, r3, #3940	; 0xf64
 800ca4a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800ca4e:	f083 527f 	eor.w	r2, r3, #1069547520	; 0x3fc00000
 800ca52:	f482 1240 	eor.w	r2, r2, #3145728	; 0x300000
 800ca56:	ea42 0105 	orr.w	r1, r2, r5
 800ca5a:	eb04 5413 	add.w	r4, r4, r3, lsr #20
 800ca5e:	2200      	movs	r2, #0
 800ca60:	4bb4      	ldr	r3, [pc, #720]	; (800cd34 <__ieee754_log+0x36c>)
 800ca62:	f7f3 fc11 	bl	8000288 <__aeabi_dsub>
 800ca66:	1cab      	adds	r3, r5, #2
 800ca68:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ca6c:	2b02      	cmp	r3, #2
 800ca6e:	4682      	mov	sl, r0
 800ca70:	468b      	mov	fp, r1
 800ca72:	f04f 0200 	mov.w	r2, #0
 800ca76:	dc53      	bgt.n	800cb20 <__ieee754_log+0x158>
 800ca78:	2300      	movs	r3, #0
 800ca7a:	f7f4 f825 	bl	8000ac8 <__aeabi_dcmpeq>
 800ca7e:	b1d0      	cbz	r0, 800cab6 <__ieee754_log+0xee>
 800ca80:	2c00      	cmp	r4, #0
 800ca82:	f000 8122 	beq.w	800ccca <__ieee754_log+0x302>
 800ca86:	4620      	mov	r0, r4
 800ca88:	f7f3 fd4c 	bl	8000524 <__aeabi_i2d>
 800ca8c:	a390      	add	r3, pc, #576	; (adr r3, 800ccd0 <__ieee754_log+0x308>)
 800ca8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca92:	4606      	mov	r6, r0
 800ca94:	460f      	mov	r7, r1
 800ca96:	f7f3 fdaf 	bl	80005f8 <__aeabi_dmul>
 800ca9a:	a38f      	add	r3, pc, #572	; (adr r3, 800ccd8 <__ieee754_log+0x310>)
 800ca9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800caa0:	4604      	mov	r4, r0
 800caa2:	460d      	mov	r5, r1
 800caa4:	4630      	mov	r0, r6
 800caa6:	4639      	mov	r1, r7
 800caa8:	f7f3 fda6 	bl	80005f8 <__aeabi_dmul>
 800caac:	4602      	mov	r2, r0
 800caae:	460b      	mov	r3, r1
 800cab0:	4620      	mov	r0, r4
 800cab2:	4629      	mov	r1, r5
 800cab4:	e7ba      	b.n	800ca2c <__ieee754_log+0x64>
 800cab6:	a38a      	add	r3, pc, #552	; (adr r3, 800cce0 <__ieee754_log+0x318>)
 800cab8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cabc:	4650      	mov	r0, sl
 800cabe:	4659      	mov	r1, fp
 800cac0:	f7f3 fd9a 	bl	80005f8 <__aeabi_dmul>
 800cac4:	4602      	mov	r2, r0
 800cac6:	460b      	mov	r3, r1
 800cac8:	2000      	movs	r0, #0
 800caca:	499b      	ldr	r1, [pc, #620]	; (800cd38 <__ieee754_log+0x370>)
 800cacc:	f7f3 fbdc 	bl	8000288 <__aeabi_dsub>
 800cad0:	4652      	mov	r2, sl
 800cad2:	4606      	mov	r6, r0
 800cad4:	460f      	mov	r7, r1
 800cad6:	465b      	mov	r3, fp
 800cad8:	4650      	mov	r0, sl
 800cada:	4659      	mov	r1, fp
 800cadc:	f7f3 fd8c 	bl	80005f8 <__aeabi_dmul>
 800cae0:	4602      	mov	r2, r0
 800cae2:	460b      	mov	r3, r1
 800cae4:	4630      	mov	r0, r6
 800cae6:	4639      	mov	r1, r7
 800cae8:	f7f3 fd86 	bl	80005f8 <__aeabi_dmul>
 800caec:	4606      	mov	r6, r0
 800caee:	460f      	mov	r7, r1
 800caf0:	b914      	cbnz	r4, 800caf8 <__ieee754_log+0x130>
 800caf2:	4632      	mov	r2, r6
 800caf4:	463b      	mov	r3, r7
 800caf6:	e0a2      	b.n	800cc3e <__ieee754_log+0x276>
 800caf8:	4620      	mov	r0, r4
 800cafa:	f7f3 fd13 	bl	8000524 <__aeabi_i2d>
 800cafe:	a374      	add	r3, pc, #464	; (adr r3, 800ccd0 <__ieee754_log+0x308>)
 800cb00:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb04:	4680      	mov	r8, r0
 800cb06:	4689      	mov	r9, r1
 800cb08:	f7f3 fd76 	bl	80005f8 <__aeabi_dmul>
 800cb0c:	a372      	add	r3, pc, #456	; (adr r3, 800ccd8 <__ieee754_log+0x310>)
 800cb0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb12:	4604      	mov	r4, r0
 800cb14:	460d      	mov	r5, r1
 800cb16:	4640      	mov	r0, r8
 800cb18:	4649      	mov	r1, r9
 800cb1a:	f7f3 fd6d 	bl	80005f8 <__aeabi_dmul>
 800cb1e:	e0a7      	b.n	800cc70 <__ieee754_log+0x2a8>
 800cb20:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800cb24:	f7f3 fbb2 	bl	800028c <__adddf3>
 800cb28:	4602      	mov	r2, r0
 800cb2a:	460b      	mov	r3, r1
 800cb2c:	4650      	mov	r0, sl
 800cb2e:	4659      	mov	r1, fp
 800cb30:	f7f3 fe8c 	bl	800084c <__aeabi_ddiv>
 800cb34:	ec41 0b18 	vmov	d8, r0, r1
 800cb38:	4620      	mov	r0, r4
 800cb3a:	f7f3 fcf3 	bl	8000524 <__aeabi_i2d>
 800cb3e:	ec53 2b18 	vmov	r2, r3, d8
 800cb42:	ec41 0b19 	vmov	d9, r0, r1
 800cb46:	ec51 0b18 	vmov	r0, r1, d8
 800cb4a:	f7f3 fd55 	bl	80005f8 <__aeabi_dmul>
 800cb4e:	f5a5 23c2 	sub.w	r3, r5, #397312	; 0x61000
 800cb52:	f2a3 437a 	subw	r3, r3, #1146	; 0x47a
 800cb56:	9301      	str	r3, [sp, #4]
 800cb58:	4602      	mov	r2, r0
 800cb5a:	460b      	mov	r3, r1
 800cb5c:	4680      	mov	r8, r0
 800cb5e:	4689      	mov	r9, r1
 800cb60:	f7f3 fd4a 	bl	80005f8 <__aeabi_dmul>
 800cb64:	a360      	add	r3, pc, #384	; (adr r3, 800cce8 <__ieee754_log+0x320>)
 800cb66:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb6a:	4606      	mov	r6, r0
 800cb6c:	460f      	mov	r7, r1
 800cb6e:	f7f3 fd43 	bl	80005f8 <__aeabi_dmul>
 800cb72:	a35f      	add	r3, pc, #380	; (adr r3, 800ccf0 <__ieee754_log+0x328>)
 800cb74:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb78:	f7f3 fb88 	bl	800028c <__adddf3>
 800cb7c:	4632      	mov	r2, r6
 800cb7e:	463b      	mov	r3, r7
 800cb80:	f7f3 fd3a 	bl	80005f8 <__aeabi_dmul>
 800cb84:	a35c      	add	r3, pc, #368	; (adr r3, 800ccf8 <__ieee754_log+0x330>)
 800cb86:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb8a:	f7f3 fb7f 	bl	800028c <__adddf3>
 800cb8e:	4632      	mov	r2, r6
 800cb90:	463b      	mov	r3, r7
 800cb92:	f7f3 fd31 	bl	80005f8 <__aeabi_dmul>
 800cb96:	a35a      	add	r3, pc, #360	; (adr r3, 800cd00 <__ieee754_log+0x338>)
 800cb98:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb9c:	f7f3 fb76 	bl	800028c <__adddf3>
 800cba0:	4642      	mov	r2, r8
 800cba2:	464b      	mov	r3, r9
 800cba4:	f7f3 fd28 	bl	80005f8 <__aeabi_dmul>
 800cba8:	a357      	add	r3, pc, #348	; (adr r3, 800cd08 <__ieee754_log+0x340>)
 800cbaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cbae:	4680      	mov	r8, r0
 800cbb0:	4689      	mov	r9, r1
 800cbb2:	4630      	mov	r0, r6
 800cbb4:	4639      	mov	r1, r7
 800cbb6:	f7f3 fd1f 	bl	80005f8 <__aeabi_dmul>
 800cbba:	a355      	add	r3, pc, #340	; (adr r3, 800cd10 <__ieee754_log+0x348>)
 800cbbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cbc0:	f7f3 fb64 	bl	800028c <__adddf3>
 800cbc4:	4632      	mov	r2, r6
 800cbc6:	463b      	mov	r3, r7
 800cbc8:	f7f3 fd16 	bl	80005f8 <__aeabi_dmul>
 800cbcc:	a352      	add	r3, pc, #328	; (adr r3, 800cd18 <__ieee754_log+0x350>)
 800cbce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cbd2:	f7f3 fb5b 	bl	800028c <__adddf3>
 800cbd6:	4632      	mov	r2, r6
 800cbd8:	463b      	mov	r3, r7
 800cbda:	f7f3 fd0d 	bl	80005f8 <__aeabi_dmul>
 800cbde:	460b      	mov	r3, r1
 800cbe0:	4602      	mov	r2, r0
 800cbe2:	4649      	mov	r1, r9
 800cbe4:	4640      	mov	r0, r8
 800cbe6:	f7f3 fb51 	bl	800028c <__adddf3>
 800cbea:	f5c5 25d7 	rsb	r5, r5, #440320	; 0x6b800
 800cbee:	9b01      	ldr	r3, [sp, #4]
 800cbf0:	3551      	adds	r5, #81	; 0x51
 800cbf2:	431d      	orrs	r5, r3
 800cbf4:	2d00      	cmp	r5, #0
 800cbf6:	4680      	mov	r8, r0
 800cbf8:	4689      	mov	r9, r1
 800cbfa:	dd48      	ble.n	800cc8e <__ieee754_log+0x2c6>
 800cbfc:	4b4e      	ldr	r3, [pc, #312]	; (800cd38 <__ieee754_log+0x370>)
 800cbfe:	2200      	movs	r2, #0
 800cc00:	4650      	mov	r0, sl
 800cc02:	4659      	mov	r1, fp
 800cc04:	f7f3 fcf8 	bl	80005f8 <__aeabi_dmul>
 800cc08:	4652      	mov	r2, sl
 800cc0a:	465b      	mov	r3, fp
 800cc0c:	f7f3 fcf4 	bl	80005f8 <__aeabi_dmul>
 800cc10:	4602      	mov	r2, r0
 800cc12:	460b      	mov	r3, r1
 800cc14:	4606      	mov	r6, r0
 800cc16:	460f      	mov	r7, r1
 800cc18:	4640      	mov	r0, r8
 800cc1a:	4649      	mov	r1, r9
 800cc1c:	f7f3 fb36 	bl	800028c <__adddf3>
 800cc20:	ec53 2b18 	vmov	r2, r3, d8
 800cc24:	f7f3 fce8 	bl	80005f8 <__aeabi_dmul>
 800cc28:	4680      	mov	r8, r0
 800cc2a:	4689      	mov	r9, r1
 800cc2c:	b964      	cbnz	r4, 800cc48 <__ieee754_log+0x280>
 800cc2e:	4602      	mov	r2, r0
 800cc30:	460b      	mov	r3, r1
 800cc32:	4630      	mov	r0, r6
 800cc34:	4639      	mov	r1, r7
 800cc36:	f7f3 fb27 	bl	8000288 <__aeabi_dsub>
 800cc3a:	4602      	mov	r2, r0
 800cc3c:	460b      	mov	r3, r1
 800cc3e:	4650      	mov	r0, sl
 800cc40:	4659      	mov	r1, fp
 800cc42:	f7f3 fb21 	bl	8000288 <__aeabi_dsub>
 800cc46:	e6d6      	b.n	800c9f6 <__ieee754_log+0x2e>
 800cc48:	a321      	add	r3, pc, #132	; (adr r3, 800ccd0 <__ieee754_log+0x308>)
 800cc4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc4e:	ec51 0b19 	vmov	r0, r1, d9
 800cc52:	f7f3 fcd1 	bl	80005f8 <__aeabi_dmul>
 800cc56:	a320      	add	r3, pc, #128	; (adr r3, 800ccd8 <__ieee754_log+0x310>)
 800cc58:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc5c:	4604      	mov	r4, r0
 800cc5e:	460d      	mov	r5, r1
 800cc60:	ec51 0b19 	vmov	r0, r1, d9
 800cc64:	f7f3 fcc8 	bl	80005f8 <__aeabi_dmul>
 800cc68:	4642      	mov	r2, r8
 800cc6a:	464b      	mov	r3, r9
 800cc6c:	f7f3 fb0e 	bl	800028c <__adddf3>
 800cc70:	4602      	mov	r2, r0
 800cc72:	460b      	mov	r3, r1
 800cc74:	4630      	mov	r0, r6
 800cc76:	4639      	mov	r1, r7
 800cc78:	f7f3 fb06 	bl	8000288 <__aeabi_dsub>
 800cc7c:	4652      	mov	r2, sl
 800cc7e:	465b      	mov	r3, fp
 800cc80:	f7f3 fb02 	bl	8000288 <__aeabi_dsub>
 800cc84:	4602      	mov	r2, r0
 800cc86:	460b      	mov	r3, r1
 800cc88:	4620      	mov	r0, r4
 800cc8a:	4629      	mov	r1, r5
 800cc8c:	e7d9      	b.n	800cc42 <__ieee754_log+0x27a>
 800cc8e:	4602      	mov	r2, r0
 800cc90:	460b      	mov	r3, r1
 800cc92:	4650      	mov	r0, sl
 800cc94:	4659      	mov	r1, fp
 800cc96:	f7f3 faf7 	bl	8000288 <__aeabi_dsub>
 800cc9a:	ec53 2b18 	vmov	r2, r3, d8
 800cc9e:	f7f3 fcab 	bl	80005f8 <__aeabi_dmul>
 800cca2:	4606      	mov	r6, r0
 800cca4:	460f      	mov	r7, r1
 800cca6:	2c00      	cmp	r4, #0
 800cca8:	f43f af23 	beq.w	800caf2 <__ieee754_log+0x12a>
 800ccac:	a308      	add	r3, pc, #32	; (adr r3, 800ccd0 <__ieee754_log+0x308>)
 800ccae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ccb2:	ec51 0b19 	vmov	r0, r1, d9
 800ccb6:	f7f3 fc9f 	bl	80005f8 <__aeabi_dmul>
 800ccba:	a307      	add	r3, pc, #28	; (adr r3, 800ccd8 <__ieee754_log+0x310>)
 800ccbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ccc0:	4604      	mov	r4, r0
 800ccc2:	460d      	mov	r5, r1
 800ccc4:	ec51 0b19 	vmov	r0, r1, d9
 800ccc8:	e727      	b.n	800cb1a <__ieee754_log+0x152>
 800ccca:	ed9f 0b15 	vldr	d0, [pc, #84]	; 800cd20 <__ieee754_log+0x358>
 800ccce:	e694      	b.n	800c9fa <__ieee754_log+0x32>
 800ccd0:	fee00000 	.word	0xfee00000
 800ccd4:	3fe62e42 	.word	0x3fe62e42
 800ccd8:	35793c76 	.word	0x35793c76
 800ccdc:	3dea39ef 	.word	0x3dea39ef
 800cce0:	55555555 	.word	0x55555555
 800cce4:	3fd55555 	.word	0x3fd55555
 800cce8:	df3e5244 	.word	0xdf3e5244
 800ccec:	3fc2f112 	.word	0x3fc2f112
 800ccf0:	96cb03de 	.word	0x96cb03de
 800ccf4:	3fc74664 	.word	0x3fc74664
 800ccf8:	94229359 	.word	0x94229359
 800ccfc:	3fd24924 	.word	0x3fd24924
 800cd00:	55555593 	.word	0x55555593
 800cd04:	3fe55555 	.word	0x3fe55555
 800cd08:	d078c69f 	.word	0xd078c69f
 800cd0c:	3fc39a09 	.word	0x3fc39a09
 800cd10:	1d8e78af 	.word	0x1d8e78af
 800cd14:	3fcc71c5 	.word	0x3fcc71c5
 800cd18:	9997fa04 	.word	0x9997fa04
 800cd1c:	3fd99999 	.word	0x3fd99999
	...
 800cd28:	c3500000 	.word	0xc3500000
 800cd2c:	43500000 	.word	0x43500000
 800cd30:	7fefffff 	.word	0x7fefffff
 800cd34:	3ff00000 	.word	0x3ff00000
 800cd38:	3fe00000 	.word	0x3fe00000

0800cd3c <_init>:
 800cd3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cd3e:	bf00      	nop
 800cd40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cd42:	bc08      	pop	{r3}
 800cd44:	469e      	mov	lr, r3
 800cd46:	4770      	bx	lr

0800cd48 <_fini>:
 800cd48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cd4a:	bf00      	nop
 800cd4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cd4e:	bc08      	pop	{r3}
 800cd50:	469e      	mov	lr, r3
 800cd52:	4770      	bx	lr
